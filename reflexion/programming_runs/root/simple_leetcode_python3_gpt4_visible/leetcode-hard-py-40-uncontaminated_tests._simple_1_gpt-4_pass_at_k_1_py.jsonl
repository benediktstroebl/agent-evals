{"task_id": "minimum-reverse-operations", "prompt": "def minReverseOperations(n: int, p: int, banned: List[int], k: int) -> List[int]:\n    \"\"\"\n    You are given an integer n and an integer p in the range [0, n - 1]. Representing a 0-indexed array arr of length n where all positions are set to 0's, except position p which is set to 1.\n    You are also given an integer array banned containing some positions from the array. For the ith position in banned, arr[banned[i]] = 0, and banned[i] != p.\n    You can perform multiple operations on arr. In an operation, you can choose a subarray with size k and reverse the subarray. However, the 1 in arr should never go to any of the positions in banned. In other words, after each operation arr[banned[i]] remains 0.\n    Return an array ans where for each i from [0, n - 1], ans[i] is the minimum number of reverse operations needed to bring the 1 to position i in arr, or -1 if it is impossible.\n    A subarray is a contiguous non-empty sequence of elements within an array.\n    The values of ans[i] are independent for all i's.\n    The reverse of an array is an array containing the values in reverse order.\n    \"\"\"\n", "entry_point": "minimum-reverse-operations", "cannonical_solution": "", "test": "", "visible_tests": ["assert minReverseOperations(4, 0, [1,2], 4) == [0,-1,-1,1]", "assert minReverseOperations(5, 0, [2,4], 3) == [0,-1,-1,-1,-1]", "assert minReverseOperations(4, 2, [0,1,3], 1) == [-1,-1,0,-1]"], "solution": "def minReverseOperations(n: int, p: int, banned: List[int], k: int) -> List[int]:\n    \"\"\"\n    You are given an integer n and an integer p in the range [0, n - 1]. Representing a 0-indexed array arr of length n where all positions are set to 0's, except position p which is set to 1.\n    You are also given an integer array banned containing some positions from the array. For the ith position in banned, arr[banned[i]] = 0, and banned[i] != p.\n    You can perform multiple operations on arr. In an operation, you can choose a subarray with size k and reverse the subarray. However, the 1 in arr should never go to any of the positions in banned. In other words, after each operation arr[banned[i]] remains 0.\n    Return an array ans where for each i from [0, n - 1], ans[i] is the minimum number of reverse operations needed to bring the 1 to position i in arr, or -1 if it is impossible.\n    A subarray is a contiguous non-empty sequence of elements within an array.\n    The values of ans[i] are independent for all i's.\n    The reverse of an array is an array containing the values in reverse order.\n    \"\"\"\n    from typing import List\n\n    banned_set = set(banned)\n    ans = [-1] * n\n\n    for i in range(n):\n        if i in banned_set:\n            continue\n\n        distance = abs(i - p)\n        if distance % k == 0:\n            ans[i] = distance // k\n\n    return ans", "is_solved": false}
{"task_id": "collect-coins-in-a-tree", "prompt": "def collectTheCoins(coins: List[int], edges: List[List[int]]) -> int:\n    \"\"\"\n    There exists an undirected and unrooted tree with n nodes indexed from 0 to n - 1. You are given an integer n and a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. You are also given an array coins of size n where coins[i] can be either 0 or 1, where 1 indicates the presence of a coin in the vertex i.\n    Initially, you choose to start at any vertex in the tree. Then, you can perform the following operations any number of times:\n    Collect all the coins that are at a distance of at most 2 from the current vertex, or\n    Move to any adjacent vertex in the tree.\n    Find the minimum number of edges you need to go through to collect all the coins and go back to the initial vertex.\n    Note that if you pass an edge several times, you need to count it into the answer several times.\n    \"\"\"\n", "entry_point": "collect-coins-in-a-tree", "cannonical_solution": "", "test": "", "visible_tests": ["assert collectTheCoins([1,0,0,0,0,1], [[0,1],[1,2],[2,3],[3,4],[4,5]]) == 2", "assert collectTheCoins([0,0,0,1,1,0,0,1], [[0,1],[0,2],[1,3],[1,4],[2,5],[5,6],[5,7]]) == 2"], "solution": "def collectTheCoins(coins: List[int], edges: List[List[int]]) -> int:\n    \"\"\"\n    There exists an undirected and unrooted tree with n nodes indexed from 0 to n - 1. You are given an integer n and a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. You are also given an array coins of size n where coins[i] can be either 0 or 1, where 1 indicates the presence of a coin in the vertex i.\n    Initially, you choose to start at any vertex in the tree. Then, you can perform the following operations any number of times:\n    Collect all the coins that are at a distance of at most 2 from the current vertex, or\n    Move to any adjacent vertex in the tree.\n    Find the minimum number of edges you need to go through to collect all the coins and go back to the initial vertex.\n    Note that if you pass an edge several times, you need to count it into the answer several times.\n    \"\"\"\n    from collections import defaultdict\n    from typing import List\n\n    def dfs(node: int, parent: int) -> int:\n        total = coins[node]\n        for neighbor in graph[node]:\n            if neighbor != parent:\n                total += dfs(neighbor, node)\n        if total == 0:\n            return 0\n        else:\n            return total - 1 + 2\n\n    graph = defaultdict(list)\n    for edge in edges:\n        graph[edge[0]].append(edge[1])\n        graph[edge[1]].append(edge[0])\n\n    return dfs(0, -1)", "is_solved": false}
{"task_id": "minimum-time-to-visit-a-cell-in-a-grid", "prompt": "def minimumTime(grid: List[List[int]]) -> int:\n    \"\"\"\n    You are given a m x n matrix grid consisting of non-negative integers where grid[row][col] represents the minimum time required to be able to visit the cell (row, col), which means you can visit the cell (row, col) only when the time you visit it is greater than or equal to grid[row][col].\n    You are standing in the top-left cell of the matrix in the 0th second, and you must move to any adjacent cell in the four directions: up, down, left, and right. Each move you make takes 1 second.\n    Return the minimum time required in which you can visit the bottom-right cell of the matrix. If you cannot visit the bottom-right cell, then return -1.\n    \"\"\"\n", "entry_point": "minimum-time-to-visit-a-cell-in-a-grid", "cannonical_solution": "", "test": "", "visible_tests": ["assert minimumTime([[0,1,3,2],[5,1,2,5],[4,3,8,6]]) == 7", "assert minimumTime([[0,2,4],[3,2,1],[1,0,4]]) == -1"], "solution": "def minimumTime(grid: List[List[int]]) -> int:\n    \"\"\"\n    You are given a m x n matrix grid consisting of non-negative integers where grid[row][col] represents the minimum time required to be able to visit the cell (row, col), which means you can visit the cell (row, col) only when the time you visit it is greater than or equal to grid[row][col].\n    You are standing in the top-left cell of the matrix in the 0th second, and you must move to any adjacent cell in the four directions: up, down, left, and right. Each move you make takes 1 second.\n    Return the minimum time required in which you can visit the bottom-right cell of the matrix. If you cannot visit the bottom-right cell, then return -1.\n    \"\"\"\n    from heapq import heappush, heappop\n    from typing import List\n\n    m, n = len(grid), len(grid[0])\n    visited = [[False] * n for _ in range(m)]\n    min_heap = [(grid[0][0], 0, 0)]\n\n    while min_heap:\n        time, row, col = heappop(min_heap)\n\n        if row == m - 1 and col == n - 1:\n            return time\n\n        for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            new_row, new_col = row + dr, col + dc\n\n            if 0 <= new_row < m and 0 <= new_col < n and not visited[new_row][new_col]:\n                visited[new_row][new_col] = True\n                max_time = max(time, grid[new_row][new_col])\n                heappush(min_heap, (max_time, new_row, new_col))\n\n    return -1", "is_solved": false}
{"task_id": "find-the-string-with-lcp", "prompt": "def findTheString(lcp: List[List[int]]) -> str:\n    \"\"\"\n    We define the lcp matrix of any 0-indexed string word of n lowercase English letters as an n x n grid such that:\n    lcp[i][j] is equal to the length of the longest common prefix between the substrings word[i,n-1] and word[j,n-1].\n    Given an n x n matrix lcp, return the alphabetically smallest string word that corresponds to lcp. If there is no such string, return an empty string.\n    A string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. For example, \"aabd\" is lexicographically smaller than \"aaca\" because the first position they differ is at the third letter, and 'b' comes before 'c'.\n    \"\"\"\n", "entry_point": "find-the-string-with-lcp", "cannonical_solution": "", "test": "", "visible_tests": ["assert findTheString([[4,0,2,0],[0,3,0,1],[2,0,2,0],[0,1,0,1]]) == \"abab\"", "assert findTheString([[4,3,2,1],[3,3,2,1],[2,2,2,1],[1,1,1,1]]) == \"aaaa\"", "assert findTheString([[4,3,2,1],[3,3,2,1],[2,2,2,1],[1,1,1,3]]) == \"\""], "solution": "def findTheString(lcp: List[List[int]]) -> str:\n    \"\"\"\n    We define the lcp matrix of any 0-indexed string word of n lowercase English letters as an n x n grid such that:\n    lcp[i][j] is equal to the length of the longest common prefix between the substrings word[i,n-1] and word[j,n-1].\n    Given an n x n matrix lcp, return the alphabetically smallest string word that corresponds to lcp. If there is no such string, return an empty string.\n    A string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. For example, \"aabd\" is lexicographically smaller than \"aaca\" because the first position they differ is at the third letter, and 'b' comes before 'c'.\n    \"\"\"\n    from typing import List\n\n    n = len(lcp)\n    word = ['a'] * n\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            if lcp[i - 1][j] == lcp[i][j - 1]:\n                word[j] = chr(ord(word[j]) + lcp[i][j] - lcp[i - 1][j] + 1)\n            elif lcp[i - 1][j] > lcp[i][j - 1]:\n                return \"\"\n    return \"\".join(word)", "is_solved": false}
{"task_id": "handling-sum-queries-after-update", "prompt": "def handleQuery(nums1: List[int], nums2: List[int], queries: List[List[int]]) -> List[int]:\n    \"\"\"\n    You are given two 0-indexed arrays nums1 and nums2 and a 2D array queries of queries. There are three types of queries:\n    For a query of type 1, queries[i] = [1, l, r]. Flip the values from 0 to 1 and from 1 to 0 in nums1 from index l to index r. Both l and r are 0-indexed.\n    For a query of type 2, queries[i] = [2, p, 0]. For every index 0 <= i < n, set nums2[i] = nums2[i] + nums1[i] * p.\n    For a query of type 3, queries[i] = [3, 0, 0]. Find the sum of the elements in nums2.\n    Return an array containing all the answers to the third type queries.\n    \"\"\"\n", "entry_point": "handling-sum-queries-after-update", "cannonical_solution": "", "test": "", "visible_tests": ["assert handleQuery([1,0,1], [0,0,0], [[1,1,1],[2,1,0],[3,0,0]]) == [3]", "assert handleQuery([1], [5], [[2,0,0],[3,0,0]]) == [5]"], "solution": "def handleQuery(nums1: List[int], nums2: List[int], queries: List[List[int]]) -> List[int]:\n    \"\"\"\n    You are given two 0-indexed arrays nums1 and nums2 and a 2D array queries of queries. There are three types of queries:\n    For a query of type 1, queries[i] = [1, l, r]. Flip the values from 0 to 1 and from 1 to 0 in nums1 from index l to index r. Both l and r are 0-indexed.\n    For a query of type 2, queries[i] = [2, p, 0]. For every index 0 <= i < n, set nums2[i] = nums2[i] + nums1[i] * p.\n    For a query of type 3, queries[i] = [3, 0, 0]. Find the sum of the elements in nums2.\n    Return an array containing all the answers to the third type queries.\n    \"\"\"\n    result = []\n    \n    for query in queries:\n        if query[0] == 1:\n            l, r = query[1], query[2]\n            for i in range(l, r + 1):\n                nums1[i] = 1 - nums1[i]\n        elif query[0] == 2:\n            p = query[1]\n            for i in range(len(nums1)):\n                nums2[i] += nums1[i] * p\n        elif query[0] == 3:\n            result.append(sum(nums2))\n    \n    return result", "is_solved": false}
{"task_id": "subsequence-with-the-minimum-score", "prompt": "def minimumScore(s: str, t: str) -> int:\n    \"\"\"\n    You are given two strings s and t.\n    You are allowed to remove any number of characters from the string t.\n    The score of the string is 0 if no characters are removed from the string t, otherwise:\n    Let left be the minimum index among all removed characters.\n    Let right be the maximum index among all removed characters.\n    Then the score of the string is right - left + 1.\n    Return the minimum possible score to make t a subsequence of s.\n    A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \"ace\" is a subsequence of \"abcde\" while \"aec\" is not).\n    \"\"\"\n", "entry_point": "subsequence-with-the-minimum-score", "cannonical_solution": "", "test": "", "visible_tests": ["assert minimumScore() == 1", "assert minimumScore() == 3"], "solution": "def minimumScore(s: str, t: str) -> int:\n    \"\"\"\n    You are given two strings s and t.\n    You are allowed to remove any number of characters from the string t.\n    The score of the string is 0 if no characters are removed from the string t, otherwise:\n    Let left be the minimum index among all removed characters.\n    Let right be the maximum index among all removed characters.\n    Then the score of the string is right - left + 1.\n    Return the minimum possible score to make t a subsequence of s.\n    A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \"ace\" is a subsequence of \"abcde\" while \"aec\" is not).\n    \"\"\"\n    n, m = len(s), len(t)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = i\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = dp[i - 1][j] + 1\n\n    min_score = float('inf')\n    for i in range(m, n + 1):\n        min_score = min(min_score, dp[i][m])\n\n    return min_score", "is_solved": false}
{"task_id": "minimum-number-of-visited-cells-in-a-grid", "prompt": "def minimumVisitedCells(grid: List[List[int]]) -> int:\n    \"\"\"\n    You are given a 0-indexed m x n integer matrix grid. Your initial position is at the top-left cell (0, 0).\n    Starting from the cell (i, j), you can move to one of the following cells:\n    Cells (i, k) with j < k <= grid[i][j] + j (rightward movement), or\n    Cells (k, j) with i < k <= grid[i][j] + i (downward movement).\n    Return the minimum number of cells you need to visit to reach the bottom-right cell (m - 1, n - 1). If there is no valid path, return -1.\n    \"\"\"\n", "entry_point": "minimum-number-of-visited-cells-in-a-grid", "cannonical_solution": "", "test": "", "visible_tests": ["assert minimumVisitedCells([[3,4,2,1],[4,2,3,1],[2,1,0,0],[2,4,0,0]]) == 4", "assert minimumVisitedCells([[3,4,2,1],[4,2,1,1],[2,1,1,0],[3,4,1,0]]) == 3", "assert minimumVisitedCells([[2,1,0],[1,0,0]]) == -1"], "solution": "def minimumVisitedCells(grid: List[List[int]]) -> int:\n    \"\"\"\n    You are given a 0-indexed m x n integer matrix grid. Your initial position is at the top-left cell (0, 0).\n    Starting from the cell (i, j), you can move to one of the following cells:\n    Cells (i, k) with j < k <= grid[i][j] + j (rightward movement), or\n    Cells (k, j) with i < k <= grid[i][j] + i (downward movement).\n    Return the minimum number of cells you need to visit to reach the bottom-right cell (m - 1, n - 1). If there is no valid path, return -1.\n    \"\"\"\n    from typing import List\n    from collections import deque\n\n    m, n = len(grid), len(grid[0])\n    visited = [[False for _ in range(n)] for _ in range(m)]\n    queue = deque([(0, 0, 1)])\n    visited[0][0] = True\n\n    while queue:\n        i, j, steps = queue.popleft()\n        if i == m - 1 and j == n - 1:\n            return steps\n\n        for k in range(j + 1, min(j + grid[i][j] + 1, n)):\n            if not visited[i][k]:\n                visited[i][k] = True\n                queue.append((i, k, steps + 1))\n\n        for k in range(i + 1, min(i + grid[i][j] + 1, m)):\n            if not visited[k][j]:\n                visited[k][j] = True\n                queue.append((k, j, steps + 1))\n\n    return -1", "is_solved": false}
{"task_id": "rearranging-fruits", "prompt": "def minCost(basket1: List[int], basket2: List[int]) -> int:\n    \"\"\"\n    You have two fruit baskets containing n fruits each. You are given two 0-indexed integer arrays basket1 and basket2 representing the cost of fruit in each basket. You want to make both baskets equal. To do so, you can use the following operation as many times as you want:\n    Chose two indices i and j, and swap the ith fruit of basket1 with the jth fruit of basket2.\n    The cost of the swap is min(basket1[i],basket2[j]).\n    Two baskets are considered equal if sorting them according to the fruit cost makes them exactly the same baskets.\n    Return the minimum cost to make both the baskets equal or -1 if impossible.\n    \"\"\"\n", "entry_point": "rearranging-fruits", "cannonical_solution": "", "test": "", "visible_tests": ["assert minCost([4,2,2,2], [1,4,1,2]) == 1", "assert minCost([2,3,4,1], [3,2,5,1]) == -1"], "solution": "def minCost(basket1: List[int], basket2: List[int]) -> int:\n    \"\"\"\n    You have two fruit baskets containing n fruits each. You are given two 0-indexed integer arrays basket1 and basket2 representing the cost of fruit in each basket. You want to make both baskets equal. To do so, you can use the following operation as many times as you want:\n    Chose two indices i and j, and swap the ith fruit of basket1 with the jth fruit of basket2.\n    The cost of the swap is min(basket1[i],basket2[j]).\n    Two baskets are considered equal if sorting them according to the fruit cost makes them exactly the same baskets.\n    Return the minimum cost to make both the baskets equal or -1 if impossible.\n    \"\"\"\n    from typing import List\n\n    basket1.sort()\n    basket2.sort()\n    \n    if len(basket1) != len(basket2):\n        return -1\n    \n    cost = 0\n    i, j = 0, 0\n    \n    while i < len(basket1) and j < len(basket2):\n        if basket1[i] == basket2[j]:\n            i += 1\n            j += 1\n        elif basket1[i] < basket2[j]:\n            cost += basket1[i]\n            i += 1\n        else:\n            cost += basket2[j]\n            j += 1\n            \n    if i < len(basket1) or j < len(basket2):\n        return -1\n    \n    return cost", "is_solved": false}
{"task_id": "count-increasing-quadruplets", "prompt": "def countQuadruplets(nums: List[int]) -> int:\n    \"\"\"\n    Given a 0-indexed integer array nums of size n containing all numbers from 1 to n, return the number of increasing quadruplets.\n    A quadruplet (i, j, k, l) is increasing if:\n    0 <= i < j < k < l < n, and\n    nums[i] < nums[k] < nums[j] < nums[l].\n    \"\"\"\n", "entry_point": "count-increasing-quadruplets", "cannonical_solution": "", "test": "", "visible_tests": ["assert countQuadruplets([1,3,2,4,5]) == 2", "assert countQuadruplets([1,2,3,4]) == 0"], "solution": "def countQuadruplets(nums: List[int]) -> int:\n    \"\"\"\n    Given a 0-indexed integer array nums of size n containing all numbers from 1 to n, return the number of increasing quadruplets.\n    A quadruplet (i, j, k, l) is increasing if:\n    0 <= i < j < k < l < n, and\n    nums[i] < nums[k] < nums[j] < nums[l].\n    \"\"\"\n    from typing import List\n\n    n = len(nums)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                for l in range(k + 1, n):\n                    if nums[i] < nums[k] < nums[j] < nums[l]:\n                        count += 1\n    return count", "is_solved": false}
{"task_id": "put-marbles-in-bags", "prompt": "def putMarbles(weights: List[int], k: int) -> int:\n    \"\"\"\n    You have k bags. You are given a 0-indexed integer array weights where weights[i] is the weight of the ith marble. You are also given the integer k.\n    Divide the marbles into the k bags according to the following rules:\n    No bag is empty.\n    If the ith marble and jth marble are in a bag, then all marbles with an index between the ith and jth indices should also be in that same bag.\n    If a bag consists of all the marbles with an index from i to j inclusively, then the cost of the bag is weights[i] + weights[j].\n    The score after distributing the marbles is the sum of the costs of all the k bags.\n    Return the difference between the maximum and minimum scores among marble distributions.\n    \"\"\"\n", "entry_point": "put-marbles-in-bags", "cannonical_solution": "", "test": "", "visible_tests": ["assert putMarbles([1,3,5,1], 2) == 4", "assert putMarbles([1,3], 2) == 0"], "solution": "def putMarbles(weights: List[int], k: int) -> int:\n    \"\"\"\n    You have k bags. You are given a 0-indexed integer array weights where weights[i] is the weight of the ith marble. You are also given the integer k.\n    Divide the marbles into the k bags according to the following rules:\n    No bag is empty.\n    If the ith marble and jth marble are in a bag, then all marbles with an index between the ith and jth indices should also be in that same bag.\n    If a bag consists of all the marbles with an index from i to j inclusively, then the cost of the bag is weights[i] + weights[j].\n    The score after distributing the marbles is the sum of the costs of all the k bags.\n    Return the difference between the maximum and minimum scores among marble distributions.\n    \"\"\"\n    from typing import List\n\n    n = len(weights)\n    if k == 1:\n        return weights[0] + weights[-1]\n\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    prefix_sum = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + weights[i - 1]\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if j == 1:\n                dp[i][j] = weights[0] + weights[i - 1]\n            else:\n                dp[i][j] = float('inf')\n                for x in range(i - 1, 0, -1):\n                    dp[i][j] = min(dp[i][j], dp[x][j - 1] + weights[x - 1] + weights[i - 1])\n\n    return dp[n][k] - dp[n][1]", "is_solved": false}
{"task_id": "shortest-cycle-in-a-graph", "prompt": "def findShortestCycle(n: int, edges: List[List[int]]) -> int:\n    \"\"\"\n    There is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1. The edges in the graph are represented by a given 2D integer array edges, where edges[i] = [ui, vi] denotes an edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself.\n    Return the length of the shortest cycle in the graph. If no cycle exists, return -1.\n    A cycle is a path that starts and ends at the same node, and each edge in the path is used only once.\n    \"\"\"\n", "entry_point": "shortest-cycle-in-a-graph", "cannonical_solution": "", "test": "", "visible_tests": ["assert findShortestCycle(7, [[0,1],[1,2],[2,0],[3,4],[4,5],[5,6],[6,3]]) == 3", "assert findShortestCycle(4, [[0,1],[0,2]]) == -1"], "solution": "def findShortestCycle(n: int, edges: List[List[int]]) -> int:\n    \"\"\"\n    There is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1. The edges in the graph are represented by a given 2D integer array edges, where edges[i] = [ui, vi] denotes an edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself.\n    Return the length of the shortest cycle in the graph. If no cycle exists, return -1.\n    A cycle is a path that starts and ends at the same node, and each edge in the path is used only once.\n    \"\"\"\n    from collections import defaultdict\n    from typing import List\n\n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n\n    min_cycle = float('inf')\n    for i in range(n):\n        visited = [False] * n\n        level = [0] * n\n        queue = [i]\n        visited[i] = True\n        level[i] = 0\n\n        while queue:\n            node = queue.pop(0)\n            for neighbor in graph[node]:\n                if not visited[neighbor]:\n                    visited[neighbor] = True\n                    level[neighbor] = level[node] + 1\n                    queue.append(neighbor)\n                elif level[node] - level[neighbor] >= 2:\n                    min_cycle = min(min_cycle, level[node] - level[neighbor] + 1)\n\n    return min_cycle if min_cycle != float('inf') else -1", "is_solved": false}
{"task_id": "minimum-time-to-complete-all-tasks", "prompt": "def findMinimumTime(tasks: List[List[int]]) -> int:\n    \"\"\"\n    There is a computer that can run an unlimited number of tasks at the same time. You are given a 2D integer array tasks where tasks[i] = [starti, endi, durationi] indicates that the ith task should run for a total of durationi seconds (not necessarily continuous) within the inclusive time range [starti, endi].\n    You may turn on the computer only when it needs to run a task. You can also turn it off if it is idle.\n    Return the minimum time during which the computer should be turned on to complete all tasks.\n    \"\"\"\n", "entry_point": "minimum-time-to-complete-all-tasks", "cannonical_solution": "", "test": "", "visible_tests": ["assert findMinimumTime([[2,3,1],[4,5,1],[1,5,2]]) == 2", "assert findMinimumTime([[1,3,2],[2,5,3],[5,6,2]]) == 4"], "solution": "def findMinimumTime(tasks: List[List[int]]) -> int:\n    \"\"\"\n    There is a computer that can run an unlimited number of tasks at the same time. You are given a 2D integer array tasks where tasks[i] = [starti, endi, durationi] indicates that the ith task should run for a total of durationi seconds (not necessarily continuous) within the inclusive time range [starti, endi].\n    You may turn on the computer only when it needs to run a task. You can also turn it off if it is idle.\n    Return the minimum time during which the computer should be turned on to complete all tasks.\n    \"\"\"\n    from typing import List\n\n    tasks.sort(key=lambda x: x[1])\n    end_times = [0] * len(tasks)\n    end_times[0] = tasks[0][0] + tasks[0][2]\n\n    for i in range(1, len(tasks)):\n        min_time = float('inf')\n        for j in range(i):\n            if tasks[j][1] < tasks[i][0]:\n                min_time = min(min_time, end_times[j])\n        end_times[i] = min_time + tasks[i][2]\n\n    return min(end_times)", "is_solved": false}
{"task_id": "count-number-of-possible-root-nodes", "prompt": "def rootCount(edges: List[List[int]], guesses: List[List[int]], k: int) -> int:\n    \"\"\"\n    Alice has an undirected tree with n nodes labeled from 0 to n - 1. The tree is represented as a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\n    Alice wants Bob to find the root of the tree. She allows Bob to make several guesses about her tree. In one guess, he does the following:\n    Chooses two distinct integers u and v such that there exists an edge [u, v] in the tree.\n    He tells Alice that u is the parent of v in the tree.\n    Bob's guesses are represented by a 2D integer array guesses where guesses[j] = [uj, vj] indicates Bob guessed uj to be the parent of vj.\n    Alice being lazy, does not reply to each of Bob's guesses, but just says that at least k of his guesses are true.\n    Given the 2D integer arrays edges, guesses and the integer k, return the number of possible nodes that can be the root of Alice's tree. If there is no such tree, return 0.\n    \"\"\"\n", "entry_point": "count-number-of-possible-root-nodes", "cannonical_solution": "", "test": "", "visible_tests": ["assert rootCount([[0,1],[1,2],[1,3],[4,2]], [[1,3],[0,1],[1,0],[2,4]], 3) == 3", "assert rootCount([[0,1],[1,2],[2,3],[3,4]], [[1,0],[3,4],[2,1],[3,2]], 1) == 5"], "solution": "def rootCount(edges: List[List[int]], guesses: List[List[int]], k: int) -> int:\n    \"\"\"\n    Alice has an undirected tree with n nodes labeled from 0 to n - 1. The tree is represented as a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\n    Alice wants Bob to find the root of the tree. She allows Bob to make several guesses about her tree. In one guess, he does the following:\n    Chooses two distinct integers u and v such that there exists an edge [u, v] in the tree.\n    He tells Alice that u is the parent of v in the tree.\n    Bob's guesses are represented by a 2D integer array guesses where guesses[j] = [uj, vj] indicates Bob guessed uj to be the parent of vj.\n    Alice being lazy, does not reply to each of Bob's guesses, but just says that at least k of his guesses are true.\n    Given the 2D integer arrays edges, guesses and the integer k, return the number of possible nodes that can be the root of Alice's tree. If there is no such tree, return 0.\n    \"\"\"\n    from collections import defaultdict\n    from typing import List\n\n    n = len(edges) + 1\n    tree = defaultdict(set)\n    for u, v in edges:\n        tree[u].add(v)\n        tree[v].add(u)\n\n    def dfs(node, parent, depth):\n        if depth == k:\n            return 1 if node in possible_roots else 0\n        count = 0\n        for child in tree[node]:\n            if child != parent:\n                count += dfs(child, node, depth + 1)\n        return count\n\n    possible_roots = set(range(n))\n    for u, v in guesses:\n        if v in tree[u]:\n            possible_roots.discard(v)\n\n    return sum(dfs(root, -1, 0) for root in possible_roots)", "is_solved": false}
{"task_id": "number-of-ways-to-earn-points", "prompt": "def waysToReachTarget(target: int, types: List[List[int]]) -> int:\n    \"\"\"\n    There is a test that has n types of questions. You are given an integer target and a 0-indexed 2D integer array types where types[i] = [counti, marksi] indicates that there are counti questions of the ith type, and each one of them is worth marksi points.\n    Return the number of ways you can earn exactly target points in the exam. Since the answer may be too large, return it modulo 109 + 7.\n    Note that questions of the same type are indistinguishable.\n    For example, if there are 3 questions of the same type, then solving the 1st and 2nd questions is the same as solving the 1st and 3rd questions, or the 2nd and 3rd questions.\n    \"\"\"\n", "entry_point": "number-of-ways-to-earn-points", "cannonical_solution": "", "test": "", "visible_tests": ["assert waysToReachTarget(6, [[6,1],[3,2],[2,3]]) == 7", "assert waysToReachTarget(5, [[50,1],[50,2],[50,5]]) == 4", "assert waysToReachTarget(18, [[6,1],[3,2],[2,3]]) == 1"], "solution": "def waysToReachTarget(target: int, types: List[List[int]]) -> int:\n    \"\"\"\n    There is a test that has n types of questions. You are given an integer target and a 0-indexed 2D integer array types where types[i] = [counti, marksi] indicates that there are counti questions of the ith type, and each one of them is worth marksi points.\n    Return the number of ways you can earn exactly target points in the exam. Since the answer may be too large, return it modulo 109 + 7.\n    Note that questions of the same type are indistinguishable.\n    For example, if there are 3 questions of the same type, then solving the 1st and 2nd questions is the same as solving the 1st and 3rd questions, or the 2nd and 3rd questions.\n    \"\"\"\n    from typing import List\n\n    MOD = 10**9 + 7\n    n = len(types)\n    dp = [0] * (target + 1)\n    dp[0] = 1\n\n    for count, marks in types:\n        for i in range(target, marks - 1, -1):\n            for j in range(1, count + 1):\n                if i - j * marks >= 0:\n                    dp[i] = (dp[i] + dp[i - j * marks]) % MOD\n                else:\n                    break\n\n    return dp[target]", "is_solved": true}
{"task_id": "split-the-array-to-make-coprime-products", "prompt": "def findValidSplit(nums: List[int]) -> int:\n    \"\"\"\n    You are given a 0-indexed integer array nums of length n.\n    A split at an index i where 0 <= i <= n - 2 is called valid if the product of the first i + 1 elements and the product of the remaining elements are coprime.\n    For example, if nums = [2, 3, 3], then a split at the index i = 0 is valid because 2 and 9 are coprime, while a split at the index i = 1 is not valid because 6 and 3 are not coprime. A split at the index i = 2 is not valid because i == n - 1.\n    Return the smallest index i at which the array can be split validly or -1 if there is no such split.\n    Two values val1 and val2 are coprime if gcd(val1, val2) == 1 where gcd(val1, val2) is the greatest common divisor of val1 and val2.\n    \"\"\"\n", "entry_point": "split-the-array-to-make-coprime-products", "cannonical_solution": "", "test": "", "visible_tests": ["assert findValidSplit([4,7,8,15,3,5]) == 2", "assert findValidSplit([4,7,15,8,3,5]) == -1"], "solution": "def findValidSplit(nums: List[int]) -> int:\n    \"\"\"\n    You are given a 0-indexed integer array nums of length n.\n    A split at an index i where 0 <= i <= n - 2 is called valid if the product of the first i + 1 elements and the product of the remaining elements are coprime.\n    For example, if nums = [2, 3, 3], then a split at the index i = 0 is valid because 2 and 9 are coprime, while a split at the index i = 1 is not valid because 6 and 3 are not coprime. A split at the index i = 2 is not valid because i == n - 1.\n    Return the smallest index i at which the array can be split validly or -1 if there is no such split.\n    Two values val1 and val2 are coprime if gcd(val1, val2) == 1 where gcd(val1, val2) is the greatest common divisor of val1 and val2.\n    \"\"\"\n    from typing import List\n    from math import gcd\n\n    def product(arr: List[int]) -> int:\n        result = 1\n        for num in arr:\n            result *= num\n        return result\n\n    for i in range(len(nums) - 1):\n        left_product = product(nums[:i + 1])\n        right_product = product(nums[i + 1:])\n        if gcd(left_product, right_product) == 1:\n            return i\n    return -1", "is_solved": false}
{"task_id": "time-to-cross-a-bridge", "prompt": "def findCrossingTime(n: int, k: int, time: List[List[int]]) -> int:\n    \"\"\"\n    There are k workers who want to move n boxes from an old warehouse to a new one. You are given the two integers n and k, and a 2D integer array time of size k x 4 where time[i] = [leftToRighti, pickOldi, rightToLefti, putNewi].\n    The warehouses are separated by a river and connected by a bridge. The old warehouse is on the right bank of the river, and the new warehouse is on the left bank of the river. Initially, all k workers are waiting on the left side of the bridge. To move the boxes, the ith worker (0-indexed) can :\n    Cross the bridge from the left bank (new warehouse) to the right bank (old warehouse) in leftToRighti minutes.\n    Pick a box from the old warehouse and return to the bridge in pickOldi minutes. Different workers can pick up their boxes simultaneously.\n    Cross the bridge from the right bank (old warehouse) to the left bank (new warehouse) in rightToLefti minutes.\n    Put the box in the new warehouse and return to the bridge in putNewi minutes. Different workers can put their boxes simultaneously.\n    A worker i is less efficient than a worker j if either condition is met:\n    leftToRighti + rightToLefti > leftToRightj + rightToLeftj\n    leftToRighti + rightToLefti == leftToRightj + rightToLeftj and i > j\n    The following rules regulate the movement of the workers through the bridge :\n    If a worker x reaches the bridge while another worker y is crossing the bridge, x waits at their side of the bridge.\n    If the bridge is free, the worker waiting on the right side of the bridge gets to cross the bridge. If more than one worker is waiting on the right side, the one with the lowest efficiency crosses first.\n    If the bridge is free and no worker is waiting on the right side, and at least one box remains at the old warehouse, the worker on the left side of the river gets to cross the bridge. If more than one worker is waiting on the left side, the one with the lowest efficiency crosses first.\n    Return the instance of time at which the last worker reaches the left bank of the river after all n boxes have been put in the new warehouse.\n    \"\"\"\n", "entry_point": "time-to-cross-a-bridge", "cannonical_solution": "", "test": "", "visible_tests": ["assert findCrossingTime(1, 3, [[1,1,2,1],[1,1,3,1],[1,1,4,1]]) == 6", "assert findCrossingTime(3, 2, [[1,9,1,8],[10,10,10,10]]) == 50"], "solution": "def findCrossingTime(n: int, k: int, time: List[List[int]]) -> int:\n    \"\"\"\n    There are k workers who want to move n boxes from an old warehouse to a new one. You are given the two integers n and k, and a 2D integer array time of size k x 4 where time[i] = [leftToRighti, pickOldi, rightToLefti, putNewi].\n    The warehouses are separated by a river and connected by a bridge. The old warehouse is on the right bank of the river, and the new warehouse is on the left bank of the river. Initially, all k workers are waiting on the left side of the bridge. To move the boxes, the ith worker (0-indexed) can :\n    Cross the bridge from the left bank (new warehouse) to the right bank (old warehouse) in leftToRighti minutes.\n    Pick a box from the old warehouse and return to the bridge in pickOldi minutes. Different workers can pick up their boxes simultaneously.\n    Cross the bridge from the right bank (old warehouse) to the left bank (new warehouse) in rightToLefti minutes.\n    Put the box in the new warehouse and return to the bridge in putNewi minutes. Different workers can put their boxes simultaneously.\n    A worker i is less efficient than a worker j if either condition is met:\n    leftToRighti + rightToLefti > leftToRightj + rightToLeftj\n    leftToRighti + rightToLefti == leftToRightj + rightToLeftj and i > j\n    The following rules regulate the movement of the workers through the bridge :\n    If a worker x reaches the bridge while another worker y is crossing the bridge, x waits at their side of the bridge.\n    If the bridge is free, the worker waiting on the right side of the bridge gets to cross the bridge. If more than one worker is waiting on the right side, the one with the lowest efficiency crosses first.\n    If the bridge is free and no worker is waiting on the right side, and at least one box remains at the old warehouse, the worker on the left side of the river gets to cross the bridge. If more than one worker is waiting on the left side, the one with the lowest efficiency crosses first.\n    Return the instance of time at which the last worker reaches the left bank of the river after all n boxes have been put in the new warehouse.\n    \"\"\"\n    from typing import List\n    import heapq\n\n    workers = [[leftToRight + rightToLeft, i, leftToRight, rightToLeft, pickOld, putNew] for i, (leftToRight, pickOld, rightToLeft, putNew) in enumerate(time)]\n    heapq.heapify(workers)\n    \n    left_bank, right_bank, moved_boxes = [], [], 0\n    \n    while moved_boxes < n:\n        while workers and workers[0][2] <= min(left_bank or [float('inf')]):\n            _, i, leftToRight, rightToLeft, pickOld, putNew = heapq.heappop(workers)\n            heapq.heappush(right_bank, [leftToRight + pickOld, i, leftToRight, rightToLeft, pickOld, putNew])\n        \n        if right_bank:\n            _, i, leftToRight, rightToLeft, pickOld, putNew = heapq.heappop(right_bank)\n            heapq.heappush(left_bank, [rightToLeft + putNew, i, leftToRight, rightToLeft, pickOld, putNew])\n            moved_boxes += 1\n        else:\n            left_bank = [float('inf')]\n    \n    return max(left_bank)", "is_solved": false}
{"task_id": "check-if-point-is-reachable", "prompt": "def isReachable(targetX: int, targetY: int) -> bool:\n    \"\"\"\n    There exists an infinitely large grid. You are currently at point (1, 1), and you need to reach the point (targetX, targetY) using a finite number of steps.\n    In one step, you can move from point (x, y) to any one of the following points:\n    (x, y - x)\n    (x - y, y)\n    (2 * x, y)\n    (x, 2 * y)\n    Given two integers targetX and targetY representing the X-coordinate and Y-coordinate of your final position, return true if you can reach the point from (1, 1) using some number of steps, and false otherwise.\n    \"\"\"\n", "entry_point": "check-if-point-is-reachable", "cannonical_solution": "", "test": "", "visible_tests": ["assert isReachable(6, 9) == false", "assert isReachable(4, 7) == rue"], "solution": "def isReachable(targetX: int, targetY: int) -> bool:\n    \"\"\"\n    There exists an infinitely large grid. You are currently at point (1, 1), and you need to reach the point (targetX, targetY) using a finite number of steps.\n    In one step, you can move from point (x, y) to any one of the following points:\n    (x, y - x)\n    (x - y, y)\n    (2 * x, y)\n    (x, 2 * y)\n    Given two integers targetX and targetY representing the X-coordinate and Y-coordinate of your final position, return true if you can reach the point from (1, 1) using some number of steps, and false otherwise.\n    \"\"\"\n    if targetX == 1 and targetY == 1:\n        return True\n    while targetX > 1 and targetY > 1:\n        if targetX > targetY:\n            targetX %= targetY\n        else:\n            targetY %= targetX\n    return targetX == 1 or targetY == 1", "is_solved": false}
{"task_id": "minimum-cost-to-split-an-array", "prompt": "def minCost(nums: List[int], k: int) -> int:\n    \"\"\"\n    You are given an integer array nums and an integer k.\n    Split the array into some number of non-empty subarrays. The cost of a split is the sum of the importance value of each subarray in the split.\n    Let trimmed(subarray) be the version of the subarray where all numbers which appear only once are removed.\n    For example, trimmed([3,1,2,4,3,4]) = [3,4,3,4].\n    The importance value of a subarray is k + trimmed(subarray).length.\n    For example, if a subarray is [1,2,3,3,3,4,4], then trimmed([1,2,3,3,3,4,4]) = [3,3,3,4,4].The importance value of this subarray will be k + 5.\n    Return the minimum possible cost of a split of nums.\n    A subarray is a contiguous non-empty sequence of elements within an array.\n    \"\"\"\n", "entry_point": "minimum-cost-to-split-an-array", "cannonical_solution": "", "test": "", "visible_tests": ["assert minCost([1,2,1,2,1,3,3], 2) == 8", "assert minCost([1,2,1,2,1], 2) == 6", "assert minCost([1,2,1,2,1], 5) == 10"], "solution": "def minCost(nums: List[int], k: int) -> int:\n    \"\"\"\n    You are given an integer array nums and an integer k.\n    Split the array into some number of non-empty subarrays. The cost of a split is the sum of the importance value of each subarray in the split.\n    Let trimmed(subarray) be the version of the subarray where all numbers which appear only once are removed.\n    For example, trimmed([3,1,2,4,3,4]) = [3,4,3,4].\n    The importance value of a subarray is k + trimmed(subarray).length.\n    For example, if a subarray is [1,2,3,3,3,4,4], then trimmed([1,2,3,3,3,4,4]) = [3,3,3,4,4].The importance value of this subarray will be k + 5.\n    Return the minimum possible cost of a split of nums.\n    A subarray is a contiguous non-empty sequence of elements within an array.\n    \"\"\"\n    from typing import List\n    from collections import Counter\n\n    def trimmed_cost(subarray: List[int]) -> int:\n        count = Counter(subarray)\n        trimmed = [num for num in subarray if count[num] > 1]\n        return k + len(trimmed)\n\n    def split_cost(start: int, end: int, memo: dict) -> int:\n        if (start, end) in memo:\n            return memo[(start, end)]\n\n        if start == end:\n            memo[(start, end)] = trimmed_cost(nums[start:end+1])\n            return memo[(start, end)]\n\n        min_cost = float('inf')\n        for i in range(start, end):\n            cost = split_cost(start, i, memo) + split_cost(i+1, end, memo)\n            min_cost = min(min_cost, cost)\n\n        memo[(start, end)] = min_cost\n        return min_cost\n\n    return split_cost(0, len(nums)-1, {})", "is_solved": false}
{"task_id": "difference-between-maximum-and-minimum-price-sum", "prompt": "def maxOutput(n: int, edges: List[List[int]], price: List[int]) -> int:\n    \"\"\"\n    There exists an undirected and initially unrooted tree with n nodes indexed from 0 to n - 1. You are given the integer n and a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\n    Each node has an associated price. You are given an integer array price, where price[i] is the price of the ith node.\n    The price sum of a given path is the sum of the prices of all nodes lying on that path.\n    The tree can be rooted at any node root of your choice. The incurred cost after choosing root is the difference between the maximum and minimum price sum amongst all paths starting at root.\n    Return the maximum possible cost amongst all possible root choices.\n    \"\"\"\n", "entry_point": "difference-between-maximum-and-minimum-price-sum", "cannonical_solution": "", "test": "", "visible_tests": ["assert maxOutput(6, [[0,1],[1,2],[1,3],[3,4],[3,5]], [9,8,7,6,10,5]) == 24", "assert maxOutput(3, [[0,1],[1,2]], [1,1,1]) == 2"], "solution": "def maxOutput(n: int, edges: List[List[int]], price: List[int]) -> int:\n    \"\"\"\n    There exists an undirected and initially unrooted tree with n nodes indexed from 0 to n - 1. You are given the integer n and a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\n    Each node has an associated price. You are given an integer array price, where price[i] is the price of the ith node.\n    The price sum of a given path is the sum of the prices of all nodes lying on that path.\n    The tree can be rooted at any node root of your choice. The incurred cost after choosing root is the difference between the maximum and minimum price sum amongst all paths starting at root.\n    Return the maximum possible cost amongst all possible root choices.\n    \"\"\"\n    from collections import defaultdict\n\n    graph = defaultdict(list)\n    for a, b in edges:\n        graph[a].append(b)\n        graph[b].append(a)\n\n    def dfs(node: int, parent: int) -> Tuple[int, int]:\n        min_sum, max_sum = price[node], price[node]\n        for neighbor in graph[node]:\n            if neighbor != parent:\n                min_child, max_child = dfs(neighbor, node)\n                min_sum += min_child\n                max_sum += max_child\n        return min_sum, max_sum\n\n    max_cost = 0\n    for i in range(n):\n        min_sum, max_sum = dfs(i, -1)\n        max_cost = max(max_cost, max_sum - min_sum)\n\n    return max_cost", "is_solved": false}
{"task_id": "maximize-the-minimum-powered-city", "prompt": "def maxPower(stations: List[int], r: int, k: int) -> int:\n    \"\"\"\n    You are given a 0-indexed integer array stations of length n, where stations[i] represents the number of power stations in the ith city.\n    Each power station can provide power to every city in a fixed range. In other words, if the range is denoted by r, then a power station at city i can provide power to all cities j such that |i - j| <= r and 0 <= i, j <= n - 1.\n    Note that |x| denotes absolute value. For example, |7 - 5| = 2 and |3 - 10| = 7.\n    The power of a city is the total number of power stations it is being provided power from.\n    The government has sanctioned building k more power stations, each of which can be built in any city, and have the same range as the pre-existing ones.\n    Given the two integers r and k, return the maximum possible minimum power of a city, if the additional power stations are built optimally.\n    Note that you can build the k power stations in multiple cities.\n    \"\"\"\n", "entry_point": "maximize-the-minimum-powered-city", "cannonical_solution": "", "test": "", "visible_tests": ["assert maxPower([1,2,4,5,0], 1, 2) == 5", "assert maxPower([4,4,4,4], 0, 3) == 4"], "solution": "def maxPower(stations: List[int], r: int, k: int) -> int:\n    \"\"\"\n    You are given a 0-indexed integer array stations of length n, where stations[i] represents the number of power stations in the ith city.\n    Each power station can provide power to every city in a fixed range. In other words, if the range is denoted by r, then a power station at city i can provide power to all cities j such that |i - j| <= r and 0 <= i, j <= n - 1.\n    Note that |x| denotes absolute value. For example, |7 - 5| = 2 and |3 - 10| = 7.\n    The power of a city is the total number of power stations it is being provided power from.\n    The government has sanctioned building k more power stations, each of which can be built in any city, and have the same range as the pre-existing ones.\n    Given the two integers r and k, return the maximum possible minimum power of a city, if the additional power stations are built optimally.\n    Note that you can build the k power stations in multiple cities.\n    \"\"\"\n    from typing import List\n\n    n = len(stations)\n    prefix_sum = [0] * (n + 1)\n    \n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + stations[i]\n    \n    def power(i: int, j: int) -> int:\n        return prefix_sum[min(j + r + 1, n)] - prefix_sum[max(0, i - r)]\n    \n    max_min_power = 0\n    for i in range(n):\n        left, right = 0, k\n        while left <= right:\n            mid = (left + right) // 2\n            min_power = float('inf')\n            for j in range(max(0, i - r), min(n, i + r + 1)):\n                min_power = min(min_power, power(j, j + mid - 1))\n            if min_power >= max_min_power:\n                max_min_power = min_power\n                left = mid + 1\n            else:\n                right = mid - 1\n                \n    return max_min_power", "is_solved": false}
{"task_id": "count-anagrams", "prompt": "def countAnagrams(s: str) -> int:\n    \"\"\"\n    You are given a string s containing one or more words. Every consecutive pair of words is separated by a single space ' '.\n    A string t is an anagram of string s if the ith word of t is a permutation of the ith word of s.\n    For example, \"acb dfe\" is an anagram of \"abc def\", but \"def cab\" and \"adc bef\" are not.\n    Return the number of distinct anagrams of s. Since the answer may be very large, return it modulo 109 + 7.\n    \"\"\"\n", "entry_point": "count-anagrams", "cannonical_solution": "", "test": "", "visible_tests": ["assert countAnagrams() == 18", "assert countAnagrams() == 1"], "solution": "def countAnagrams(s: str) -> int:\n    \"\"\"\n    You are given a string s containing one or more words. Every consecutive pair of words is separated by a single space ' '.\n    A string t is an anagram of string s if the ith word of t is a permutation of the ith word of s.\n    For example, \"acb dfe\" is an anagram of \"abc def\", but \"def cab\" and \"adc bef\" are not.\n    Return the number of distinct anagrams of s. Since the answer may be very large, return it modulo 109 + 7.\n    \"\"\"\n    from collections import Counter\n    from math import factorial\n    from functools import reduce\n    import operator\n\n    MOD = 10**9 + 7\n\n    def count_permutations(word):\n        counter = Counter(word)\n        return factorial(len(word)) // reduce(operator.mul, (factorial(v) for v in counter.values()), 1)\n\n    words = s.split()\n    return reduce(operator.mul, (count_permutations(word) for word in words), 1) % MOD", "is_solved": true}
{"task_id": "number-of-great-partitions", "prompt": "def countPartitions(nums: List[int], k: int) -> int:\n    \"\"\"\n    You are given an array nums consisting of positive integers and an integer k.\n    Partition the array into two ordered groups such that each element is in exactly one group. A partition is called great if the sum of elements of each group is greater than or equal to k.\n    Return the number of distinct great partitions. Since the answer may be too large, return it modulo 109 + 7.\n    Two partitions are considered distinct if some element nums[i] is in different groups in the two partitions.\n    \"\"\"\n", "entry_point": "number-of-great-partitions", "cannonical_solution": "", "test": "", "visible_tests": ["assert countPartitions([1,2,3,4], 4) == 6", "assert countPartitions([3,3,3], 4) == 0", "assert countPartitions([6,6], 2) == 2"], "solution": "def countPartitions(nums: List[int], k: int) -> int:\n    \"\"\"\n    You are given an array nums consisting of positive integers and an integer k.\n    Partition the array into two ordered groups such that each element is in exactly one group. A partition is called great if the sum of elements of each group is greater than or equal to k.\n    Return the number of distinct great partitions. Since the answer may be too large, return it modulo 109 + 7.\n    Two partitions are considered distinct if some element nums[i] is in different groups in the two partitions.\n    \"\"\"\n    from itertools import combinations\n\n    mod = 10**9 + 7\n    n = len(nums)\n    count = 0\n    \n    for i in range(1, n):\n        for comb in combinations(range(n), i):\n            group1 = [nums[j] for j in comb]\n            group2 = [nums[j] for j in range(n) if j not in comb]\n            if sum(group1) >= k and sum(group2) >= k:\n                count += 1\n                \n    return count % mod", "is_solved": false}
{"task_id": "cycle-length-queries-in-a-tree", "prompt": "def cycleLengthQueries(n: int, queries: List[List[int]]) -> List[int]:\n    \"\"\"\n    You are given an integer n. There is a complete binary tree with 2n - 1 nodes. The root of that tree is the node with the value 1, and every node with a value val in the range [1, 2n - 1 - 1] has two children where:\n    The left node has the value 2 * val, and\n    The right node has the value 2 * val + 1.\n    You are also given a 2D integer array queries of length m, where queries[i] = [ai, bi]. For each query, solve the following problem:\n    Add an edge between the nodes with values ai and bi.\n    Find the length of the cycle in the graph.\n    Remove the added edge between nodes with values ai and bi.\n    Note that:\n    A cycle is a path that starts and ends at the same node, and each edge in the path is visited only once.\n    The length of a cycle is the number of edges visited in the cycle.\n    There could be multiple edges between two nodes in the tree after adding the edge of the query.\n    Return an array answer of length m where answer[i] is the answer to the ith query.\n    \"\"\"\n", "entry_point": "cycle-length-queries-in-a-tree", "cannonical_solution": "", "test": "", "visible_tests": ["assert cycleLengthQueries(3, [[5,3],[4,7],[2,3]]) == [4,5,3]", "assert cycleLengthQueries(2, [[1,2]]) == [2]"], "solution": "def cycleLengthQueries(n: int, queries: List[List[int]]) -> List[int]:\n    \"\"\"\n    You are given an integer n. There is a complete binary tree with 2n - 1 nodes. The root of that tree is the node with the value 1, and every node with a value val in the range [1, 2n - 1 - 1] has two children where:\n    The left node has the value 2 * val, and\n    The right node has the value 2 * val + 1.\n    You are also given a 2D integer array queries of length m, where queries[i] = [ai, bi]. For each query, solve the following problem:\n    Add an edge between the nodes with values ai and bi.\n    Find the length of the cycle in the graph.\n    Remove the added edge between nodes with values ai and bi.\n    Note that:\n    A cycle is a path that starts and ends at the same node, and each edge in the path is visited only once.\n    The length of a cycle is the number of edges visited in the cycle.\n    There could be multiple edges between two nodes in the tree after adding the edge of the query.\n    Return an array answer of length m where answer[i] is the answer to the ith query.\n    \"\"\"\n    from typing import List\n\n    def find_depth(node: int) -> int:\n        depth = 0\n        while node > 1:\n            node //= 2\n            depth += 1\n        return depth\n\n    result = []\n    for query in queries:\n        a, b = query\n        depth_a = find_depth(a)\n        depth_b = find_depth(b)\n        cycle_length = depth_a + depth_b + 2\n        result.append(cycle_length)\n    return result", "is_solved": false}
{"task_id": "add-edges-to-make-degrees-of-all-nodes-even", "prompt": "def isPossible(n: int, edges: List[List[int]]) -> bool:\n    \"\"\"\n    There is an undirected graph consisting of n nodes numbered from 1 to n. You are given the integer n and a 2D array edges where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi. The graph can be disconnected.\n    You can add at most two additional edges (possibly none) to this graph so that there are no repeated edges and no self-loops.\n    Return true if it is possible to make the degree of each node in the graph even, otherwise return false.\n    The degree of a node is the number of edges connected to it.\n    \"\"\"\n", "entry_point": "add-edges-to-make-degrees-of-all-nodes-even", "cannonical_solution": "", "test": "", "visible_tests": ["assert isPossible(5, [[1,2],[2,3],[3,4],[4,2],[1,4],[2,5]]) == rue", "assert isPossible(4, [[1,2],[3,4]]) == rue", "assert isPossible(4, [[1,2],[1,3],[1,4]]) == false"], "solution": "def isPossible(n: int, edges: List[List[int]]) -> bool:\n    \"\"\"\n    There is an undirected graph consisting of n nodes numbered from 1 to n. You are given the integer n and a 2D array edges where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi. The graph can be disconnected.\n    You can add at most two additional edges (possibly none) to this graph so that there are no repeated edges and no self-loops.\n    Return true if it is possible to make the degree of each node in the graph even, otherwise return false.\n    The degree of a node is the number of edges connected to it.\n    \"\"\"\n    from collections import defaultdict\n    from typing import List\n\n    degree = defaultdict(int)\n    \n    for edge in edges:\n        degree[edge[0]] += 1\n        degree[edge[1]] += 1\n    \n    odd_degree_nodes = [node for node in degree if degree[node] % 2 != 0]\n    \n    if len(odd_degree_nodes) == 0:\n        return True\n    elif len(odd_degree_nodes) == 2:\n        return True\n    elif len(odd_degree_nodes) == 4:\n        return True\n    else:\n        return False", "is_solved": false}
{"task_id": "minimum-total-cost-to-make-arrays-unequal", "prompt": "def minimumTotalCost(nums1: List[int], nums2: List[int]) -> int:\n    \"\"\"\n    You are given two 0-indexed integer arrays nums1 and nums2, of equal length n.\n    In one operation, you can swap the values of any two indices of nums1. The cost of this operation is the sum of the indices.\n    Find the minimum total cost of performing the given operation any number of times such that nums1[i] != nums2[i] for all 0 <= i <= n - 1 after performing all the operations.\n    Return the minimum total cost such that nums1 and nums2 satisfy the above condition. In case it is not possible, return -1.\n    \"\"\"\n", "entry_point": "minimum-total-cost-to-make-arrays-unequal", "cannonical_solution": "", "test": "", "visible_tests": ["assert minimumTotalCost([1,2,3,4,5], [1,2,3,4,5]) == 10", "assert minimumTotalCost([2,2,2,1,3], [1,2,2,3,3]) == 10", "assert minimumTotalCost([1,2,2], [1,2,2]) == -1"], "solution": "def minimumTotalCost(nums1: List[int], nums2: List[int]) -> int:\n    \"\"\"\n    You are given two 0-indexed integer arrays nums1 and nums2, of equal length n.\n    In one operation, you can swap the values of any two indices of nums1. The cost of this operation is the sum of the indices.\n    Find the minimum total cost of performing the given operation any number of times such that nums1[i] != nums2[i] for all 0 <= i <= n - 1 after performing all the operations.\n    Return the minimum total cost such that nums1 and nums2 satisfy the above condition. In case it is not possible, return -1.\n    \"\"\"\n    from collections import defaultdict\n\n    n = len(nums1)\n    graph = defaultdict(list)\n    \n    for i in range(n):\n        if nums1[i] != nums2[i]:\n            graph[nums1[i]].append(i)\n    \n    visited = set()\n    min_cost = 0\n    \n    def dfs(node):\n        if node in visited:\n            return 0\n        visited.add(node)\n        cost = float('inf')\n        for index in graph[node]:\n            cost = min(cost, index + dfs(nums2[index]))\n        return cost\n    \n    for num in graph:\n        if num not in visited:\n            min_cost += dfs(num)\n    \n    return min_cost if len(visited) == len(graph) else -1", "is_solved": false}
{"task_id": "maximum-number-of-points-from-grid-queries", "prompt": "def maxPoints(grid: List[List[int]], queries: List[int]) -> List[int]:\n    \"\"\"\n    You are given an m x n integer matrix grid and an array queries of size k.\n    Find an array answer of size k such that for each integer queries[i] you start in the top left cell of the matrix and repeat the following process:\n    If queries[i] is strictly greater than the value of the current cell that you are in, then you get one point if it is your first time visiting this cell, and you can move to any adjacent cell in all 4 directions: up, down, left, and right.\n    Otherwise, you do not get any points, and you end this process.\n    After the process, answer[i] is the maximum number of points you can get. Note that for each query you are allowed to visit the same cell multiple times.\n    Return the resulting array answer.\n    \"\"\"\n", "entry_point": "maximum-number-of-points-from-grid-queries", "cannonical_solution": "", "test": "", "visible_tests": ["assert maxPoints([[1,2,3],[2,5,7],[3,5,1]], [5,6,2]) == [5,8,1]", "assert maxPoints([[5,2,1],[1,1,2]], [3]) == [0]"], "solution": "def maxPoints(grid: List[List[int]], queries: List[int]) -> List[int]:\n    \"\"\"\n    You are given an m x n integer matrix grid and an array queries of size k.\n    Find an array answer of size k such that for each integer queries[i] you start in the top left cell of the matrix and repeat the following process:\n    If queries[i] is strictly greater than the value of the current cell that you are in, then you get one point if it is your first time visiting this cell, and you can move to any adjacent cell in all 4 directions: up, down, left, and right.\n    Otherwise, you do not get any points, and you end this process.\n    After the process, answer[i] is the maximum number of points you can get. Note that for each query you are allowed to visit the same cell multiple times.\n    Return the resulting array answer.\n    \"\"\"\n    from typing import List\n\n    def dfs(x: int, y: int, query: int, visited: List[List[bool]]) -> int:\n        if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or visited[x][y] or grid[x][y] >= query:\n            return 0\n        visited[x][y] = True\n        points = 1\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            points += dfs(x + dx, y + dy, query, visited)\n        visited[x][y] = False\n        return points\n\n    answer = []\n    for query in queries:\n        visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n        answer.append(dfs(0, 0, query, visited))\n    return answer", "is_solved": false}
{"task_id": "divide-nodes-into-the-maximum-number-of-groups", "prompt": "def magnificentSets(n: int, edges: List[List[int]]) -> int:\n    \"\"\"\n    You are given a positive integer n representing the number of nodes in an undirected graph. The nodes are labeled from 1 to n.\n    You are also given a 2D integer array edges, where edges[i] = [ai, bi] indicates that there is a bidirectional edge between nodes ai and bi. Notice that the given graph may be disconnected.\n    Divide the nodes of the graph into m groups (1-indexed) such that:\n    Each node in the graph belongs to exactly one group.\n    For every pair of nodes in the graph that are connected by an edge [ai, bi], if ai belongs to the group with index x, and bi belongs to the group with index y, then |y - x| = 1.\n    Return the maximum number of groups (i.e., maximum m) into which you can divide the nodes. Return -1 if it is impossible to group the nodes with the given conditions.\n    \"\"\"\n", "entry_point": "divide-nodes-into-the-maximum-number-of-groups", "cannonical_solution": "", "test": "", "visible_tests": ["assert magnificentSets(6, [[1,2],[1,4],[1,5],[2,6],[2,3],[4,6]]) == 4", "assert magnificentSets(3, [[1,2],[2,3],[3,1]]) == -1"], "solution": "def magnificentSets(n: int, edges: List[List[int]]) -> int:\n    \"\"\"\n    You are given a positive integer n representing the number of nodes in an undirected graph. The nodes are labeled from 1 to n.\n    You are also given a 2D integer array edges, where edges[i] = [ai, bi] indicates that there is a bidirectional edge between nodes ai and bi. Notice that the given graph may be disconnected.\n    Divide the nodes of the graph into m groups (1-indexed) such that:\n    Each node in the graph belongs to exactly one group.\n    For every pair of nodes in the graph that are connected by an edge [ai, bi], if ai belongs to the group with index x, and bi belongs to the group with index y, then |y - x| = 1.\n    Return the maximum number of groups (i.e., maximum m) into which you can divide the nodes. Return -1 if it is impossible to group the nodes with the given conditions.\n    \"\"\"\n    from collections import defaultdict\n    from typing import List\n\n    def dfs(node: int, group: int) -> bool:\n        if node in visited:\n            return visited[node] == group\n        visited[node] = group\n        for neighbor in graph[node]:\n            if not dfs(neighbor, group ^ 1):\n                return False\n        return True\n\n    graph = defaultdict(list)\n    for edge in edges:\n        graph[edge[0]].append(edge[1])\n        graph[edge[1]].append(edge[0])\n\n    visited = {}\n    for node in range(1, n + 1):\n        if node not in visited:\n            if not dfs(node, 0):\n                return -1\n\n    return sum(1 for group in visited.values() if group == 0) + 1", "is_solved": false}
{"task_id": "count-palindromic-subsequences", "prompt": "def countPalindromes(s: str) -> int:\n    \"\"\"\n    Given a string of digits s, return the number of palindromic subsequences of s having length 5. Since the answer may be very large, return it modulo 109 + 7.\n    Note:\n    A string is palindromic if it reads the same forward and backward.\n    A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\n    \"\"\"\n", "entry_point": "count-palindromic-subsequences", "cannonical_solution": "", "test": "", "visible_tests": ["assert countPalindromes() == 2", "assert countPalindromes() == 21", "assert countPalindromes() == 2"], "solution": "def countPalindromes(s: str) -> int:\n    \"\"\"\n    Given a string of digits s, return the number of palindromic subsequences of s having length 5. Since the answer may be very large, return it modulo 109 + 7.\n    Note:\n    A string is palindromic if it reads the same forward and backward.\n    A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\n    \"\"\"\n    MOD = 10**9 + 7\n    n = len(s)\n    dp = [[[0] * 6 for _ in range(n + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        for j in range(6):\n            dp[i][i][j] = 1\n\n    for length in range(1, n + 1):\n        for i in range(n - length + 1):\n            j = i + length\n            for k in range(1, 6):\n                dp[i][j][k] = dp[i + 1][j][k] + dp[i][j - 1][k] - dp[i + 1][j - 1][k]\n                if s[i] == s[j - 1]:\n                    dp[i][j][k] += dp[i + 1][j - 1][k - 1]\n                dp[i][j][k] %= MOD\n\n    return dp[0][n][5]", "is_solved": false}
{"task_id": "count-subarrays-with-median-k", "prompt": "def countSubarrays(nums: List[int], k: int) -> int:\n    \"\"\"\n    You are given an array nums of size n consisting of distinct integers from 1 to n and a positive integer k.\n    Return the number of non-empty subarrays in nums that have a median equal to k.\n    Note:\n    The median of an array is the middle element after sorting the array in ascending order. If the array is of even length, the median is the left middle element.\n    For example, the median of [2,3,1,4] is 2, and the median of [8,4,3,5,1] is 4.\n    A subarray is a contiguous part of an array.\n    \"\"\"\n", "entry_point": "count-subarrays-with-median-k", "cannonical_solution": "", "test": "", "visible_tests": ["assert countSubarrays([3,2,1,4,5], 4) == 3", "assert countSubarrays([2,3,1], 3) == 1"], "solution": "def countSubarrays(nums: List[int], k: int) -> int:\n    \"\"\"\n    You are given an array nums of size n consisting of distinct integers from 1 to n and a positive integer k.\n    Return the number of non-empty subarrays in nums that have a median equal to k.\n    Note:\n    The median of an array is the middle element after sorting the array in ascending order. If the array is of even length, the median is the left middle element.\n    For example, the median of [2,3,1,4] is 2, and the median of [8,4,3,5,1] is 4.\n    A subarray is a contiguous part of an array.\n    \"\"\"\n    count = 0\n    n = len(nums)\n    \n    for i in range(n):\n        for j in range(i+1, n+1):\n            subarray = nums[i:j]\n            subarray.sort()\n            median_index = (len(subarray) - 1) // 2\n            if subarray[median_index] == k:\n                count += 1\n                \n    return count", "is_solved": false}
{"task_id": "number-of-beautiful-partitions", "prompt": "def beautifulPartitions(s: str, k: int, minLength: int) -> int:\n    \"\"\"\n    You are given a string s that consists of the digits '1' to '9' and two integers k and minLength.\n    A partition of s is called beautiful if:\n    s is partitioned into k non-intersecting substrings.\n    Each substring has a length of at least minLength.\n    Each substring starts with a prime digit and ends with a non-prime digit. Prime digits are '2', '3', '5', and '7', and the rest of the digits are non-prime.\n    Return the number of beautiful partitions of s. Since the answer may be very large, return it modulo 109 + 7.\n    A substring is a contiguous sequence of characters within a string.\n    \"\"\"\n", "entry_point": "number-of-beautiful-partitions", "cannonical_solution": "", "test": "", "visible_tests": ["assert beautifulPartitions(3, 2) == 3", "assert beautifulPartitions(3, 3) == 1", "assert beautifulPartitions(3, 1) == 1"], "solution": "def beautifulPartitions(s: str, k: int, minLength: int) -> int:\n    \"\"\"\n    You are given a string s that consists of the digits '1' to '9' and two integers k and minLength.\n    A partition of s is called beautiful if:\n    s is partitioned into k non-intersecting substrings.\n    Each substring has a length of at least minLength.\n    Each substring starts with a prime digit and ends with a non-prime digit. Prime digits are '2', '3', '5', and '7', and the rest of the digits are non-prime.\n    Return the number of beautiful partitions of s. Since the answer may be very large, return it modulo 109 + 7.\n    A substring is a contiguous sequence of characters within a string.\n    \"\"\"\n    MOD = 10**9 + 7\n    prime_digits = {'2', '3', '5', '7'}\n    non_prime_digits = {'1', '4', '6', '8', '9'}\n\n    def is_beautiful(substring: str) -> bool:\n        return substring[0] in prime_digits and substring[-1] in non_prime_digits\n\n    def count_beautiful_partitions(start: int, remaining_partitions: int) -> int:\n        if remaining_partitions == 0:\n            return 1 if start == len(s) else 0\n        if start >= len(s):\n            return 0\n\n        count = 0\n        for end in range(start + minLength - 1, len(s)):\n            if is_beautiful(s[start:end + 1]):\n                count += count_beautiful_partitions(end + 1, remaining_partitions - 1)\n                count %= MOD\n\n        return count\n\n    return count_beautiful_partitions(0, k)", "is_solved": false}
{"task_id": "split-message-based-on-limit", "prompt": "def splitMessage(message: str, limit: int) -> List[str]:\n    \"\"\"\n    You are given a string, message, and a positive integer, limit.\n    You must split message into one or more parts based on limit. Each resulting part should have the suffix \"<a/b>\", where \"b\" is to be replaced with the total number of parts and \"a\" is to be replaced with the index of the part, starting from 1 and going up to b. Additionally, the length of each resulting part (including its suffix) should be equal to limit, except for the last part whose length can be at most limit.\n    The resulting parts should be formed such that when their suffixes are removed and they are all concatenated in order, they should be equal to message. Also, the result should contain as few parts as possible.\n    Return the parts message would be split into as an array of strings. If it is impossible to split message as required, return an empty array.\n    \"\"\"\n", "entry_point": "split-message-based-on-limit", "cannonical_solution": "", "test": "", "visible_tests": ["assert splitMessage(9) == [\"thi<1/14>\",\"s i<2/14>\",\"s r<3/14>\",\"eal<4/14>\",\"ly <5/14>\",\"a v<6/14>\",\"ery<7/14>\",\" aw<8/14>\",\"eso<9/14>\",\"me<10/14>\",\" m<11/14>\",\"es<12/14>\",\"sa<13/14>\",\"ge<14/14>\"]", "assert splitMessage(15) == [\"short mess<1/2>\",\"age<2/2>\"]"], "solution": "def splitMessage(message: str, limit: int) -> List[str]:\n    \"\"\"\n    You are given a string, message, and a positive integer, limit.\n    You must split message into one or more parts based on limit. Each resulting part should have the suffix \"<a/b>\", where \"b\" is to be replaced with the total number of parts and \"a\" is to be replaced with the index of the part, starting from 1 and going up to b. Additionally, the length of each resulting part (including its suffix) should be equal to limit, except for the last part whose length can be at most limit.\n    The resulting parts should be formed such that when their suffixes are removed and they are all concatenated in order, they should be equal to message. Also, the result should contain as few parts as possible.\n    Return the parts message would be split into as an array of strings. If it is impossible to split message as required, return an empty array.\n    \"\"\"\n    from typing import List\n\n    if limit < 5:\n        return []\n    \n    n = len(message)\n    num_parts = (n + limit - 5) // (limit - 4)\n    if num_parts * (limit - 4) < n:\n        return []\n    \n    result = []\n    for i in range(num_parts):\n        start = i * (limit - 4)\n        end = min((i + 1) * (limit - 4), n)\n        part = message[start:end] + f\"<{i + 1}/{num_parts}>\"\n        result.append(part)\n    \n    return result", "is_solved": false}
{"task_id": "maximum-number-of-non-overlapping-palindrome-substrings", "prompt": "def maxPalindromes(s: str, k: int) -> int:\n    \"\"\"\n    You are given a string s and a positive integer k.\n    Select a set of non-overlapping substrings from the string s that satisfy the following conditions:\n    The length of each substring is at least k.\n    Each substring is a palindrome.\n    Return the maximum number of substrings in an optimal selection.\n    A substring is a contiguous sequence of characters within a string.\n    \"\"\"\n", "entry_point": "maximum-number-of-non-overlapping-palindrome-substrings", "cannonical_solution": "", "test": "", "visible_tests": ["assert maxPalindromes(3) == 2", "assert maxPalindromes(2) == 0"], "solution": "def maxPalindromes(s: str, k: int) -> int:\n    \"\"\"\n    You are given a string s and a positive integer k.\n    Select a set of non-overlapping substrings from the string s that satisfy the following conditions:\n    The length of each substring is at least k.\n    Each substring is a palindrome.\n    Return the maximum number of substrings in an optimal selection.\n    A substring is a contiguous sequence of characters within a string.\n    \"\"\"\n    def is_palindrome(substring: str) -> bool:\n        return substring == substring[::-1]\n\n    def count_palindromes(start: int, end: int) -> int:\n        if start >= end:\n            return 0\n        if dp[start][end] != -1:\n            return dp[start][end]\n        if is_palindrome(s[start:end + 1]) and end - start + 1 >= k:\n            dp[start][end] = 1 + count_palindromes(end + 1, len(s) - 1)\n        else:\n            dp[start][end] = max(count_palindromes(start + 1, end), count_palindromes(start, end - 1))\n        return dp[start][end]\n\n    dp = [[-1 for _ in range(len(s))] for _ in range(len(s))]\n    return count_palindromes(0, len(s) - 1)", "is_solved": false}
{"task_id": "minimum-total-distance-traveled", "prompt": "def minimumTotalDistance(robot: List[int], factory: List[List[int]]) -> int:\n    \"\"\"\n    There are some robots and factories on the X-axis. You are given an integer array robot where robot[i] is the position of the ith robot. You are also given a 2D integer array factory where factory[j] = [positionj, limitj] indicates that positionj is the position of the jth factory and that the jth factory can repair at most limitj robots.\n    The positions of each robot are unique. The positions of each factory are also unique. Note that a robot can be in the same position as a factory initially.\n    All the robots are initially broken; they keep moving in one direction. The direction could be the negative or the positive direction of the X-axis. When a robot reaches a factory that did not reach its limit, the factory repairs the robot, and it stops moving.\n    At any moment, you can set the initial direction of moving for some robot. Your target is to minimize the total distance traveled by all the robots.\n    Return the minimum total distance traveled by all the robots. The test cases are generated such that all the robots can be repaired.\n    Note that\n    All robots move at the same speed.\n    If two robots move in the same direction, they will never collide.\n    If two robots move in opposite directions and they meet at some point, they do not collide. They cross each other.\n    If a robot passes by a factory that reached its limits, it crosses it as if it does not exist.\n    If the robot moved from a position x to a position y, the distance it moved is |y - x|.\n    \"\"\"\n", "entry_point": "minimum-total-distance-traveled", "cannonical_solution": "", "test": "", "visible_tests": ["assert minimumTotalDistance([0,4,6], [[2,2],[6,2]]) == 4", "assert minimumTotalDistance([1,-1], [[-2,1],[2,1]]) == 2"], "solution": "def minimumTotalDistance(robot: List[int], factory: List[List[int]]) -> int:\n    \"\"\"\n    There are some robots and factories on the X-axis. You are given an integer array robot where robot[i] is the position of the ith robot. You are also given a 2D integer array factory where factory[j] = [positionj, limitj] indicates that positionj is the position of the jth factory and that the jth factory can repair at most limitj robots.\n    The positions of each robot are unique. The positions of each factory are also unique. Note that a robot can be in the same position as a factory initially.\n    All the robots are initially broken; they keep moving in one direction. The direction could be the negative or the positive direction of the X-axis. When a robot reaches a factory that did not reach its limit, the factory repairs the robot, and it stops moving.\n    At any moment, you can set the initial direction of moving for some robot. Your target is to minimize the total distance traveled by all the robots.\n    Return the minimum total distance traveled by all the robots. The test cases are generated such that all the robots can be repaired.\n    Note that\n    All robots move at the same speed.\n    If two robots move in the same direction, they will never collide.\n    If two robots move in opposite directions and they meet at some point, they do not collide. They cross each other.\n    If a robot passes by a factory that reached its limits, it crosses it as if it does not exist.\n    If the robot moved from a position x to a position y, the distance it moved is |y - x|.\n    \"\"\"\n    from typing import List\n\n    factory.sort(key=lambda x: x[0])\n    robot.sort()\n    total_distance = 0\n\n    for position, limit in factory:\n        while limit > 0 and robot:\n            closest_robot = min(robot, key=lambda x: abs(x - position))\n            total_distance += abs(closest_robot - position)\n            robot.remove(closest_robot)\n            limit -= 1\n\n    return total_distance", "is_solved": false}
{"task_id": "next-greater-element-iv", "prompt": "def secondGreaterElement(nums: List[int]) -> List[int]:\n    \"\"\"\n    You are given a 0-indexed array of non-negative integers nums. For each integer in nums, you must find its respective second greater integer.\n    The second greater integer of nums[i] is nums[j] such that:\n    j > i\n    nums[j] > nums[i]\n    There exists exactly one index k such that nums[k] > nums[i] and i < k < j.\n    If there is no such nums[j], the second greater integer is considered to be -1.\n    For example, in the array [1, 2, 4, 3], the second greater integer of 1 is 4, 2 is 3, and that of 3 and 4 is -1.\n    Return an integer array answer, where answer[i] is the second greater integer of nums[i].\n    \"\"\"\n", "entry_point": "next-greater-element-iv", "cannonical_solution": "", "test": "", "visible_tests": ["assert secondGreaterElement([2,4,0,9,6]) == [9,6,6,-1,-1]", "assert secondGreaterElement([3,3]) == [-1,-1]"], "solution": "def secondGreaterElement(nums: List[int]) -> List[int]:\n    \"\"\"\n    You are given a 0-indexed array of non-negative integers nums. For each integer in nums, you must find its respective second greater integer.\n    The second greater integer of nums[i] is nums[j] such that:\n    j > i\n    nums[j] > nums[i]\n    There exists exactly one index k such that nums[k] > nums[i] and i < k < j.\n    If there is no such nums[j], the second greater integer is considered to be -1.\n    For example, in the array [1, 2, 4, 3], the second greater integer of 1 is 4, 2 is 3, and that of 3 and 4 is -1.\n    Return an integer array answer, where answer[i] is the second greater integer of nums[i].\n    \"\"\"\n    result = [-1] * len(nums)\n    stack = []\n\n    for i, num in enumerate(nums):\n        while stack and nums[stack[-1]] < num:\n            idx = stack.pop()\n            if result[idx] == -1:\n                result[idx] = num\n            else:\n                stack.append(idx)\n        stack.append(i)\n\n    return result", "is_solved": false}
{"task_id": "minimum-number-of-operations-to-make-arrays-similar", "prompt": "def makeSimilar(nums: List[int], target: List[int]) -> int:\n    \"\"\"\n    You are given two positive integer arrays nums and target, of the same length.\n    In one operation, you can choose any two distinct indices i and j where 0 <= i, j < nums.length and:\n    set nums[i] = nums[i] + 2 and\n    set nums[j] = nums[j] - 2.\n    Two arrays are considered to be similar if the frequency of each element is the same.\n    Return the minimum number of operations required to make nums similar to target. The test cases are generated such that nums can always be similar to target.\n    \"\"\"\n", "entry_point": "minimum-number-of-operations-to-make-arrays-similar", "cannonical_solution": "", "test": "", "visible_tests": ["assert makeSimilar([8,12,6], [2,14,10]) == 2", "assert makeSimilar([1,2,5], [4,1,3]) == 1", "assert makeSimilar([1,1,1,1,1], [1,1,1,1,1]) == 0"], "solution": "def makeSimilar(nums: List[int], target: List[int]) -> int:\n    \"\"\"\n    You are given two positive integer arrays nums and target, of the same length.\n    In one operation, you can choose any two distinct indices i and j where 0 <= i, j < nums.length and:\n    set nums[i] = nums[i] + 2 and\n    set nums[j] = nums[j] - 2.\n    Two arrays are considered to be similar if the frequency of each element is the same.\n    Return the minimum number of operations required to make nums similar to target. The test cases are generated such that nums can always be similar to target.\n    \"\"\"\n    from collections import Counter\n\n    diff_counter = Counter()\n    for num, tar in zip(nums, target):\n        diff = (num - tar) % 4\n        diff_counter[diff] += 1\n\n    return diff_counter[2] // 2", "is_solved": false}
{"task_id": "minimum-cost-to-make-array-equal", "prompt": "def minCost(nums: List[int], cost: List[int]) -> int:\n    \"\"\"\n    You are given two 0-indexed arrays nums and cost consisting each of n positive integers.\n    You can do the following operation any number of times:\n    Increase or decrease any element of the array nums by 1.\n    The cost of doing one operation on the ith element is cost[i].\n    Return the minimum total cost such that all the elements of the array nums become equal.\n    \"\"\"\n", "entry_point": "minimum-cost-to-make-array-equal", "cannonical_solution": "", "test": "", "visible_tests": ["assert minCost([1,3,5,2], [2,3,1,14]) == 8", "assert minCost([2,2,2,2,2], [4,2,8,1,3]) == 0"], "solution": "def minCost(nums: List[int], cost: List[int]) -> int:\n    \"\"\"\n    You are given two 0-indexed arrays nums and cost consisting each of n positive integers.\n    You can do the following operation any number of times:\n    Increase or decrease any element of the array nums by 1.\n    The cost of doing one operation on the ith element is cost[i].\n    Return the minimum total cost such that all the elements of the array nums become equal.\n    \"\"\"\n    from typing import List\n\n    def calculate_cost(target: int) -> int:\n        return sum(abs(nums[i] - target) * cost[i] for i in range(len(nums)))\n\n    min_num, max_num = min(nums), max(nums)\n    min_cost = float('inf')\n\n    while min_num <= max_num:\n        mid = (min_num + max_num) // 2\n        left_cost = calculate_cost(mid - 1)\n        mid_cost = calculate_cost(mid)\n        right_cost = calculate_cost(mid + 1)\n\n        min_cost = min(min_cost, mid_cost)\n\n        if left_cost < right_cost:\n            max_num = mid - 1\n        else:\n            min_num = mid + 1\n\n    return min_cost", "is_solved": true}
{"task_id": "create-components-with-same-value", "prompt": "def componentValue(nums: List[int], edges: List[List[int]]) -> int:\n    \"\"\"\n    There is an undirected tree with n nodes labeled from 0 to n - 1.\n    You are given a 0-indexed integer array nums of length n where nums[i] represents the value of the ith node. You are also given a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\n    You are allowed to delete some edges, splitting the tree into multiple connected components. Let the value of a component be the sum of all nums[i] for which node i is in the component.\n    Return the maximum number of edges you can delete, such that every connected component in the tree has the same value.\n    \"\"\"\n", "entry_point": "create-components-with-same-value", "cannonical_solution": "", "test": "", "visible_tests": ["assert componentValue([6,2,2,2,6], [[0,1],[1,2],[1,3],[3,4]]) == 2", "assert componentValue([2], []) == 0"], "solution": "def componentValue(nums: List[int], edges: List[List[int]]) -> int:\n    \"\"\"\n    There is an undirected tree with n nodes labeled from 0 to n - 1.\n    You are given a 0-indexed integer array nums of length n where nums[i] represents the value of the ith node. You are also given a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\n    You are allowed to delete some edges, splitting the tree into multiple connected components. Let the value of a component be the sum of all nums[i] for which node i is in the component.\n    Return the maximum number of edges you can delete, such that every connected component in the tree has the same value.\n    \"\"\"\n    from collections import defaultdict, deque\n    from typing import List\n\n    graph = defaultdict(list)\n    for a, b in edges:\n        graph[a].append(b)\n        graph[b].append(a)\n\n    total_sum = sum(nums)\n    if total_sum % len(nums) != 0:\n        return -1\n\n    target_value = total_sum // len(nums)\n\n    def dfs(node, parent):\n        nonlocal count\n        component_sum = nums[node]\n        for neighbor in graph[node]:\n            if neighbor != parent:\n                component_sum += dfs(neighbor, node)\n        if component_sum == target_value:\n            count += 1\n            return 0\n        return component_sum\n\n    count = 0\n    dfs(0, -1)\n    return count - 1 if count > 0 else -1", "is_solved": false}
{"task_id": "count-subarrays-with-fixed-bounds", "prompt": "def countSubarrays(nums: List[int], minK: int, maxK: int) -> int:\n    \"\"\"\n    You are given an integer array nums and two integers minK and maxK.\n    A fixed-bound subarray of nums is a subarray that satisfies the following conditions:\n    The minimum value in the subarray is equal to minK.\n    The maximum value in the subarray is equal to maxK.\n    Return the number of fixed-bound subarrays.\n    A subarray is a contiguous part of an array.\n    \"\"\"\n", "entry_point": "count-subarrays-with-fixed-bounds", "cannonical_solution": "", "test": "", "visible_tests": ["assert countSubarrays([1,3,5,2,7,5], 1, 5) == 2", "assert countSubarrays([1,1,1,1], 1, 1) == 10"], "solution": "def countSubarrays(nums: List[int], minK: int, maxK: int) -> int:\n    \"\"\"\n    You are given an integer array nums and two integers minK and maxK.\n    A fixed-bound subarray of nums is a subarray that satisfies the following conditions:\n    The minimum value in the subarray is equal to minK.\n    The maximum value in the subarray is equal to maxK.\n    Return the number of fixed-bound subarrays.\n    A subarray is a contiguous part of an array.\n    \"\"\"\n    count = 0\n    for i in range(len(nums)):\n        min_val = float('inf')\n        max_val = float('-inf')\n        for j in range(i, len(nums)):\n            min_val = min(min_val, nums[j])\n            max_val = max(max_val, nums[j])\n            if min_val == minK and max_val == maxK:\n                count += 1\n    return count", "is_solved": false}
{"task_id": "longest-increasing-subsequence-ii", "prompt": "def lengthOfLIS(nums: List[int], k: int) -> int:\n    \"\"\"\n    You are given an integer array nums and an integer k.\n    Find the longest subsequence of nums that meets the following requirements:\n    The subsequence is strictly increasing and\n    The difference between adjacent elements in the subsequence is at most k.\n    Return the length of the longest subsequence that meets the requirements.\n    A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n    \"\"\"\n", "entry_point": "longest-increasing-subsequence-ii", "cannonical_solution": "", "test": "", "visible_tests": ["assert lengthOfLIS([4,2,1,4,3,4,5,8,15], 3) == 5", "assert lengthOfLIS([7,4,5,1,8,12,4,7], 5) == 4", "assert lengthOfLIS([1,5], 1) == 1"], "solution": "def lengthOfLIS(nums: List[int], k: int) -> int:\n    \"\"\"\n    You are given an integer array nums and an integer k.\n    Find the longest subsequence of nums that meets the following requirements:\n    The subsequence is strictly increasing and\n    The difference between adjacent elements in the subsequence is at most k.\n    Return the length of the longest subsequence that meets the requirements.\n    A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n    \"\"\"\n    from typing import List\n\n    if not nums:\n        return 0\n\n    n = len(nums)\n    dp = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] > nums[j] and nums[i] - nums[j] <= k:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)", "is_solved": false}
{"task_id": "paths-in-matrix-whose-sum-is-divisible-by-k", "prompt": "def numberOfPaths(grid: List[List[int]], k: int) -> int:\n    \"\"\"\n    You are given a 0-indexed m x n integer matrix grid and an integer k. You are currently at position (0, 0) and you want to reach position (m - 1, n - 1) moving only down or right.\n    Return the number of paths where the sum of the elements on the path is divisible by k. Since the answer may be very large, return it modulo 109 + 7.\n    \"\"\"\n", "entry_point": "paths-in-matrix-whose-sum-is-divisible-by-k", "cannonical_solution": "", "test": "", "visible_tests": ["assert numberOfPaths([[5,2,4],[3,0,5],[0,7,2]], 3) == 2", "assert numberOfPaths([[0,0]], 5) == 1", "assert numberOfPaths([[7,3,4,9],[2,3,6,2],[2,3,7,0]], 1) == 10"], "solution": "def numberOfPaths(grid: List[List[int]], k: int) -> int:\n    \"\"\"\n    You are given a 0-indexed m x n integer matrix grid and an integer k. You are currently at position (0, 0) and you want to reach position (m - 1, n - 1) moving only down or right.\n    Return the number of paths where the sum of the elements on the path is divisible by k. Since the answer may be very large, return it modulo 109 + 7.\n    \"\"\"\n    from typing import List\n\n    m, n = len(grid), len(grid[0])\n    mod = 10**9 + 7\n    dp = [[[0] * k for _ in range(n)] for _ in range(m)]\n    dp[0][0][grid[0][0] % k] = 1\n\n    for i in range(m):\n        for j in range(n):\n            for p in range(k):\n                if i > 0:\n                    dp[i][j][(p + grid[i][j]) % k] += dp[i - 1][j][p]\n                if j > 0:\n                    dp[i][j][(p + grid[i][j]) % k] += dp[i][j - 1][p]\n\n    return dp[m - 1][n - 1][0] % mod", "is_solved": true}
