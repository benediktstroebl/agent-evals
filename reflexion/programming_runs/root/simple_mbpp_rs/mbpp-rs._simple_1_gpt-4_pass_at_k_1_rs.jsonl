{"name": "mbpp_234_volume_cube", "language": "rs", "prompt": "/// Write a function to find the volume of a cube given its side length.\nfn volume_cube(l: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_234_volume_cube.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "volume_cube", "test": "\n\nfn main() {\n    let candidate = volume_cube;\n    assert_eq!(candidate(3), 27);\n    assert_eq!(candidate(2), 8);\n    assert_eq!(candidate(5), 125);\n}\n", "solution": "/// Write a function to find the volume of a cube given its side length.\nfn volume_cube(l: isize) -> isize {\n    l.pow(3)\n}", "is_solved": true}
{"name": "mbpp_89_closest_num", "language": "rs", "prompt": "/// Write a function to find the closest smaller number than n.\nfn closest_num(N: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_89_closest_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "closest_num", "test": "\n\nfn main() {\n    let candidate = closest_num;\n    assert_eq!(candidate(11), 10);\n    assert_eq!(candidate(7), 6);\n    assert_eq!(candidate(12), 11);\n}\n", "solution": "/// Write a function to find the closest smaller number than n.\nfn closest_num(N: isize) -> isize {\n    let mut closest = N - 1;\n\n    while closest >= 0 {\n        if closest < N {\n            break;\n        }\n        closest -= 1;\n    }\n\n    closest\n}", "is_solved": true}
{"name": "mbpp_245_max_sum", "language": "rs", "prompt": "/// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nfn max_sum(arr: Vec<isize>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "max_sum", "test": "\n\nfn main() {\n    let candidate = max_sum;\n    assert_eq!(candidate(vec![1, 15, 51, 45, 33, 100, 12, 18, 9]), 194);\n    assert_eq!(candidate(vec![80, 60, 30, 40, 20, 10]), 210);\n    assert_eq!(candidate(vec![2, 3, 14, 16, 21, 23, 29, 30]), 138);\n}\n", "solution": "/// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nfn max_sum(arr: Vec<isize>) -> isize {\n    let n = arr.len();\n    if n == 0 {\n        return 0;\n    }\n\n    let mut inc = vec![0; n];\n    let mut dec = vec![0; n];\n\n    inc[0] = arr[0];\n    dec[n - 1] = arr[n - 1];\n\n    for i in 1..n {\n        inc[i] = arr[i];\n        for j in 0..i {\n            if arr[i] > arr[j] {\n                inc[i] = inc[i].max(inc[j] + arr[i]);\n            }\n        }\n    }\n\n    for i in (0..n - 1).rev() {\n        dec[i] = arr[i];\n        for j in i + 1..n {\n            if arr[i] > arr[j] {\n                dec[i] = dec[i].max(dec[j] + arr[i]);\n            }\n        }\n    }\n\n    let mut max_sum = inc[0] + dec[0] - arr[0];\n    for i in 1..n {\n        max_sum = max_sum.max(inc[i] + dec[i] - arr[i]);\n    }\n\n    max_sum\n}", "is_solved": true}
{"name": "mbpp_77_is_Diff", "language": "rs", "prompt": "/// Write a rsthon function to find whether a number is divisible by 11.\nfn is_Diff(n: isize) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_77_is_Diff.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "is_Diff", "test": "\n\nfn main() {\n    let candidate = is_Diff;\n    assert_eq!(candidate(12345), false);\n    assert_eq!(candidate(1212112), true);\n    assert_eq!(candidate(1212), false);\n}\n", "solution": "/// Write a rsthon function to find whether a number is divisible by 11.\nfn is_Diff(n: isize) -> bool {\n    if n.abs() % 11 == 0 {\n        return true;\n    } else {\n        return false;\n    }\n}", "is_solved": true}
{"name": "mbpp_123_amicable_numbers_sum", "language": "rs", "prompt": "/// Write a function to sum all amicable numbers from 1 to a specified number.\nfn amicable_numbers_sum(limit: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_123_amicable_numbers_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "amicable_numbers_sum", "test": "\n\nfn main() {\n    let candidate = amicable_numbers_sum;\n    assert_eq!(candidate(999), 504);\n    assert_eq!(candidate(9999), 31626);\n    assert_eq!(candidate(99), 0);\n}\n", "solution": "/// Write a function to sum all amicable numbers from 1 to a specified number.\nfn amicable_numbers_sum(limit: isize) -> isize {\n    fn sum_of_divisors(n: isize) -> isize {\n        let mut sum = 1;\n        let mut i = 2;\n        while i * i <= n {\n            if n % i == 0 {\n                sum += i;\n                if i * i != n {\n                    sum += n / i;\n                }\n            }\n            i += 1;\n        }\n        sum\n    }\n\n    let mut amicable_sum = 0;\n    for i in 1..limit {\n        let a = sum_of_divisors(i);\n        let b = sum_of_divisors(a);\n        if i == b && i != a {\n            amicable_sum += i;\n        }\n    }\n    amicable_sum\n}", "is_solved": true}
{"name": "mbpp_420_cube_Sum", "language": "rs", "prompt": "/// Write a rsthon function to find the cube sum of first n even natural numbers.\nfn cube_Sum(n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_420_cube_Sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "cube_Sum", "test": "\n\nfn main() {\n    let candidate = cube_Sum;\n    assert_eq!(candidate(2), 72);\n    assert_eq!(candidate(3), 288);\n    assert_eq!(candidate(4), 800);\n}\n", "solution": "/// Write a rsthon function to find the cube sum of first n even natural numbers.\nfn cube_Sum(n: isize) -> isize {\n    let mut sum = 0;\n\n    for i in 1..=n {\n        let even_number = 2 * i;\n        let cube = even_number * even_number * even_number;\n        sum += cube;\n    }\n\n    sum\n}", "is_solved": true}
{"name": "mbpp_20_is_woodall", "language": "rs", "prompt": "/// Write a function to check if the given number is woodball or not.\nfn is_woodall(x: isize) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_20_is_woodall.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "is_woodall", "test": "\n\nfn main() {\n    let candidate = is_woodall;\n    assert_eq!(candidate(383), true);\n    assert_eq!(candidate(254), false);\n    assert_eq!(candidate(200), false);\n}\n", "solution": "/// Write a function to check if the given number is woodball or not.\nfn is_woodall(x: isize) -> bool {\n    if x < 1 {\n        return false;\n    }\n\n    let mut n = 1;\n    while (2usize.pow(n) - 1) * n < x as usize {\n        n += 1;\n    }\n\n    (2usize.pow(n) - 1) * n == x as usize\n}", "is_solved": false}
{"name": "mbpp_805_max_sum_list", "language": "rs", "prompt": "/// Write a function that returns the vector in a vector of vectors whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_805_max_sum_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "max_sum_list", "test": "\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n", "solution": "/// Write a function that returns the vector in a vector of vectors whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = None;\n    let mut max_list = Vec::new();\n\n    for list in lists {\n        let sum: isize = list.iter().sum();\n        if max_sum.is_none() || sum > max_sum.unwrap() {\n            max_sum = Some(sum);\n            max_list = list;\n        }\n    }\n\n    max_list\n}", "is_solved": true}
{"name": "mbpp_806_max_run_uppercase", "language": "rs", "prompt": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "max_run_uppercase", "test": "\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n", "solution": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n            if current_run > max_run {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n\n    max_run as isize\n}", "is_solved": true}
{"name": "mbpp_455_check_monthnumb_number", "language": "rs", "prompt": "/// Write a function to check whether the given month number contains 31 days or not.\nfn check_monthnumb_number(monthnum2: isize) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_455_check_monthnumb_number.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "check_monthnumb_number", "test": "\n\nfn main() {\n    let candidate = check_monthnumb_number;\n    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(6), false);\n}\n", "solution": "/// Write a function to check whether the given month number contains 31 days or not.\nfn check_monthnumb_number(monthnum2: isize) -> bool {\n    match monthnum2 {\n        1 | 3 | 5 | 7 | 8 | 10 | 12 => true,\n        4 | 6 | 9 | 11 => false,\n        _ => panic!(\"Invalid month number\"),\n    }\n}", "is_solved": false}
{"name": "mbpp_577_last_Digit_Factorial", "language": "rs", "prompt": "/// Write a rsthon function to find the last digit in factorial of a given number.\nfn last_Digit_Factorial(n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_577_last_Digit_Factorial.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "last_Digit_Factorial", "test": "\n\nfn main() {\n    let candidate = last_Digit_Factorial;\n    assert_eq!(candidate(4), 4);\n    assert_eq!(candidate(21), 0);\n    assert_eq!(candidate(30), 0);\n}\n", "solution": "/// Write a rsthon function to find the last digit in factorial of a given number.\nfn last_Digit_Factorial(n: isize) -> isize {\n    if n < 0 {\n        return -1;\n    }\n\n    if n == 0 || n == 1 {\n        return 1;\n    }\n\n    let mut factorial = 1;\n    for i in 2..=n {\n        factorial *= i;\n        factorial %= 10;\n    }\n\n    factorial\n}", "is_solved": true}
{"name": "mbpp_555_difference", "language": "rs", "prompt": "/// Write a rsthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nfn difference(n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_555_difference.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "difference", "test": "\n\nfn main() {\n    let candidate = difference;\n    assert_eq!(candidate(3), 30);\n    assert_eq!(candidate(5), 210);\n    assert_eq!(candidate(2), 6);\n}\n", "solution": "/// Write a rsthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nfn difference(n: isize) -> isize {\n    let sum_of_cubes = (n * (n + 1) / 2).pow(2);\n    let sum_of_natural_numbers = n * (n + 1) * (2 * n + 1) / 6;\n\n    sum_of_cubes - sum_of_natural_numbers\n}", "is_solved": false}
{"name": "mbpp_456_reverse_string_list", "language": "rs", "prompt": "/// Write a function to reverse each string in a given vector of string values.\nfn reverse_string_list(stringlist: Vec<String>) -> Vec<String> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_456_reverse_string_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "reverse_string_list", "test": "\n\nfn main() {\n    let candidate = reverse_string_list;\n    assert_eq!(candidate(vec![String::from(\"Red\"), String::from(\"Green\"), String::from(\"Blue\"), String::from(\"White\"), String::from(\"Black\")]), vec![String::from(\"deR\"), String::from(\"neerG\"), String::from(\"eulB\"), String::from(\"etihW\"), String::from(\"kcalB\")]);\n    assert_eq!(candidate(vec![String::from(\"john\"), String::from(\"amal\"), String::from(\"joel\"), String::from(\"george\")]), vec![String::from(\"nhoj\"), String::from(\"lama\"), String::from(\"leoj\"), String::from(\"egroeg\")]);\n    assert_eq!(candidate(vec![String::from(\"jack\"), String::from(\"john\"), String::from(\"mary\")]), vec![String::from(\"kcaj\"), String::from(\"nhoj\"), String::from(\"yram\")]);\n}\n", "solution": "/// Write a function to reverse each string in a given vector of string values.\nfn reverse_string_list(stringlist: Vec<String>) -> Vec<String> {\n    stringlist.into_iter().map(|s| s.chars().rev().collect()).collect()\n}", "is_solved": true}
{"name": "mbpp_12_sort_matrix", "language": "rs", "prompt": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "sort_matrix", "test": "\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n", "solution": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    M.into_iter()\n        .map(|row| (row.iter().sum::<isize>(), row))\n        .sorted_by_key(|(sum, _)| *sum)\n        .map(|(_, row)| row)\n        .collect()\n}", "is_solved": false}
{"name": "mbpp_584_find_adverbs", "language": "rs", "prompt": "/// Write a function to find the first adverb ending with ly and its positions in a given string.\nfn find_adverbs(text: String) -> String {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_584_find_adverbs.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "find_adverbs", "test": "\n\nfn main() {\n    let candidate = find_adverbs;\n    assert_eq!(candidate(String::from(\"Clearly, he has no excuse for such behavior.\")), String::from(\"0-7: Clearly\"));\n    assert_eq!(candidate(String::from(\"Please handle the situation carefuly\")), String::from(\"28-36: carefuly\"));\n    assert_eq!(candidate(String::from(\"Complete the task quickly\")), String::from(\"18-25: quickly\"));\n}\n", "solution": "/// Write a function to find the first adverb ending with ly and its positions in a given string.\nfn find_adverbs(text: String) -> String {\n    let words = text.split_whitespace();\n    let mut result = String::new();\n\n    for (index, word) in words.enumerate() {\n        if word.ends_with(\"ly\") {\n            result = format!(\"{} at position {}\", word, index);\n            break;\n        }\n    }\n\n    result\n}", "is_solved": false}
{"name": "mbpp_86_centered_hexagonal_number", "language": "rs", "prompt": "/// Write a function to find nth centered hexagonal number.\nfn centered_hexagonal_number(n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_86_centered_hexagonal_number.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "centered_hexagonal_number", "test": "\n\nfn main() {\n    let candidate = centered_hexagonal_number;\n    assert_eq!(candidate(10), 271);\n    assert_eq!(candidate(2), 7);\n    assert_eq!(candidate(9), 217);\n}\n", "solution": "/// Write a function to find nth centered hexagonal number.\nfn centered_hexagonal_number(n: isize) -> isize {\n    if n < 1 {\n        panic!(\"n must be a positive integer\");\n    }\n\n    let result = 3 * n * (n - 1) + 1;\n    result\n}", "is_solved": true}
{"name": "mbpp_130_max_occurrences", "language": "rs", "prompt": "/// Write a function to find the item with maximum frequency in a given vector.\nfn max_occurrences(nums: Vec<isize>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "max_occurrences", "test": "\n\nfn main() {\n    let candidate = max_occurrences;\n    assert_eq!(candidate(vec![2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]), 2);\n    assert_eq!(candidate(vec![2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]), 8);\n    assert_eq!(candidate(vec![10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]), 20);\n}\n", "solution": "/// Write a function to find the item with maximum frequency in a given vector.\nfn max_occurrences(nums: Vec<isize>) -> isize {\n    let mut occurrences = std::collections::HashMap::new();\n\n    for num in nums {\n        let count = occurrences.entry(num).or_insert(0);\n        *count += 1;\n    }\n\n    let mut max_occurrences = 0;\n    let mut max_num = 0;\n\n    for (num, count) in occurrences {\n        if count > max_occurrences {\n            max_occurrences = count;\n            max_num = num;\n        }\n    }\n\n    max_num\n}", "is_solved": true}
{"name": "mbpp_742_area_tetrahedron", "language": "rs", "prompt": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_742_area_tetrahedron.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "area_tetrahedron", "test": "\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n", "solution": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let sqrt_3 = (3.0 as f64).sqrt();\n    let area = (side * side) as f64 * sqrt_3 / 4.0;\n    area\n}", "is_solved": false}
{"name": "mbpp_610_remove_kth_element", "language": "rs", "prompt": "/// Write a rsthon function which takes a vector and returns a vector with the same elements, but the k'th element removed.\nfn remove_kth_element(list1: Vec<isize>, L: isize) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_610_remove_kth_element.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "remove_kth_element", "test": "\n\nfn main() {\n    let candidate = remove_kth_element;\n    assert_eq!(candidate(vec![1, 1, 2, 3, 4, 4, 5, 1], 3), vec![1, 1, 3, 4, 4, 5, 1]);\n    assert_eq!(candidate(vec![0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4], 4), vec![0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]);\n    assert_eq!(candidate(vec![10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10], 5), vec![10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10]);\n}\n", "solution": "/// Write a rsthon function which takes a vector and returns a vector with the same elements, but the k'th element removed.\nfn remove_kth_element(list1: Vec<isize>, L: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let k = L as usize;\n\n    for (index, &item) in list1.iter().enumerate() {\n        if index != k {\n            result.push(item);\n        }\n    }\n\n    result\n}", "is_solved": false}
{"name": "mbpp_394_check_distinct", "language": "rs", "prompt": "/// Write a function to check if given vector contains no duplicates.\nfn check_distinct(test_tup: Vec<isize>) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_394_check_distinct.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "check_distinct", "test": "\n\nfn main() {\n    let candidate = check_distinct;\n    assert_eq!(candidate(vec![1, 4, 5, 6, 1, 4]), false);\n    assert_eq!(candidate(vec![1, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![2, 3, 4, 5, 6]), true);\n}\n", "solution": "/// Write a function to check if given vector contains no duplicates.\nfn check_distinct(test_tup: Vec<isize>) -> bool {\n    let mut seen = std::collections::HashSet::new();\n\n    for &value in test_tup.iter() {\n        if seen.contains(&value) {\n            return false;\n        } else {\n            seen.insert(value);\n        }\n    }\n\n    true\n}", "is_solved": true}
{"name": "mbpp_793_last", "language": "rs", "prompt": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_793_last.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "last", "test": "\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n", "solution": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut result = -1;\n\n    while left <= right {\n        let mid = left + (right - left) / 2;\n\n        if arr[mid] == x {\n            result = mid as isize;\n            left = mid + 1;\n        } else if arr[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    result\n}", "is_solved": true}
{"name": "mbpp_728_sum_list", "language": "rs", "prompt": "/// Write a function takes as input two vectors [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfn sum_list(lst1: Vec<isize>, lst2: Vec<isize>) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_728_sum_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "sum_list", "test": "\n\nfn main() {\n    let candidate = sum_list;\n    assert_eq!(candidate(vec![10, 20, 30], vec![15, 25, 35]), vec![25, 45, 65]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![5, 6, 7]), vec![6, 8, 10]);\n    assert_eq!(candidate(vec![15, 20, 30], vec![15, 45, 75]), vec![30, 65, 105]);\n}\n", "solution": "/// Write a function takes as input two vectors [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfn sum_list(lst1: Vec<isize>, lst2: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n\n    for (a, b) in lst1.iter().zip(lst2.iter()) {\n        result.push(a + b);\n    }\n\n    result\n}", "is_solved": true}
{"name": "mbpp_566_sum_digits", "language": "rs", "prompt": "/// Write a function to get the sum of the digits of a non-negative integer.\nfn sum_digits(n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_566_sum_digits.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "sum_digits", "test": "\n\nfn main() {\n    let candidate = sum_digits;\n    assert_eq!(candidate(345), 12);\n    assert_eq!(candidate(12), 3);\n    assert_eq!(candidate(97), 16);\n}\n", "solution": "/// Write a function to get the sum of the digits of a non-negative integer.\nfn sum_digits(n: isize) -> isize {\n    assert!(n >= 0, \"Input must be a non-negative integer\");\n\n    let mut sum = 0;\n    let mut num = n;\n\n    while num > 0 {\n        sum += num % 10;\n        num /= 10;\n    }\n\n    sum\n}", "is_solved": true}
{"name": "mbpp_290_max_length", "language": "rs", "prompt": "/// Write a function to find the vector of maximum length in a vector of vectors.\nfn max_length(list1: Vec<Vec<isize>>) -> (isize, Vec<isize>) {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_290_max_length.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "max_length", "test": "\n\nfn main() {\n    let candidate = max_length;\n    assert_eq!(candidate(vec![vec![0], vec![1, 3], vec![5, 7], vec![9, 11], vec![13, 15, 17]]), (3, vec![13, 15, 17]));\n    assert_eq!(candidate(vec![vec![1], vec![5, 7], vec![10, 12, 14, 15]]), (4, vec![10, 12, 14, 15]));\n    assert_eq!(candidate(vec![vec![5], vec![15, 20, 25]]), (3, vec![15, 20, 25]));\n}\n", "solution": "/// Write a function to find the vector of maximum length in a vector of vectors.\nfn max_length(list1: Vec<Vec<isize>>) -> (isize, Vec<isize>) {\n    let mut max_length = 0;\n    let mut max_vector = Vec::new();\n\n    for vec in list1 {\n        let length = vec.len();\n        if length > max_length {\n            max_length = length;\n            max_vector = vec;\n        }\n    }\n\n    (max_length as isize, max_vector)\n}", "is_solved": true}
{"name": "mbpp_628_replace_spaces", "language": "rs", "prompt": "/// Write a function to replace all spaces in the given string with '%20'.\nfn replace_spaces(string: String) -> String {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_628_replace_spaces.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "replace_spaces", "test": "\n\nfn main() {\n    let candidate = replace_spaces;\n    assert_eq!(candidate(String::from(\"My Name is Dawood\")), String::from(\"My%20Name%20is%20Dawood\"));\n    assert_eq!(candidate(String::from(\"I am a Programmer\")), String::from(\"I%20am%20a%20Programmer\"));\n    assert_eq!(candidate(String::from(\"I love Coding\")), String::from(\"I%20love%20Coding\"));\n}\n", "solution": "/// Write a function to replace all spaces in the given string with '%20'.\nfn replace_spaces(string: String) -> String {\n    string.replace(\" \", \"%20\")\n}", "is_solved": true}
{"name": "mbpp_417_group_tuples", "language": "rs", "prompt": "/// Write a function to find common first element in given vector of vectors.\nfn group_tuples(Input: Vec<Vec<String>>) -> Vec<Vec<String>> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_417_group_tuples.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "group_tuples", "test": "\n\nfn main() {\n    let candidate = group_tuples;\n    assert_eq!(candidate(vec![vec![String::from(\"x\"), String::from(\"y\")], vec![String::from(\"x\"), String::from(\"z\")], vec![String::from(\"w\"), String::from(\"t\")]]), vec![vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")], vec![String::from(\"w\"), String::from(\"t\")]]);\n    assert_eq!(candidate(vec![vec![String::from(\"a\"), String::from(\"b\")], vec![String::from(\"a\"), String::from(\"c\")], vec![String::from(\"d\"), String::from(\"e\")]]), vec![vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")], vec![String::from(\"d\"), String::from(\"e\")]]);\n    assert_eq!(candidate(vec![vec![String::from(\"f\"), String::from(\"g\")], vec![String::from(\"f\"), String::from(\"g\")], vec![String::from(\"h\"), String::from(\"i\")]]), vec![vec![String::from(\"f\"), String::from(\"g\"), String::from(\"g\")], vec![String::from(\"h\"), String::from(\"i\")]]);\n}\n", "solution": "/// Write a function to find common first element in given vector of vectors.\nfn group_tuples(Input: Vec<Vec<String>>) -> Vec<Vec<String>> {\n    let mut result: Vec<Vec<String>> = Vec::new();\n\n    // Create a hashmap to store the first elements and their corresponding groups\n    let mut groups: HashMap<String, Vec<Vec<String>>> = HashMap::new();\n\n    // Iterate through the input vector of vectors\n    for group in Input {\n        if let Some(first_element) = group.get(0) {\n            // If the first element is already in the hashmap, add the group to its corresponding value\n            if let Some(existing_group) = groups.get_mut(first_element) {\n                existing_group.push(group);\n            } else {\n                // If the first element is not in the hashmap, create a new entry with the group\n                groups.insert(first_element.clone(), vec![group]);\n            }\n        }\n    }\n\n    // Iterate through the hashmap and add the groups to the result vector\n    for (_, group) in groups {\n        result.push(group);\n    }\n\n    result\n}", "is_solved": false}
{"name": "mbpp_286_max_sub_array_sum_repeated", "language": "rs", "prompt": "/// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nfn max_sub_array_sum_repeated(a: Vec<isize>, n: isize, k: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "max_sub_array_sum_repeated", "test": "\n\nfn main() {\n    let candidate = max_sub_array_sum_repeated;\n    assert_eq!(candidate(vec![10, 20, -30, -1], 4, 3), 30);\n    assert_eq!(candidate(vec![-1, 10, 20], 3, 2), 59);\n    assert_eq!(candidate(vec![-1, -2, -3], 3, 3), -1);\n}\n", "solution": "/// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nfn max_sub_array_sum_repeated(a: Vec<isize>, n: isize, k: isize) -> isize {\n    let mut max_so_far = a[0];\n    let mut max_ending_here = a[0];\n\n    for i in 1..(n * k) as usize {\n        let index = i % a.len();\n        max_ending_here = max(a[index], max_ending_here + a[index]);\n        max_so_far = max(max_so_far, max_ending_here);\n    }\n\n    max_so_far\n}", "is_solved": false}
{"name": "mbpp_66_pos_count", "language": "rs", "prompt": "/// Write a rsthon function to count the number of positive numbers in a vector.\nfn pos_count(list: Vec<isize>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_66_pos_count.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "pos_count", "test": "\n\nfn main() {\n    let candidate = pos_count;\n    assert_eq!(candidate(vec![1, -2, 3, -4]), 2);\n    assert_eq!(candidate(vec![3, 4, 5, -1]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), 4);\n}\n", "solution": "/// Write a rsthon function to count the number of positive numbers in a vector.\nfn pos_count(list: Vec<isize>) -> isize {\n    let mut count = 0;\n\n    for num in list {\n        if num > 0 {\n            count += 1;\n        }\n    }\n\n    count\n}", "is_solved": true}
{"name": "mbpp_450_extract_string", "language": "rs", "prompt": "/// Write a function to extract specified size of strings from a given vector of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "extract_string", "test": "\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n", "solution": "/// Write a function to extract specified size of strings from a given vector of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result = Vec::new();\n\n    for s in str {\n        if s.len() as isize == l {\n            result.push(s);\n        }\n    }\n\n    result\n}", "is_solved": true}
{"name": "mbpp_444_trim_tuple", "language": "rs", "prompt": "/// Write a function to trim each vector by k in the given vectors.\nfn trim_tuple(test_list: Vec<Vec<isize>>, K: isize) -> Vec<Vec<isize>> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_444_trim_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "trim_tuple", "test": "\n\nfn main() {\n    let candidate = trim_tuple;\n    assert_eq!(candidate(vec![vec![5, 3, 2, 1, 4], vec![3, 4, 9, 2, 1], vec![9, 1, 2, 3, 5], vec![4, 8, 2, 1, 7]], 2), vec![vec![2], vec![9], vec![2], vec![2]]);\n    assert_eq!(candidate(vec![vec![5, 3, 2, 1, 4], vec![3, 4, 9, 2, 1], vec![9, 1, 2, 3, 5], vec![4, 8, 2, 1, 7]], 1), vec![vec![3, 2, 1], vec![4, 9, 2], vec![1, 2, 3], vec![8, 2, 1]]);\n    assert_eq!(candidate(vec![vec![7, 8, 4, 9], vec![11, 8, 12, 4], vec![4, 1, 7, 8], vec![3, 6, 9, 7]], 1), vec![vec![8, 4], vec![8, 12], vec![1, 7], vec![6, 9]]);\n}\n", "solution": "/// Write a function to trim each vector by k in the given vectors.\nfn trim_tuple(test_list: Vec<Vec<isize>>, K: isize) -> Vec<Vec<isize>> {\n    test_list\n        .into_iter()\n        .map(|mut vec| {\n            if vec.len() > K as usize {\n                vec.truncate(K as usize);\n            }\n            vec\n        })\n        .collect()\n}", "is_solved": false}
{"name": "mbpp_439_multiple_to_single", "language": "rs", "prompt": "/// Write a function to join a vector of multiple integers into a single integer.\nfn multiple_to_single(L: Vec<isize>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_439_multiple_to_single.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "multiple_to_single", "test": "\n\nfn main() {\n    let candidate = multiple_to_single;\n    assert_eq!(candidate(vec![11, 33, 50]), 113350);\n    assert_eq!(candidate(vec![-1, 2, 3, 4, 5, 6]), -123456);\n    assert_eq!(candidate(vec![10, 15, 20, 25]), 10152025);\n}\n", "solution": "/// Write a function to join a vector of multiple integers into a single integer.\nfn multiple_to_single(L: Vec<isize>) -> isize {\n    let mut result = String::new();\n    for num in L {\n        result.push_str(&num.to_string());\n    }\n    result.parse::<isize>().unwrap()\n}", "is_solved": true}
{"name": "mbpp_162_sum_series", "language": "rs", "prompt": "/// Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nfn sum_series(n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_162_sum_series.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "sum_series", "test": "\n\nfn main() {\n    let candidate = sum_series;\n    assert_eq!(candidate(6), 12);\n    assert_eq!(candidate(10), 30);\n    assert_eq!(candidate(9), 25);\n}\n", "solution": "/// Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nfn sum_series(n: isize) -> isize {\n    let mut sum = 0;\n    let mut i = 0;\n\n    while n - 2 * i >= 0 {\n        sum += n - 2 * i;\n        i += 1;\n    }\n\n    sum\n}", "is_solved": true}
{"name": "mbpp_224_count_Set_Bits", "language": "rs", "prompt": "/// Write a rsthon function to count the number of set bits (binary digits with value 1) in a given number.\nfn count_Set_Bits(n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_224_count_Set_Bits.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "count_Set_Bits", "test": "\n\nfn main() {\n    let candidate = count_Set_Bits;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(4), 1);\n    assert_eq!(candidate(6), 2);\n}\n", "solution": "/// Write a rsthon function to count the number of set bits (binary digits with value 1) in a given number.\nfn count_Set_Bits(n: isize) -> isize {\n    let mut count = 0;\n    let mut num = n;\n\n    while num > 0 {\n        count += num & 1;\n        num >>= 1;\n    }\n\n    count as isize\n}", "is_solved": true}
{"name": "mbpp_309_maximum", "language": "rs", "prompt": "/// Write a rsthon function to find the maximum of two numbers.\nfn maximum(a: isize, b: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_309_maximum.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "maximum", "test": "\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(5, 10), 10);\n    assert_eq!(candidate(-1, -2), -1);\n    assert_eq!(candidate(9, 7), 9);\n}\n", "solution": "/// Write a rsthon function to find the maximum of two numbers.\nfn maximum(a: isize, b: isize) -> isize {\n    if a > b {\n        a\n    } else {\n        b\n    }\n}", "is_solved": true}
{"name": "mbpp_632_move_zero", "language": "rs", "prompt": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "move_zero", "test": "\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n", "solution": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut non_zero_elements: Vec<isize> = Vec::new();\n    let mut zero_count = 0;\n\n    for num in num_list {\n        if num == 0 {\n            zero_count += 1;\n        } else {\n            non_zero_elements.push(num);\n        }\n    }\n\n    for _ in 0..zero_count {\n        non_zero_elements.push(0);\n    }\n\n    non_zero_elements\n}", "is_solved": true}
{"name": "mbpp_168_frequency", "language": "rs", "prompt": "/// Write a function to count the number of occurrences of a number in a given vector.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_168_frequency.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "frequency", "test": "\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n", "solution": "/// Write a function to count the number of occurrences of a number in a given vector.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for &num in a.iter() {\n        if num == x {\n            count += 1;\n        }\n    }\n    count\n}", "is_solved": true}
{"name": "mbpp_749_sort_numeric_strings", "language": "rs", "prompt": "/// Write a function to sort a given vector of strings of numbers numerically. https://www.geeksforgeeks.org/rsthon-sort-numeric-strings-in-a-vector/\nfn sort_numeric_strings(nums_str: Vec<String>) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_749_sort_numeric_strings.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "sort_numeric_strings", "test": "\n\nfn main() {\n    let candidate = sort_numeric_strings;\n    assert_eq!(candidate(vec![String::from(\"4\"), String::from(\"12\"), String::from(\"45\"), String::from(\"7\"), String::from(\"0\"), String::from(\"100\"), String::from(\"200\"), String::from(\"-12\"), String::from(\"-500\")]), vec![-500, -12, 0, 4, 7, 12, 45, 100, 200]);\n    assert_eq!(candidate(vec![String::from(\"2\"), String::from(\"3\"), String::from(\"8\"), String::from(\"4\"), String::from(\"7\"), String::from(\"9\"), String::from(\"8\"), String::from(\"2\"), String::from(\"6\"), String::from(\"5\"), String::from(\"1\"), String::from(\"6\"), String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"6\"), String::from(\"9\"), String::from(\"1\"), String::from(\"2\")]), vec![1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]);\n    assert_eq!(candidate(vec![String::from(\"1\"), String::from(\"3\"), String::from(\"5\"), String::from(\"7\"), String::from(\"1\"), String::from(\"3\"), String::from(\"13\"), String::from(\"15\"), String::from(\"17\"), String::from(\"5\"), String::from(\"7 \"), String::from(\"9\"), String::from(\"1\"), String::from(\"11\")]), vec![1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]);\n}\n", "solution": "/// Write a function to sort a given vector of strings of numbers numerically. https://www.geeksforgeeks.org/rsthon-sort-numeric-strings-in-a-vector/\nfn sort_numeric_strings(nums_str: Vec<String>) -> Vec<isize> {\n    let mut nums: Vec<isize> = nums_str.into_iter().map(|s| s.parse::<isize>().unwrap()).collect();\n    nums.sort();\n    nums\n}", "is_solved": false}
{"name": "mbpp_97_frequency_lists", "language": "rs", "prompt": "use std::collections::HashMap;\n\n/// Write a function to find frequency of each element in a flattened vector of vectors, returned in a HashMap.\nfn frequency_lists(list1: Vec<Vec<isize>>) -> HashMap<isize, isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_97_frequency_lists.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "frequency_lists", "test": "\n\nfn main() {\n    let candidate = frequency_lists;\n    assert_eq!(candidate(vec![vec![1, 2, 3, 2], vec![4, 5, 6, 2], vec![7, 8, 9, 5]]), HashMap::from([(1, 1), (2, 3), (3, 1), (4, 1), (5, 2), (6, 1), (7, 1), (8, 1), (9, 1)]));\n    assert_eq!(candidate(vec![vec![1, 2, 3, 4], vec![5, 6, 7, 8], vec![9, 10, 11, 12]]), HashMap::from([(1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)]));\n    assert_eq!(candidate(vec![vec![20, 30, 40, 17], vec![18, 16, 14, 13], vec![10, 20, 30, 40]]), HashMap::from([(20, 2), (30, 2), (40, 2), (17, 1), (18, 1), (16, 1), (14, 1), (13, 1), (10, 1)]));\n}\n", "solution": "use std::collections::HashMap;\n\n/// Write a function to find frequency of each element in a flattened vector of vectors, returned in a HashMap.\nfn frequency_lists(list1: Vec<Vec<isize>>) -> HashMap<isize, isize> {\n    let mut frequency_map: HashMap<isize, isize> = HashMap::new();\n\n    for sublist in list1 {\n        for element in sublist {\n            let count = frequency_map.entry(element).or_insert(0);\n            *count += 1;\n        }\n    }\n\n    frequency_map\n}", "is_solved": true}
{"name": "mbpp_429_and_tuples", "language": "rs", "prompt": "/// Write a function to extract the elementwise and tuples from the given two tuples.\nfn and_tuples(test_tup1: (isize, isize, isize, isize), test_tup2: (isize, isize, isize, isize)) -> (isize, isize, isize, isize) {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_429_and_tuples.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "and_tuples", "test": "\n\nfn main() {\n    let candidate = and_tuples;\n    assert_eq!(candidate((10, 4, 6, 9), (5, 2, 3, 3)), (0, 0, 2, 1));\n    assert_eq!(candidate((1, 2, 3, 4), (5, 6, 7, 8)), (1, 2, 3, 0));\n    assert_eq!(candidate((8, 9, 11, 12), (7, 13, 14, 17)), (0, 9, 10, 0));\n}\n", "solution": "/// Write a function to extract the elementwise and tuples from the given two tuples.\nfn and_tuples(test_tup1: (isize, isize, isize, isize), test_tup2: (isize, isize, isize, isize)) -> (isize, isize, isize, isize) {\n    let and_tup1 = test_tup1.0 & test_tup2.0;\n    let and_tup2 = test_tup1.1 & test_tup2.1;\n    let and_tup3 = test_tup1.2 & test_tup2.2;\n    let and_tup4 = test_tup1.3 & test_tup2.3;\n\n    (and_tup1, and_tup2, and_tup3, and_tup4)\n}", "is_solved": true}
{"name": "mbpp_759_is_decimal", "language": "rs", "prompt": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "is_decimal", "test": "\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n", "solution": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    if num.is_empty() {\n        return false;\n    }\n\n    let mut decimal_point_count = 0;\n    let mut digits_after_decimal = 0;\n\n    for (i, c) in num.chars().enumerate() {\n        if c == '.' {\n            decimal_point_count += 1;\n            if decimal_point_count > 1 {\n                return false;\n            }\n        } else if !c.is_digit(10) {\n            return false;\n        } else if decimal_point_count == 1 {\n            digits_after_decimal += 1;\n            if digits_after_decimal > 2 {\n                return false;\n            }\n        }\n    }\n\n    decimal_point_count == 1 && digits_after_decimal == 2\n}", "is_solved": true}
{"name": "mbpp_599_sum_average", "language": "rs", "prompt": "/// Write a function to find sum and average of first n natural numbers.\nfn sum_average(number: isize) -> (isize, f64) {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_599_sum_average.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "sum_average", "test": "\n\nfn main() {\n    let candidate = sum_average;\n    assert_eq!(candidate(10), (55, 5.5));\n    assert_eq!(candidate(15), (120, 8.0));\n    assert_eq!(candidate(20), (210, 10.5));\n}\n", "solution": "/// Write a function to find sum and average of first n natural numbers.\nfn sum_average(number: isize) -> (isize, f64) {\n    let sum = (number * (number + 1)) / 2;\n    let average = sum as f64 / number as f64;\n    (sum, average)\n}", "is_solved": true}
{"name": "mbpp_804_is_product_even", "language": "rs", "prompt": "/// Write a function to check whether the product of numbers in a vector is even or not.\nfn is_product_even(arr: Vec<isize>) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_804_is_product_even.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "is_product_even", "test": "\n\nfn main() {\n    let candidate = is_product_even;\n    assert_eq!(candidate(vec![1, 2, 3]), true);\n    assert_eq!(candidate(vec![1, 2, 1, 4]), true);\n    assert_eq!(candidate(vec![1, 1]), false);\n}\n", "solution": "/// Write a function to check whether the product of numbers in a vector is even or not.\nfn is_product_even(arr: Vec<isize>) -> bool {\n    let mut product = 1;\n\n    for num in arr {\n        product *= num;\n    }\n\n    product % 2 == 0\n}", "is_solved": true}
{"name": "mbpp_103_eulerian_num", "language": "rs", "prompt": "/// Write a function to find the Eulerian number a(n, m).\nfn eulerian_num(n: isize, m: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_103_eulerian_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "eulerian_num", "test": "\n\nfn main() {\n    let candidate = eulerian_num;\n    assert_eq!(candidate(3, 1), 4);\n    assert_eq!(candidate(4, 1), 11);\n    assert_eq!(candidate(5, 3), 26);\n}\n", "solution": "/// Write a function to find the Eulerian number a(n, m).\nfn eulerian_num(n: isize, m: isize) -> isize {\n    if m == 0 || m == n - 1 {\n        return 1;\n    }\n    if m < 0 || m >= n {\n        return 0;\n    }\n    (1..=n).map(|k| (k * eulerian_num(n - 1, m - 1)) + ((n - k) * eulerian_num(n - 1, m))).sum()\n}", "is_solved": false}
{"name": "mbpp_635_heap_sort", "language": "rs", "prompt": "/// Write a function to sort the given vector.\nfn heap_sort(iterable: Vec<isize>) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "heap_sort", "test": "\n\nfn main() {\n    let candidate = heap_sort;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 9, 2, 4, 6, 8, 0]), vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![25, 35, 22, 85, 14, 65, 75, 25, 58]), vec![14, 22, 25, 25, 35, 58, 65, 75, 85]);\n    assert_eq!(candidate(vec![7, 1, 9, 5]), vec![1, 5, 7, 9]);\n}\n", "solution": "/// Write a function to sort the given vector.\nfn heap_sort(iterable: Vec<isize>) -> Vec<isize> {\n    let mut heap = iterable.clone();\n    let len = heap.len();\n\n    // Build the max heap\n    for i in (0..len / 2).rev() {\n        max_heapify(&mut heap, i, len);\n    }\n\n    // Extract elements from the heap\n    for i in (1..len).rev() {\n        heap.swap(0, i);\n        max_heapify(&mut heap, 0, i);\n    }\n\n    heap\n}\n\nfn max_heapify(heap: &mut Vec<isize>, i: usize, len: usize) {\n    let left = 2 * i + 1;\n    let right = 2 * i + 2;\n    let mut largest = i;\n\n    if left < len && heap[left] > heap[largest] {\n        largest = left;\n    }\n\n    if right < len && heap[right] > heap[largest] {\n        largest = right;\n    }\n\n    if largest != i {\n        heap.swap(i, largest);\n        max_heapify(heap, largest, len);\n    }\n}", "is_solved": true}
{"name": "mbpp_270_sum_even_and_even_index", "language": "rs", "prompt": "/// Write a rsthon function to find the sum of even numbers at even positions of a vector.\nfn sum_even_and_even_index(arr: Vec<isize>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_270_sum_even_and_even_index.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "sum_even_and_even_index", "test": "\n\nfn main() {\n    let candidate = sum_even_and_even_index;\n    assert_eq!(candidate(vec![5, 6, 12, 1, 18, 8]), 30);\n    assert_eq!(candidate(vec![3, 20, 17, 9, 2, 10, 18, 13, 6, 18]), 26);\n    assert_eq!(candidate(vec![5, 6, 12, 1]), 12);\n}\n", "solution": "/// Write a rsthon function to find the sum of even numbers at even positions of a vector.\nfn sum_even_and_even_index(arr: Vec<isize>) -> isize {\n    let mut sum = 0;\n\n    for (index, &value) in arr.iter().enumerate() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value;\n        }\n    }\n\n    sum\n}", "is_solved": true}
{"name": "mbpp_787_text_match_three", "language": "rs", "prompt": "/// Write a function that matches a string that has an a followed by three 'b'.\nfn text_match_three(text: String) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_787_text_match_three.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "text_match_three", "test": "\n\nfn main() {\n    let candidate = text_match_three;\n    assert_eq!(candidate(String::from(\"ac\")), false);\n    assert_eq!(candidate(String::from(\"dc\")), false);\n    assert_eq!(candidate(String::from(\"abbbba\")), true);\n    assert_eq!(candidate(String::from(\"caacabbbba\")), true);\n}\n", "solution": "/// Write a function that matches a string that has an a followed by three 'b'.\nfn text_match_three(text: String) -> bool {\n    let pattern = \"abb\";\n    let mut count = 0;\n\n    for (i, _) in text.char_indices() {\n        if i + pattern.len() <= text.len() && &text[i..i + pattern.len()] == pattern {\n            count += 1;\n        }\n    }\n\n    count == 3\n}", "is_solved": false}
{"name": "mbpp_765_is_polite", "language": "rs", "prompt": "/// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfn is_polite(n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_765_is_polite.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "is_polite", "test": "\n\nfn main() {\n    let candidate = is_polite;\n    assert_eq!(candidate(7), 11);\n    assert_eq!(candidate(4), 7);\n    assert_eq!(candidate(9), 13);\n}\n", "solution": "/// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfn is_polite(n: isize) -> isize {\n    let mut count = 0;\n\n    for i in 1..n {\n        let mut sum = 0;\n        for j in i..n {\n            sum += j;\n            if sum == n {\n                count += 1;\n                break;\n            }\n            if sum > n {\n                break;\n            }\n        }\n    }\n\n    if count > 0 {\n        return 1;\n    } else {\n        return 0;\n    }\n}", "is_solved": false}
{"name": "mbpp_459_remove_uppercase", "language": "rs", "prompt": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_459_remove_uppercase.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "remove_uppercase", "test": "\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n", "solution": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars()\n        .filter(|c| !c.is_uppercase())\n        .collect::<String>()\n}", "is_solved": true}
{"name": "mbpp_16_text_lowercase_underscore", "language": "rs", "prompt": "/// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nfn text_lowercase_underscore(text: String) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "text_lowercase_underscore", "test": "\n\nfn main() {\n    let candidate = text_lowercase_underscore;\n    assert_eq!(candidate(String::from(\"aab_cbbbc\")), true);\n    assert_eq!(candidate(String::from(\"aab_Abbbc\")), false);\n    assert_eq!(candidate(String::from(\"Aaab_abbbc\")), false);\n}\n", "solution": "/// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nfn text_lowercase_underscore(text: String) -> bool {\n    let pattern = Regex::new(r\"^[a-z]+(_[a-z]+)*$\").unwrap();\n    pattern.is_match(&text)\n}", "is_solved": false}
{"name": "mbpp_731_lateralsurface_cone", "language": "rs", "prompt": "/// Write a function to find the lateral surface area of a cone given radius r and the height h.\nfn lateralsurface_cone(r: isize, h: isize) -> f64 {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_731_lateralsurface_cone.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "lateralsurface_cone", "test": "\n\nfn main() {\n    let candidate = lateralsurface_cone;\n    assert_eq!(candidate(5, 12), 204.20352248333654);\n    assert_eq!(candidate(10, 15), 566.3586699569488);\n    assert_eq!(candidate(19, 17), 1521.8090132193388);\n}\n", "solution": "/// Write a function to find the lateral surface area of a cone given radius r and the height h.\nfn lateralsurface_cone(r: isize, h: isize) -> f64 {\n    let slant_height = ((r * r) + (h * h)) as f64;\n    let slant_height = slant_height.sqrt();\n    let lateral_surface_area = std::f64::consts::PI * r as f64 * slant_height;\n    lateral_surface_area\n}", "is_solved": true}
{"name": "mbpp_802_count_rotation", "language": "rs", "prompt": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "count_rotation", "test": "\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n", "solution": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n    let n = arr.len();\n    let mut min_index = 0;\n\n    for i in 1..n {\n        if arr[i] < arr[min_index] {\n            min_index = i;\n        }\n    }\n\n    min_index as isize\n}", "is_solved": false}
{"name": "mbpp_782_odd_length_sum", "language": "rs", "prompt": "/// Write a rsthon function to find the sum of all odd length subvectors. https://www.geeksforgeeks.org/sum-of-all-odd-length-subvectors/\nfn odd_length_sum(arr: Vec<isize>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_782_odd_length_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "odd_length_sum", "test": "\n\nfn main() {\n    let candidate = odd_length_sum;\n    assert_eq!(candidate(vec![1, 2, 4]), 14);\n    assert_eq!(candidate(vec![1, 2, 1, 2]), 15);\n    assert_eq!(candidate(vec![1, 7]), 8);\n}\n", "solution": "/// Write a rsthon function to find the sum of all odd length subvectors. https://www.geeksforgeeks.org/sum-of-all-odd-length-subvectors/\nfn odd_length_sum(arr: Vec<isize>) -> isize {\n    let n = arr.len();\n    let mut sum = 0;\n\n    for i in 0..n {\n        let left = i + 1;\n        let right = n - i;\n        let total_subvectors = left * right;\n        let odd_subvectors = (total_subvectors + 1) / 2;\n        sum += odd_subvectors * arr[i];\n    }\n\n    sum\n}", "is_solved": false}
{"name": "mbpp_470_add_pairwise", "language": "rs", "prompt": "/// Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nfn add_pairwise(test_tup: (isize, isize, isize, isize, isize)) -> (isize, isize, isize, isize) {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_470_add_pairwise.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "add_pairwise", "test": "\n\nfn main() {\n    let candidate = add_pairwise;\n    assert_eq!(candidate((1, 5, 7, 8, 10)), (6, 12, 15, 18));\n    assert_eq!(candidate((2, 6, 8, 9, 11)), (8, 14, 17, 20));\n    assert_eq!(candidate((3, 7, 9, 10, 12)), (10, 16, 19, 22));\n}\n", "solution": "/// Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nfn add_pairwise(test_tup: (isize, isize, isize, isize, isize)) -> (isize, isize, isize, isize) {\n    let (a, b, c, d, e) = test_tup;\n    let sum1 = a + b;\n    let sum2 = b + c;\n    let sum3 = c + d;\n    let sum4 = d + e;\n\n    (sum1, sum2, sum3, sum4)\n}", "is_solved": true}
{"name": "mbpp_17_square_perimeter", "language": "rs", "prompt": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_17_square_perimeter.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "square_perimeter", "test": "\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n", "solution": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    4 * a\n}", "is_solved": true}
{"name": "mbpp_228_all_Bits_Set_In_The_Given_Range", "language": "rs", "prompt": "/// Write a rsthon function to check whether all the bits are unset in the given range or not.\nfn all_Bits_Set_In_The_Given_Range(n: isize, l: isize, r: isize) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_228_all_Bits_Set_In_The_Given_Range.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "all_Bits_Set_In_The_Given_Range", "test": "\n\nfn main() {\n    let candidate = all_Bits_Set_In_The_Given_Range;\n    assert_eq!(candidate(4, 1, 2), true);\n    assert_eq!(candidate(17, 2, 4), true);\n    assert_eq!(candidate(39, 4, 6), false);\n}\n", "solution": "/// Write a rsthon function to check whether all the bits are unset in the given range or not.\nfn all_Bits_Set_In_The_Given_Range(n: isize, l: isize, r: isize) -> bool {\n    for i in l..=r {\n        if (n & (1 << i)) == 0 {\n            return false;\n        }\n    }\n    true\n}", "is_solved": false}
{"name": "mbpp_447_cube_nums", "language": "rs", "prompt": "/// Write a function to find cubes of individual elements in a vector.\nfn cube_nums(nums: Vec<isize>) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_447_cube_nums.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "cube_nums", "test": "\n\nfn main() {\n    let candidate = cube_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15]), vec![1728, 3375]);\n}\n", "solution": "/// Write a function to find cubes of individual elements in a vector.\nfn cube_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.into_iter().map(|num| num * num * num).collect()\n}", "is_solved": true}
{"name": "mbpp_261_division_elements", "language": "rs", "prompt": "/// Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nfn division_elements(test_tup1: (isize, isize, isize, isize), test_tup2: (isize, isize, isize, isize)) -> (isize, isize, isize, isize) {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_261_division_elements.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "division_elements", "test": "\n\nfn main() {\n    let candidate = division_elements;\n    assert_eq!(candidate((10, 4, 6, 9), (5, 2, 3, 3)), (2, 2, 2, 3));\n    assert_eq!(candidate((12, 6, 8, 16), (6, 3, 4, 4)), (2, 2, 2, 4));\n    assert_eq!(candidate((20, 14, 36, 18), (5, 7, 6, 9)), (4, 2, 6, 2));\n}\n", "solution": "/// Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nfn division_elements(test_tup1: (isize, isize, isize, isize), test_tup2: (isize, isize, isize, isize)) -> (isize, isize, isize, isize) {\n    let a = test_tup1.0 / test_tup2.0;\n    let b = test_tup1.1 / test_tup2.1;\n    let c = test_tup1.2 / test_tup2.2;\n    let d = test_tup1.3 / test_tup2.3;\n\n    (a, b, c, d)\n}", "is_solved": true}
{"name": "mbpp_581_surface_Area", "language": "rs", "prompt": "/// Write a rsthon function to find the surface area of a square rsramid with a given base edge and height.\nfn surface_Area(b: isize, s: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_581_surface_Area.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "surface_Area", "test": "\n\nfn main() {\n    let candidate = surface_Area;\n    assert_eq!(candidate(3, 4), 33);\n    assert_eq!(candidate(4, 5), 56);\n    assert_eq!(candidate(1, 2), 5);\n}\n", "solution": "/// Write a rsthon function to find the surface area of a square rsramid with a given base edge and height.\nfn surface_Area(b: isize, s: isize) -> isize {\n    let base_area = b * b;\n    let lateral_area = 2 * b * s;\n    let surface_area = base_area + lateral_area;\n\n    surface_area\n}", "is_solved": true}
{"name": "mbpp_283_validate", "language": "rs", "prompt": "/// Write a rsthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfn validate(n: isize) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "validate", "test": "\n\nfn main() {\n    let candidate = validate;\n    assert_eq!(candidate(1234), true);\n    assert_eq!(candidate(51241), false);\n    assert_eq!(candidate(321), true);\n}\n", "solution": "/// Write a rsthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfn validate(n: isize) -> bool {\n    let mut frequency = vec![0; 10];\n\n    for c in n.to_string().chars() {\n        let digit = c.to_digit(10).unwrap() as usize;\n        frequency[digit] += 1;\n    }\n\n    for (digit, count) in frequency.iter().enumerate() {\n        if *count > digit {\n            return false;\n        }\n    }\n\n    true\n}", "is_solved": true}
{"name": "mbpp_101_kth_element", "language": "rs", "prompt": "/// Write a function to find the kth element in the given vector using 1-based indexing.\nfn kth_element(arr: Vec<isize>, k: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_101_kth_element.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "kth_element", "test": "\n\nfn main() {\n    let candidate = kth_element;\n    assert_eq!(candidate(vec![12, 3, 5, 7, 19], 2), 3);\n    assert_eq!(candidate(vec![17, 24, 8, 23], 3), 8);\n    assert_eq!(candidate(vec![16, 21, 25, 36, 4], 4), 36);\n}\n", "solution": "/// Write a function to find the kth element in the given vector using 1-based indexing.\nfn kth_element(arr: Vec<isize>, k: isize) -> isize {\n    if k > 0 && k as usize <= arr.len() {\n        arr[(k - 1) as usize]\n    } else {\n        panic!(\"Index out of bounds: The given index is not within the range of the vector.\");\n    }\n}", "is_solved": true}
{"name": "mbpp_461_upper_ctr", "language": "rs", "prompt": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_461_upper_ctr.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "upper_ctr", "test": "\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n", "solution": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut count = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            count += 1;\n        }\n    }\n    count\n}", "is_solved": false}
{"name": "mbpp_593_removezero_ip", "language": "rs", "prompt": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_593_removezero_ip.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "removezero_ip", "test": "\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n", "solution": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let octets = ip.split('.').collect::<Vec<&str>>();\n\n    for (i, octet) in octets.iter().enumerate() {\n        let trimmed_octet = octet.trim_start_matches('0');\n        let cleaned_octet = if trimmed_octet.is_empty() { \"0\" } else { trimmed_octet };\n\n        if i != 0 {\n            result.push('.');\n        }\n        result.push_str(cleaned_octet);\n    }\n\n    result\n}", "is_solved": true}
{"name": "mbpp_788_new_tuple", "language": "rs", "prompt": "/// Write a function to create a new tuple from the given string and vector.\nfn new_tuple(test_list: Vec<String>, test_str: String) -> (String, String, String) {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_788_new_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "new_tuple", "test": "\n\nfn main() {\n    let candidate = new_tuple;\n    assert_eq!(candidate(vec![String::from(\"WEB\"), String::from(\"is\")], String::from(\"best\")), (String::from(\"WEB\"), String::from(\"is\"), String::from(\"best\")));\n    assert_eq!(candidate(vec![String::from(\"We\"), String::from(\"are\")], String::from(\"Developers\")), (String::from(\"We\"), String::from(\"are\"), String::from(\"Developers\")));\n    assert_eq!(candidate(vec![String::from(\"Part\"), String::from(\"is\")], String::from(\"Wrong\")), (String::from(\"Part\"), String::from(\"is\"), String::from(\"Wrong\")));\n}\n", "solution": "/// Write a function to create a new tuple from the given string and vector.\nfn new_tuple(test_list: Vec<String>, test_str: String) -> (String, String, String) {\n    if test_list.len() >= 2 {\n        let first = test_list[0].clone();\n        let second = test_list[1].clone();\n        (first, second, test_str)\n    } else {\n        panic!(\"The input vector must have at least 2 elements.\");\n    }\n}", "is_solved": true}
{"name": "mbpp_777_find_sum", "language": "rs", "prompt": "/// Write a rsthon function to find the sum of non-repeated elements in a given vector.\nfn find_sum(arr: Vec<isize>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_777_find_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "find_sum", "test": "\n\nfn main() {\n    let candidate = find_sum;\n    assert_eq!(candidate(vec![1, 2, 3, 1, 1, 4, 5, 6]), 21);\n    assert_eq!(candidate(vec![1, 10, 9, 4, 2, 10, 10, 45, 4]), 71);\n    assert_eq!(candidate(vec![12, 10, 9, 45, 2, 10, 10, 45, 10]), 78);\n}\n", "solution": "/// Write a rsthon function to find the sum of non-repeated elements in a given vector.\nfn find_sum(arr: Vec<isize>) -> isize {\n    let mut unique_elements = Vec::new();\n\n    for &num in arr.iter() {\n        if unique_elements.contains(&num) {\n            unique_elements.retain(|&x| x != num);\n        } else {\n            unique_elements.push(num);\n        }\n    }\n\n    unique_elements.iter().sum()\n}", "is_solved": false}
{"name": "mbpp_586_split_Arr", "language": "rs", "prompt": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "split_Arr", "test": "\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n", "solution": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let len = l.len();\n\n    for i in (n as usize)..len {\n        result.push(l[i]);\n    }\n\n    for i in 0..(n as usize) {\n        result.push(l[i]);\n    }\n\n    result\n}", "is_solved": true}
{"name": "mbpp_104_sort_sublists", "language": "rs", "prompt": "/// Write a function to sort each subvector of strings in a given vector of vectors.\nfn sort_sublists(input_list: Vec<Vec<String>>) -> Vec<Vec<String>> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_104_sort_sublists.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "sort_sublists", "test": "\n\nfn main() {\n    let candidate = sort_sublists;\n    assert_eq!(candidate(vec![vec![String::from(\"green\"), String::from(\"orange\")], vec![String::from(\"black\"), String::from(\"white\")], vec![String::from(\"white\"), String::from(\"black\"), String::from(\"orange\")]]), vec![vec![String::from(\"green\"), String::from(\"orange\")], vec![String::from(\"black\"), String::from(\"white\")], vec![String::from(\"black\"), String::from(\"orange\"), String::from(\"white\")]]);\n    assert_eq!(candidate(vec![vec![String::from(\" red \"), String::from(\"green\")], vec![String::from(\"blue \"), String::from(\" black\")], vec![String::from(\" orange\"), String::from(\"brown\")]]), vec![vec![String::from(\" red \"), String::from(\"green\")], vec![String::from(\" black\"), String::from(\"blue \")], vec![String::from(\" orange\"), String::from(\"brown\")]]);\n    assert_eq!(candidate(vec![vec![String::from(\"zilver\"), String::from(\"gold\")], vec![String::from(\"magnesium\"), String::from(\"aluminium\")], vec![String::from(\"steel\"), String::from(\"bronze\")]]), vec![vec![String::from(\"gold\"), String::from(\"zilver\")], vec![String::from(\"aluminium\"), String::from(\"magnesium\")], vec![String::from(\"bronze\"), String::from(\"steel\")]]);\n}\n", "solution": "/// Write a function to sort each subvector of strings in a given vector of vectors.\nfn sort_sublists(input_list: Vec<Vec<String>>) -> Vec<Vec<String>> {\n    let mut sorted_list = input_list.clone();\n    for sublist in sorted_list.iter_mut() {\n        sublist.sort();\n    }\n    sorted_list\n}", "is_solved": true}
{"name": "mbpp_472_check_Consecutive", "language": "rs", "prompt": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "check_Consecutive", "test": "\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n", "solution": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    if l.len() < 2 {\n        return false;\n    }\n\n    let mut sorted_l = l.clone();\n    sorted_l.sort();\n\n    for i in 1..sorted_l.len() {\n        if sorted_l[i] - sorted_l[i - 1] != 1 {\n            return false;\n        }\n    }\n\n    true\n}", "is_solved": true}
{"name": "mbpp_310_string_to_tuple", "language": "rs", "prompt": "/// Write a function to convert a given string to a vector of characters.\nfn string_to_tuple(str1: String) -> Vec<String> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_310_string_to_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "string_to_tuple", "test": "\n\nfn main() {\n    let candidate = string_to_tuple;\n    assert_eq!(candidate(String::from(\"python 3.0\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\"), String::from(\"3\"), String::from(\".\"), String::from(\"0\")]);\n    assert_eq!(candidate(String::from(\"item1\")), vec![String::from(\"i\"), String::from(\"t\"), String::from(\"e\"), String::from(\"m\"), String::from(\"1\")]);\n    assert_eq!(candidate(String::from(\"15.10\")), vec![String::from(\"1\"), String::from(\"5\"), String::from(\".\"), String::from(\"1\"), String::from(\"0\")]);\n}\n", "solution": "/// Write a function to convert a given string to a vector of characters.\nfn string_to_tuple(str1: String) -> Vec<String> {\n    str1.chars().map(|c| c.to_string()).collect()\n}", "is_solved": false}
{"name": "mbpp_266_lateralsurface_cube", "language": "rs", "prompt": "/// Write a function to find the lateral surface area of a cube given its side length.\nfn lateralsurface_cube(l: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_266_lateralsurface_cube.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "lateralsurface_cube", "test": "\n\nfn main() {\n    let candidate = lateralsurface_cube;\n    assert_eq!(candidate(5), 100);\n    assert_eq!(candidate(9), 324);\n    assert_eq!(candidate(10), 400);\n}\n", "solution": "/// Write a function to find the lateral surface area of a cube given its side length.\nfn lateralsurface_cube(l: isize) -> isize {\n    let surface_area = 4 * l * l;\n    surface_area\n}", "is_solved": true}
{"name": "mbpp_271_even_Power_Sum", "language": "rs", "prompt": "/// Write a rsthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nfn even_Power_Sum(n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_271_even_Power_Sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "even_Power_Sum", "test": "\n\nfn main() {\n    let candidate = even_Power_Sum;\n    assert_eq!(candidate(2), 1056);\n    assert_eq!(candidate(3), 8832);\n    assert_eq!(candidate(1), 32);\n}\n", "solution": "/// Write a rsthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nfn even_Power_Sum(n: isize) -> isize {\n    let mut sum = 0;\n    for i in 1..=n {\n        let even_num = i * 2;\n        let power_five = even_num.pow(5);\n        sum += power_five;\n    }\n    sum\n}", "is_solved": true}
{"name": "mbpp_238_number_of_substrings", "language": "rs", "prompt": "/// Write a rsthon function to count the number of non-empty substrings of a given string.\nfn number_of_substrings(str: String) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_238_number_of_substrings.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "number_of_substrings", "test": "\n\nfn main() {\n    let candidate = number_of_substrings;\n    assert_eq!(candidate(String::from(\"abc\")), 6);\n    assert_eq!(candidate(String::from(\"abcd\")), 10);\n    assert_eq!(candidate(String::from(\"abcde\")), 15);\n}\n", "solution": "/// Write a rsthon function to count the number of non-empty substrings of a given string.\nfn number_of_substrings(str: String) -> isize {\n    let n = str.len() as isize;\n    (n * (n + 1)) / 2\n}", "is_solved": true}
{"name": "mbpp_592_sum_Of_product", "language": "rs", "prompt": "/// Write a rsthon function to find the sum of the product of consecutive binomial co-efficients.\nfn sum_Of_product(n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_592_sum_Of_product.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "sum_Of_product", "test": "\n\nfn main() {\n    let candidate = sum_Of_product;\n    assert_eq!(candidate(3), 15);\n    assert_eq!(candidate(4), 56);\n    assert_eq!(candidate(1), 1);\n}\n", "solution": "/// Write a rsthon function to find the sum of the product of consecutive binomial co-efficients.\nfn sum_Of_product(n: isize) -> isize {\n    let mut sum = 0;\n    for i in 0..n {\n        let binomial_coefficient = binomial(n, i) * binomial(n, i + 1);\n        sum += binomial_coefficient;\n    }\n    sum\n}\n\nfn binomial(n: isize, k: isize) -> isize {\n    if k == 0 || k == n {\n        1\n    } else {\n        binomial(n - 1, k - 1) + binomial(n - 1, k)\n    }\n}", "is_solved": true}
{"name": "mbpp_74_is_samepatterns", "language": "rs", "prompt": "/// Write a function to check whether it follows the sequence given in the patterns vector.\nfn is_samepatterns(colors: Vec<String>, patterns: Vec<String>) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_74_is_samepatterns.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "is_samepatterns", "test": "\n\nfn main() {\n    let candidate = is_samepatterns;\n    assert_eq!(candidate(vec![String::from(\"red\"), String::from(\"green\"), String::from(\"green\")], vec![String::from(\"a\"), String::from(\"b\"), String::from(\"b\")]), true);\n    assert_eq!(candidate(vec![String::from(\"red\"), String::from(\"green\"), String::from(\"greenn\")], vec![String::from(\"a\"), String::from(\"b\"), String::from(\"b\")]), false);\n    assert_eq!(candidate(vec![String::from(\"red\"), String::from(\"green\"), String::from(\"greenn\")], vec![String::from(\"a\"), String::from(\"b\")]), false);\n}\n", "solution": "/// Write a function to check whether it follows the sequence given in the patterns vector.\nfn is_samepatterns(colors: Vec<String>, patterns: Vec<String>) -> bool {\n    if colors.len() != patterns.len() {\n        return false;\n    }\n\n    let mut color_map = std::collections::HashMap::new();\n    let mut pattern_map = std::collections::HashMap::new();\n\n    for (color, pattern) in colors.iter().zip(patterns.iter()) {\n        if !color_map.contains_key(color) {\n            color_map.insert(color.clone(), pattern.clone());\n        } else if color_map[color] != *pattern {\n            return false;\n        }\n\n        if !pattern_map.contains_key(pattern) {\n            pattern_map.insert(pattern.clone(), color.clone());\n        } else if pattern_map[pattern] != *color {\n            return false;\n        }\n    }\n\n    true\n}", "is_solved": true}
{"name": "mbpp_415_max_Product", "language": "rs", "prompt": "/// Write a rsthon function to find a pair with highest product from a given vector of integers.\nfn max_Product(arr: Vec<isize>) -> (isize, isize) {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_415_max_Product.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "max_Product", "test": "\n\nfn main() {\n    let candidate = max_Product;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 7, 0, 8, 4]), (7, 8));\n    assert_eq!(candidate(vec![0, -1, -2, -4, 5, 0, -6]), (-4, -6));\n    assert_eq!(candidate(vec![1, 2, 3]), (2, 3));\n}\n", "solution": "/// Write a rsthon function to find a pair with highest product from a given vector of integers.\nfn max_Product(arr: Vec<isize>) -> (isize, isize) {\n    let mut max_product = std::isize::MIN;\n    let mut pair = (0, 0);\n\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            let product = arr[i] * arr[j];\n            if product > max_product {\n                max_product = product;\n                pair = (arr[i], arr[j]);\n            }\n        }\n    }\n\n    pair\n}", "is_solved": true}
{"name": "mbpp_781_count_divisors", "language": "rs", "prompt": "/// Write a rsthon function to check whether the count of divisors is even. https://www.w3resource.com/rsthon-exercises/basic/rsthon-basic-1-exercise-24.php\nfn count_divisors(n: isize) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_781_count_divisors.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "count_divisors", "test": "\n\nfn main() {\n    let candidate = count_divisors;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(100), false);\n    assert_eq!(candidate(125), true);\n}\n", "solution": "/// Write a rsthon function to check whether the count of divisors is even. https://www.w3resource.com/rsthon-exercises/basic/rsthon-basic-1-exercise-24.php\nfn count_divisors(n: isize) -> bool {\n    let mut count = 0;\n\n    for i in 1..=(n as f64).sqrt() as isize {\n        if n % i == 0 {\n            if n / i == i {\n                count += 1;\n            } else {\n                count += 2;\n            }\n        }\n    }\n\n    count % 2 == 0\n}", "is_solved": true}
{"name": "mbpp_441_surfacearea_cube", "language": "rs", "prompt": "/// Write a function to find the surface area of a cube of a given size.\nfn surfacearea_cube(l: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_441_surfacearea_cube.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "surfacearea_cube", "test": "\n\nfn main() {\n    let candidate = surfacearea_cube;\n    assert_eq!(candidate(5), 150);\n    assert_eq!(candidate(3), 54);\n    assert_eq!(candidate(10), 600);\n}\n", "solution": "/// Write a function to find the surface area of a cube of a given size.\nfn surfacearea_cube(l: isize) -> isize {\n    let area = 6 * l * l;\n    area\n}", "is_solved": true}
{"name": "mbpp_396_check_char", "language": "rs", "prompt": "/// Write a function to check whether the given string starts and ends with the same character or not.\nfn check_char(string: String) -> String {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_396_check_char.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "check_char", "test": "\n\nfn main() {\n    let candidate = check_char;\n    assert_eq!(candidate(String::from(\"abba\")), String::from(\"Valid\"));\n    assert_eq!(candidate(String::from(\"a\")), String::from(\"Valid\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"Invalid\"));\n}\n", "solution": "/// Write a function to check whether the given string starts and ends with the same character or not.\nfn check_char(string: String) -> String {\n    if string.is_empty() {\n        return \"Empty string\".to_string();\n    }\n\n    let first_char = string.chars().next().unwrap();\n    let last_char = string.chars().last().unwrap();\n\n    if first_char == last_char {\n        \"True\".to_string()\n    } else {\n        \"False\".to_string()\n    }\n}", "is_solved": false}
{"name": "mbpp_757_count_reverse_pairs", "language": "rs", "prompt": "/// Write a function to count the pairs of reverse strings in the given string vector. https://www.geeksforgeeks.org/rsthon-program-to-count-the-pairs-of-reverse-strings/\nfn count_reverse_pairs(test_list: Vec<String>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_757_count_reverse_pairs.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "count_reverse_pairs", "test": "\n\nfn main() {\n    let candidate = count_reverse_pairs;\n    assert_eq!(candidate(vec![String::from(\"julia\"), String::from(\"best\"), String::from(\"tseb\"), String::from(\"for\"), String::from(\"ailuj\")]), 2);\n    assert_eq!(candidate(vec![String::from(\"geeks\"), String::from(\"best\"), String::from(\"for\"), String::from(\"skeeg\")]), 1);\n    assert_eq!(candidate(vec![String::from(\"makes\"), String::from(\"best\"), String::from(\"sekam\"), String::from(\"for\"), String::from(\"rof\")]), 2);\n}\n", "solution": "/// Write a function to count the pairs of reverse strings in the given string vector. https://www.geeksforgeeks.org/rsthon-program-to-count-the-pairs-of-reverse-strings/\nfn count_reverse_pairs(test_list: Vec<String>) -> isize {\n    let mut count = 0;\n\n    for i in 0..test_list.len() {\n        for j in i + 1..test_list.len() {\n            if test_list[i].chars().rev().collect::<String>() == test_list[j] {\n                count += 1;\n            }\n        }\n    }\n\n    count\n}", "is_solved": true}
{"name": "mbpp_75_find_tuples", "language": "rs", "prompt": "/// Write a function to find tuples which have all elements divisible by k from the given vector of tuples.\nfn find_tuples(test_list: Vec<(isize, isize, isize)>, K: isize) -> Vec<(isize, isize, isize)> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_75_find_tuples.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "find_tuples", "test": "\n\nfn main() {\n    let candidate = find_tuples;\n    assert_eq!(candidate(vec![(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6), vec![(6, 24, 12)]);\n    assert_eq!(candidate(vec![(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5), vec![(5, 25, 30)]);\n    assert_eq!(candidate(vec![(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4), vec![(8, 16, 4)]);\n}\n", "solution": "/// Write a function to find tuples which have all elements divisible by k from the given vector of tuples.\nfn find_tuples(test_list: Vec<(isize, isize, isize)>, K: isize) -> Vec<(isize, isize, isize)> {\n    let mut result: Vec<(isize, isize, isize)> = Vec::new();\n\n    for tuple in test_list.iter() {\n        if tuple.0 % K == 0 && tuple.1 % K == 0 && tuple.2 % K == 0 {\n            result.push(*tuple);\n        }\n    }\n\n    result\n}", "is_solved": true}
{"name": "mbpp_785_tuple_str_int", "language": "rs", "prompt": "/// Write a function to convert tuple string to integer tuple.\nfn tuple_str_int(test_str: String) -> (isize, isize, isize) {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_785_tuple_str_int.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "tuple_str_int", "test": "\n\nfn main() {\n    let candidate = tuple_str_int;\n    assert_eq!(candidate(String::from(\"(7, 8, 9)\")), (7, 8, 9));\n    assert_eq!(candidate(String::from(\"(1, 2, 3)\")), (1, 2, 3));\n    assert_eq!(candidate(String::from(\"(4, 5, 6)\")), (4, 5, 6));\n    assert_eq!(candidate(String::from(\"(7, 81, 19)\")), (7, 81, 19));\n}\n", "solution": "/// Write a function to convert tuple string to integer tuple.\nfn tuple_str_int(test_str: String) -> (isize, isize, isize) {\n    let mut numbers = test_str\n        .trim_matches(|c| c == '(' || c == ')')\n        .split(',')\n        .map(|x| x.trim().parse::<isize>())\n        .collect::<Result<Vec<isize>, _>>()\n        .unwrap_or_default();\n\n    if numbers.len() == 3 {\n        (numbers[0], numbers[1], numbers[2])\n    } else {\n        (0, 0, 0)\n    }\n}", "is_solved": true}
{"name": "mbpp_776_count_vowels", "language": "rs", "prompt": "/// Write a function to count those characters which have vowels as their neighbors in the given string.\nfn count_vowels(test_str: String) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_776_count_vowels.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "count_vowels", "test": "\n\nfn main() {\n    let candidate = count_vowels;\n    assert_eq!(candidate(String::from(\"bestinstareels\")), 7);\n    assert_eq!(candidate(String::from(\"partofthejourneyistheend\")), 12);\n    assert_eq!(candidate(String::from(\"amazonprime\")), 5);\n}\n", "solution": "/// Write a function to count those characters which have vowels as their neighbors in the given string.\nfn count_vowels(test_str: String) -> isize {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut count = 0;\n    let chars: Vec<char> = test_str.chars().collect();\n\n    for i in 1..chars.len() - 1 {\n        if vowels.contains(&chars[i - 1]) && vowels.contains(&chars[i + 1]) {\n            count += 1;\n        }\n    }\n\n    count\n}", "is_solved": false}
{"name": "mbpp_277_dict_filter", "language": "rs", "prompt": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_277_dict_filter.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "dict_filter", "test": "\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n", "solution": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    dict.into_iter()\n        .filter(|(_, value)| *value >= n)\n        .collect()\n}", "is_solved": true}
{"name": "mbpp_468_max_product", "language": "rs", "prompt": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "max_product", "test": "\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n", "solution": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n    if arr.is_empty() {\n        return 0;\n    }\n\n    let n = arr.len();\n    let mut dp = vec![0; n];\n    dp[0] = arr[0];\n\n    for i in 1..n {\n        dp[i] = arr[i];\n        for j in 0..i {\n            if arr[i] > arr[j] {\n                dp[i] = dp[i].max(dp[j] * arr[i]);\n            }\n        }\n    }\n\n    dp.into_iter().max().unwrap_or(0)\n}", "is_solved": false}
{"name": "mbpp_279_is_num_decagonal", "language": "rs", "prompt": "/// Write a function to find the nth decagonal number.\nfn is_num_decagonal(n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "is_num_decagonal", "test": "\n\nfn main() {\n    let candidate = is_num_decagonal;\n    assert_eq!(candidate(3), 27);\n    assert_eq!(candidate(7), 175);\n    assert_eq!(candidate(10), 370);\n}\n", "solution": "/// Write a function to find the nth decagonal number.\nfn is_num_decagonal(n: isize) -> isize {\n    if n <= 0 {\n        return 0;\n    }\n    let decagonal_number = n * (4 * n - 3);\n    decagonal_number\n}", "is_solved": true}
{"name": "mbpp_3_is_not_prime", "language": "rs", "prompt": "/// Write a rsthon function to identify non-prime numbers.\nfn is_not_prime(n: isize) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_3_is_not_prime.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "is_not_prime", "test": "\n\nfn main() {\n    let candidate = is_not_prime;\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(35), true);\n    assert_eq!(candidate(37), false);\n}\n", "solution": "/// Write a rsthon function to identify non-prime numbers.\nfn is_not_prime(n: isize) -> bool {\n    if n <= 1 {\n        return true;\n    }\n\n    for i in 2..((n as f64).sqrt() as isize + 1) {\n        if n % i == 0 {\n            return true;\n        }\n    }\n\n    false\n}", "is_solved": true}
{"name": "mbpp_88_freq_count", "language": "rs", "prompt": "use std::collections::HashMap;\n\n/// Write a function to get the frequency of all the elements in a vector, returned as a HashMap.\nfn freq_count(list1: Vec<isize>) -> HashMap<isize, isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_88_freq_count.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "freq_count", "test": "\n\nfn main() {\n    let candidate = freq_count;\n    assert_eq!(candidate(vec![10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]), HashMap::from([(10, 4), (20, 4), (40, 2), (50, 2), (30, 1)]));\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]), HashMap::from([(1, 3), (2, 2), (3, 3), (4, 3)]));\n    assert_eq!(candidate(vec![5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]), HashMap::from([(10, 1), (5, 3), (6, 2), (7, 2), (4, 2), (9, 2)]));\n}\n", "solution": "use std::collections::HashMap;\n\n/// Write a function to get the frequency of all the elements in a vector, returned as a HashMap.\nfn freq_count(list1: Vec<isize>) -> HashMap<isize, isize> {\n    let mut frequency_map: HashMap<isize, isize> = HashMap::new();\n\n    for element in list1 {\n        let count = frequency_map.entry(element).or_insert(0);\n        *count += 1;\n    }\n\n    frequency_map\n}", "is_solved": true}
{"name": "mbpp_259_maximize_elements", "language": "rs", "prompt": "/// Write a function to maximize the given two vectors.\nfn maximize_elements(test_tup1: Vec<Vec<isize>>, test_tup2: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_259_maximize_elements.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "maximize_elements", "test": "\n\nfn main() {\n    let candidate = maximize_elements;\n    assert_eq!(candidate(vec![vec![1, 3], vec![4, 5], vec![2, 9], vec![1, 10]], vec![vec![6, 7], vec![3, 9], vec![1, 1], vec![7, 3]]), vec![vec![6, 7], vec![4, 9], vec![2, 9], vec![7, 10]]);\n    assert_eq!(candidate(vec![vec![2, 4], vec![5, 6], vec![3, 10], vec![2, 11]], vec![vec![7, 8], vec![4, 10], vec![2, 2], vec![8, 4]]), vec![vec![7, 8], vec![5, 10], vec![3, 10], vec![8, 11]]);\n    assert_eq!(candidate(vec![vec![3, 5], vec![6, 7], vec![4, 11], vec![3, 12]], vec![vec![8, 9], vec![5, 11], vec![3, 3], vec![9, 5]]), vec![vec![8, 9], vec![6, 11], vec![4, 11], vec![9, 12]]);\n}\n", "solution": "/// Write a function to maximize the given two vectors.\nfn maximize_elements(test_tup1: Vec<Vec<isize>>, test_tup2: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut result: Vec<Vec<isize>> = Vec::new();\n\n    for i in 0..test_tup1.len() {\n        let mut row: Vec<isize> = Vec::new();\n        for j in 0..test_tup1[i].len() {\n            row.push(std::cmp::max(test_tup1[i][j], test_tup2[i][j]));\n        }\n        result.push(row);\n    }\n\n    result\n}", "is_solved": true}
{"name": "mbpp_285_text_match_two_three", "language": "rs", "prompt": "/// Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nfn text_match_two_three(text: String) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_285_text_match_two_three.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "text_match_two_three", "test": "\n\nfn main() {\n    let candidate = text_match_two_three;\n    assert_eq!(candidate(String::from(\"ac\")), false);\n    assert_eq!(candidate(String::from(\"dc\")), false);\n    assert_eq!(candidate(String::from(\"abbbba\")), true);\n}\n", "solution": "/// Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nfn text_match_two_three(text: String) -> bool {\n    let pattern = regex::Regex::new(r\"a(bb|bbb)\").unwrap();\n    pattern.is_match(&text)\n}", "is_solved": false}
{"name": "mbpp_721_maxAverageOfPath", "language": "rs", "prompt": "/// Given a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfn maxAverageOfPath(cost: Vec<Vec<isize>>) -> f64 {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "maxAverageOfPath", "test": "\n\nfn main() {\n    let candidate = maxAverageOfPath;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![6, 5, 4], vec![7, 3, 9]]), 5.2);\n    assert_eq!(candidate(vec![vec![2, 3, 4], vec![7, 6, 5], vec![8, 4, 10]]), 6.2);\n    assert_eq!(candidate(vec![vec![3, 4, 5], vec![8, 7, 6], vec![9, 5, 11]]), 7.2);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![7, 8, 9]]), 5.8);\n}\n", "solution": "/// Given a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfn maxAverageOfPath(cost: Vec<Vec<isize>>) -> f64 {\n    let n = cost.len();\n    let mut dp = vec![vec![0.0; n]; n];\n\n    dp[0][0] = cost[0][0] as f64;\n\n    for i in 1..n {\n        dp[i][0] = dp[i - 1][0] + cost[i][0] as f64;\n    }\n\n    for j in 1..n {\n        dp[0][j] = dp[0][j - 1] + cost[0][j] as f64;\n    }\n\n    for i in 1..n {\n        for j in 1..n {\n            dp[i][j] = f64::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j] as f64;\n        }\n    }\n\n    dp[n - 1][n - 1] / (2 * n - 1) as f64\n}", "is_solved": true}
{"name": "mbpp_797_sum_in_range", "language": "rs", "prompt": "/// Write a rsthon function to find the sum of all odd natural numbers within the range l and r.\nfn sum_in_range(l: isize, r: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_797_sum_in_range.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "sum_in_range", "test": "\n\nfn main() {\n    let candidate = sum_in_range;\n    assert_eq!(candidate(2, 5), 8);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 13), 40);\n}\n", "solution": "/// Write a rsthon function to find the sum of all odd natural numbers within the range l and r.\nfn sum_in_range(l: isize, r: isize) -> isize {\n    let mut sum = 0;\n    for i in l..=r {\n        if i % 2 != 0 {\n            sum += i;\n        }\n    }\n    sum\n}", "is_solved": true}
{"name": "mbpp_4_heap_queue_largest", "language": "rs", "prompt": "/// Write a function to find the n largest integers from a given vector of numbers, returned in descending order.\nfn heap_queue_largest(nums: Vec<isize>, n: isize) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "heap_queue_largest", "test": "\n\nfn main() {\n    let candidate = heap_queue_largest;\n    assert_eq!(candidate(vec![25, 35, 22, 85, 14, 65, 75, 22, 58], 3), vec![85, 75, 65]);\n    assert_eq!(candidate(vec![25, 35, 22, 85, 14, 65, 75, 22, 58], 2), vec![85, 75]);\n    assert_eq!(candidate(vec![25, 35, 22, 85, 14, 65, 75, 22, 58], 5), vec![85, 75, 65, 58, 35]);\n}\n", "solution": "/// Write a function to find the n largest integers from a given vector of numbers, returned in descending order.\nfn heap_queue_largest(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    use std::cmp::Reverse;\n    use std::collections::BinaryHeap;\n\n    let mut heap = BinaryHeap::with_capacity(n as usize);\n    let mut result = Vec::with_capacity(n as usize);\n\n    for num in nums {\n        if heap.len() < n as usize {\n            heap.push(Reverse(num));\n        } else if let Some(&Reverse(min)) = heap.peek() {\n            if num > min {\n                heap.pop();\n                heap.push(Reverse(num));\n            }\n        }\n    }\n\n    while let Some(Reverse(val)) = heap.pop() {\n        result.push(val);\n    }\n\n    result.reverse();\n    result\n}", "is_solved": true}
{"name": "mbpp_120_max_product_tuple", "language": "rs", "prompt": "/// Write a function to find the maximum absolute product between numbers in pairs of tuples within a given vector.\nfn max_product_tuple(list1: Vec<(isize, isize)>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_120_max_product_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "max_product_tuple", "test": "\n\nfn main() {\n    let candidate = max_product_tuple;\n    assert_eq!(candidate(vec![(2, 7), (2, 6), (1, 8), (4, 9)]), 36);\n    assert_eq!(candidate(vec![(10, 20), (15, 2), (5, 10)]), 200);\n    assert_eq!(candidate(vec![(11, 44), (10, 15), (20, 5), (12, 9)]), 484);\n}\n", "solution": "/// Write a function to find the maximum absolute product between numbers in pairs of tuples within a given vector.\nfn max_product_tuple(list1: Vec<(isize, isize)>) -> isize {\n    let mut max_product = 0;\n\n    for i in 0..list1.len() {\n        for j in i + 1..list1.len() {\n            let product = (list1[i].0 * list1[j].0).abs() * (list1[i].1 * list1[j].1).abs();\n            if product > max_product {\n                max_product = product;\n            }\n        }\n    }\n\n    max_product\n}", "is_solved": false}
{"name": "mbpp_230_replace_blank", "language": "rs", "prompt": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_230_replace_blank.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "replace_blank", "test": "\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n", "solution": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}", "is_solved": true}
{"name": "mbpp_600_is_Even", "language": "rs", "prompt": "/// Write a rsthon function to check whether the given number is even or not.\nfn is_Even(n: isize) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_600_is_Even.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "is_Even", "test": "\n\nfn main() {\n    let candidate = is_Even;\n    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(2), true);\n    assert_eq!(candidate(3), false);\n}\n", "solution": "/// Write a rsthon function to check whether the given number is even or not.\nfn is_Even(n: isize) -> bool {\n    if n % 2 == 0 {\n        return true;\n    } else {\n        return false;\n    }\n}", "is_solved": true}
{"name": "mbpp_440_find_adverb_position", "language": "rs", "prompt": "/// Write a function to find the first adverb and their positions in a given sentence.\nfn find_adverb_position(text: String) -> (isize, isize, String) {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_440_find_adverb_position.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "find_adverb_position", "test": "\n\nfn main() {\n    let candidate = find_adverb_position;\n    assert_eq!(candidate(String::from(\"clearly!! we can see the sky\")), (0, 7, String::from(\"clearly\")));\n    assert_eq!(candidate(String::from(\"seriously!! there are many roses\")), (0, 9, String::from(\"seriously\")));\n    assert_eq!(candidate(String::from(\"unfortunately!! sita is going to home\")), (0, 13, String::from(\"unfortunately\")));\n}\n", "solution": "/// Write a function to find the first adverb and their positions in a given sentence.\nfn find_adverb_position(text: String) -> (isize, isize, String) {\n    let adverbs = [\"quickly\", \"slowly\", \"loudly\", \"softly\", \"well\", \"badly\", \"certainly\", \"probably\"];\n    let words: Vec<&str> = text.split_whitespace().collect();\n    let mut position = 0;\n\n    for (index, word) in words.iter().enumerate() {\n        if adverbs.contains(&word) {\n            return (position as isize, index as isize, word.to_string());\n        }\n        position += word.len() + 1;\n    }\n\n    (-1, -1, String::new())\n}", "is_solved": false}
{"name": "mbpp_773_occurance_substring", "language": "rs", "prompt": "/// Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nfn occurance_substring(text: String, pattern: String) -> Option<(String, isize, isize)> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_773_occurance_substring.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "occurance_substring", "test": "\n\nfn main() {\n    let candidate = occurance_substring;\n    assert_eq!(candidate(String::from(\"python programming, python language\"), String::from(\"python\")), Some((String::from(\"python\"), 0, 6)));\n    assert_eq!(candidate(String::from(\"python programming,programming language\"), String::from(\"programming\")), Some((String::from(\"programming\"), 7, 18)));\n    assert_eq!(candidate(String::from(\"python programming,programming language\"), String::from(\"language\")), Some((String::from(\"language\"), 31, 39)));\n    assert_eq!(candidate(String::from(\"c++ programming, c++ language\"), String::from(\"python\")), None);\n}\n", "solution": "/// Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nfn occurance_substring(text: String, pattern: String) -> Option<(String, isize, isize)> {\n    if pattern.is_empty() || text.len() < pattern.len() {\n        return None;\n    }\n\n    let mut start_index = 0;\n    let mut end_index = 0;\n    let mut found = false;\n\n    for i in 0..text.len() - pattern.len() + 1 {\n        if &text[i..i + pattern.len()] == pattern {\n            start_index = i as isize;\n            end_index = (i + pattern.len() - 1) as isize;\n            found = true;\n            break;\n        }\n    }\n\n    if found {\n        Some((pattern, start_index, end_index))\n    } else {\n        None\n    }\n}", "is_solved": false}
{"name": "mbpp_239_get_total_number_of_sequences", "language": "rs", "prompt": "/// Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nfn get_total_number_of_sequences(m: isize, n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_239_get_total_number_of_sequences.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "get_total_number_of_sequences", "test": "\n\nfn main() {\n    let candidate = get_total_number_of_sequences;\n    assert_eq!(candidate(10, 4), 4);\n    assert_eq!(candidate(5, 2), 6);\n    assert_eq!(candidate(16, 3), 84);\n}\n", "solution": "/// Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nfn get_total_number_of_sequences(m: isize, n: isize) -> isize {\n    if m <= 0 || n <= 0 {\n        return 0;\n    }\n\n    let mut dp = vec![vec![0; (n + 1) as usize]; (m + 1) as usize];\n\n    for i in 1..=(m as usize) {\n        dp[i][1] = i as isize;\n    }\n\n    for i in 1..=(m as usize) {\n        for j in 2..=(n as usize) {\n            let mut sum = 0;\n            for k in 1..=((i / 2) as usize) {\n                sum += dp[k][j - 1];\n            }\n            dp[i][j] = sum;\n        }\n    }\n\n    dp[m as usize][n as usize]\n}", "is_solved": false}
{"name": "mbpp_412_remove_odd", "language": "rs", "prompt": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_412_remove_odd.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "remove_odd", "test": "\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n", "solution": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x % 2 == 0).collect()\n}", "is_solved": true}
{"name": "mbpp_414_overlapping", "language": "rs", "prompt": "/// Write a rsthon function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_414_overlapping.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "overlapping", "test": "\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n", "solution": "/// Write a rsthon function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for item in &list1 {\n        if list2.contains(item) {\n            return true;\n        }\n    }\n    false\n}", "is_solved": true}
{"name": "mbpp_160_find_solution", "language": "rs", "prompt": "/// Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfn find_solution(a: isize, b: isize, n: isize) -> Option<(isize, isize)> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "find_solution", "test": "\n\nfn main() {\n    let candidate = find_solution;\n    assert_eq!(candidate(2, 3, 7), Some((2, 1)));\n    assert_eq!(candidate(4, 2, 7), None);\n    assert_eq!(candidate(1, 13, 17), Some((4, 1)));\n}\n", "solution": "/// Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfn find_solution(a: isize, b: isize, n: isize) -> Option<(isize, isize)> {\n    for x in -n..=n {\n        for y in -n..=n {\n            if a * x + b * y == n {\n                return Some((x, y));\n            }\n        }\n    }\n    None\n}", "is_solved": false}
{"name": "mbpp_559_max_sub_array_sum", "language": "rs", "prompt": "/// Write a function to find the sum of the largest contiguous subvector in the given vector.\nfn max_sub_array_sum(a: Vec<isize>, size: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_559_max_sub_array_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "max_sub_array_sum", "test": "\n\nfn main() {\n    let candidate = max_sub_array_sum;\n    assert_eq!(candidate(vec![-2, -3, 4, -1, -2, 1, 5, -3], 8), 7);\n    assert_eq!(candidate(vec![-3, -4, 5, -2, -3, 2, 6, -4], 8), 8);\n    assert_eq!(candidate(vec![-4, -5, 6, -3, -4, 3, 7, -5], 8), 10);\n}\n", "solution": "/// Write a function to find the sum of the largest contiguous subvector in the given vector.\nfn max_sub_array_sum(a: Vec<isize>, size: isize) -> isize {\n    let mut max_so_far = a[0];\n    let mut curr_max = a[0];\n\n    for i in 1..size as usize {\n        curr_max = isize::max(a[i], curr_max + a[i]);\n        max_so_far = isize::max(max_so_far, curr_max);\n    }\n\n    max_so_far\n}", "is_solved": true}
{"name": "mbpp_809_check_smaller", "language": "rs", "prompt": "/// Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nfn check_smaller(test_tup1: (isize, isize, isize), test_tup2: (isize, isize, isize)) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_809_check_smaller.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "check_smaller", "test": "\n\nfn main() {\n    let candidate = check_smaller;\n    assert_eq!(candidate((1, 2, 3), (2, 3, 4)), false);\n    assert_eq!(candidate((4, 5, 6), (3, 4, 5)), true);\n    assert_eq!(candidate((11, 12, 13), (10, 11, 12)), true);\n}\n", "solution": "/// Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nfn check_smaller(test_tup1: (isize, isize, isize), test_tup2: (isize, isize, isize)) -> bool {\n    if test_tup2.0 < test_tup1.0 && test_tup2.1 < test_tup1.1 && test_tup2.2 < test_tup1.2 {\n        return true;\n    }\n    false\n}", "is_solved": true}
{"name": "mbpp_629_Split", "language": "rs", "prompt": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_629_Split.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "Split", "test": "\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n", "solution": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_numbers = Vec::new();\n\n    for number in list {\n        if number % 2 == 0 {\n            even_numbers.push(number);\n        }\n    }\n\n    even_numbers\n}", "is_solved": true}
{"name": "mbpp_723_count_same_pair", "language": "rs", "prompt": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_723_count_same_pair.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "count_same_pair", "test": "\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n", "solution": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..nums1.len() {\n        if nums1[i] == nums2[i] {\n            count += 1;\n        }\n    }\n    count\n}", "is_solved": true}
{"name": "mbpp_242_count_charac", "language": "rs", "prompt": "/// Write a function to count the total number of characters in a string.\nfn count_charac(str1: String) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_242_count_charac.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "count_charac", "test": "\n\nfn main() {\n    let candidate = count_charac;\n    assert_eq!(candidate(String::from(\"python programming\")), 18);\n    assert_eq!(candidate(String::from(\"language\")), 8);\n    assert_eq!(candidate(String::from(\"words\")), 5);\n}\n", "solution": "/// Write a function to count the total number of characters in a string.\nfn count_charac(str1: String) -> isize {\n    let count = str1.chars().count() as isize;\n    count\n}", "is_solved": true}
{"name": "mbpp_616_tuple_modulo", "language": "rs", "prompt": "/// Write a function which takes two tuples of the same length and performs the element wise modulo.\nfn tuple_modulo(test_tup1: (isize, isize, isize, isize), test_tup2: (isize, isize, isize, isize)) -> (isize, isize, isize, isize) {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_616_tuple_modulo.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "tuple_modulo", "test": "\n\nfn main() {\n    let candidate = tuple_modulo;\n    assert_eq!(candidate((10, 4, 5, 6), (5, 6, 7, 5)), (0, 4, 5, 1));\n    assert_eq!(candidate((11, 5, 6, 7), (6, 7, 8, 6)), (5, 5, 6, 1));\n    assert_eq!(candidate((12, 6, 7, 8), (7, 8, 9, 7)), (5, 6, 7, 1));\n}\n", "solution": "/// Write a function which takes two tuples of the same length and performs the element wise modulo.\nfn tuple_modulo(test_tup1: (isize, isize, isize, isize), test_tup2: (isize, isize, isize, isize)) -> (isize, isize, isize, isize) {\n    let result = (\n        test_tup1.0 % test_tup2.0,\n        test_tup1.1 % test_tup2.1,\n        test_tup1.2 % test_tup2.2,\n        test_tup1.3 % test_tup2.3,\n    );\n\n    result\n}", "is_solved": true}
{"name": "mbpp_583_catalan_number", "language": "rs", "prompt": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_583_catalan_number.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "catalan_number", "test": "\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n", "solution": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n\n    let mut result = 0;\n    for i in 0..num {\n        result += catalan_number(i) * catalan_number(num - i - 1);\n    }\n\n    result\n}", "is_solved": true}
{"name": "mbpp_129_magic_square_test", "language": "rs", "prompt": "/// Write a function to calculate whether the matrix is a magic square.\nfn magic_square_test(my_matrix: Vec<Vec<isize>>) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "magic_square_test", "test": "\n\nfn main() {\n    let candidate = magic_square_test;\n    assert_eq!(candidate(vec![vec![7, 12, 1, 14], vec![2, 13, 8, 11], vec![16, 3, 10, 5], vec![9, 6, 15, 4]]), true);\n    assert_eq!(candidate(vec![vec![2, 7, 6], vec![9, 5, 1], vec![4, 3, 8]]), true);\n    assert_eq!(candidate(vec![vec![2, 7, 6], vec![9, 5, 1], vec![4, 3, 7]]), false);\n}\n", "solution": "/// Write a function to calculate whether the matrix is a magic square.\nfn magic_square_test(my_matrix: Vec<Vec<isize>>) -> bool {\n    let n = my_matrix.len();\n    let mut row_sums = vec![0; n];\n    let mut col_sums = vec![0; n];\n    let mut diag1_sum = 0;\n    let mut diag2_sum = 0;\n\n    for i in 0..n {\n        for j in 0..n {\n            let value = my_matrix[i][j];\n            row_sums[i] += value;\n            col_sums[j] += value;\n            if i == j {\n                diag1_sum += value;\n            }\n            if i == n - j - 1 {\n                diag2_sum += value;\n            }\n        }\n    }\n\n    let magic_sum = row_sums[0];\n    if diag1_sum != magic_sum || diag2_sum != magic_sum {\n        return false;\n    }\n\n    for i in 1..n {\n        if row_sums[i] != magic_sum || col_sums[i] != magic_sum {\n            return false;\n        }\n    }\n\n    true\n}", "is_solved": true}
{"name": "mbpp_61_count_Substrings", "language": "rs", "prompt": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_61_count_Substrings.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "count_Substrings", "test": "\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n", "solution": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n    let mut count = 0;\n    let chars: Vec<char> = s.chars().collect();\n\n    for i in 0..chars.len() {\n        let mut sum = 0;\n        for j in i..chars.len() {\n            if let Some(digit) = chars[j].to_digit(10) {\n                sum += digit;\n            }\n            if sum == (j - i + 1) as u32 {\n                count += 1;\n            }\n        }\n    }\n\n    count as isize\n}", "is_solved": true}
{"name": "mbpp_287_square_Sum", "language": "rs", "prompt": "/// Write a rsthon function takes in an integer n and returns the sum of squares of first n even natural numbers.\nfn square_Sum(n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_287_square_Sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "square_Sum", "test": "\n\nfn main() {\n    let candidate = square_Sum;\n    assert_eq!(candidate(2), 20);\n    assert_eq!(candidate(3), 56);\n    assert_eq!(candidate(4), 120);\n}\n", "solution": "/// Write a rsthon function takes in an integer n and returns the sum of squares of first n even natural numbers.\nfn square_Sum(n: isize) -> isize {\n    let mut sum = 0;\n\n    for i in 0..(n * 2) {\n        if i % 2 == 0 {\n            sum += i * i;\n        }\n    }\n\n    sum\n}", "is_solved": false}
{"name": "mbpp_93_power", "language": "rs", "prompt": "/// Write a function to calculate the value of 'a' to the power 'b'.\nfn power(a: isize, b: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_93_power.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "power", "test": "\n\nfn main() {\n    let candidate = power;\n    assert_eq!(candidate(3, 4), 81);\n    assert_eq!(candidate(2, 3), 8);\n    assert_eq!(candidate(5, 5), 3125);\n}\n", "solution": "/// Write a function to calculate the value of 'a' to the power 'b'.\nfn power(a: isize, b: isize) -> isize {\n    let mut result = 1;\n    for _ in 0..b {\n        result *= a;\n    }\n    result\n}", "is_solved": true}
{"name": "mbpp_607_find_literals", "language": "rs", "prompt": "/// Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nfn find_literals(text: String, pattern: String) -> (String, isize, isize) {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_607_find_literals.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "find_literals", "test": "\n\nfn main() {\n    let candidate = find_literals;\n    assert_eq!(candidate(String::from(\"The quick brown fox jumps over the lazy dog.\"), String::from(\"fox\")), (String::from(\"fox\"), 16, 19));\n    assert_eq!(candidate(String::from(\"Its been a very crazy procedure right\"), String::from(\"crazy\")), (String::from(\"crazy\"), 16, 21));\n    assert_eq!(candidate(String::from(\"Hardest choices required strongest will\"), String::from(\"will\")), (String::from(\"will\"), 35, 39));\n}\n", "solution": "/// Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nfn find_literals(text: String, pattern: String) -> (String, isize, isize) {\n    use regex::Regex;\n\n    let re = match Regex::new(&pattern) {\n        Ok(re) => re,\n        Err(_) => return (String::new(), -1, -1),\n    };\n\n    if let Some(mat) = re.find(&text) {\n        let start = mat.start() as isize;\n        let end = mat.end() as isize;\n        let matched = mat.as_str().to_string();\n        return (matched, start, end);\n    }\n\n    (String::new(), -1, -1)\n}", "is_solved": false}
{"name": "mbpp_94_index_minimum", "language": "rs", "prompt": "/// Given a vector of tuples, write a function that returns the first value of the tuple with the smallest second value.\nfn index_minimum(test_list: Vec<(String, isize)>) -> String {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_94_index_minimum.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "index_minimum", "test": "\n\nfn main() {\n    let candidate = index_minimum;\n    assert_eq!(candidate(vec![(String::from(\"Rash\"), 143), (String::from(\"Manjeet\"), 200), (String::from(\"Varsha\"), 100)]), String::from(\"Varsha\"));\n    assert_eq!(candidate(vec![(String::from(\"Yash\"), 185), (String::from(\"Dawood\"), 125), (String::from(\"Sanya\"), 175)]), String::from(\"Dawood\"));\n    assert_eq!(candidate(vec![(String::from(\"Sai\"), 345), (String::from(\"Salman\"), 145), (String::from(\"Ayesha\"), 96)]), String::from(\"Ayesha\"));\n}\n", "solution": "/// Given a vector of tuples, write a function that returns the first value of the tuple with the smallest second value.\nfn index_minimum(test_list: Vec<(String, isize)>) -> String {\n    let mut min_index = 0;\n    let mut min_value = test_list[0].1;\n\n    for (index, tuple) in test_list.iter().enumerate() {\n        if tuple.1 < min_value {\n            min_value = tuple.1;\n            min_index = index;\n        }\n    }\n\n    test_list[min_index].0.clone()\n}", "is_solved": true}
{"name": "mbpp_138_is_Sum_Of_Powers_Of_Two", "language": "rs", "prompt": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_138_is_Sum_Of_Powers_Of_Two.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "is_Sum_Of_Powers_Of_Two", "test": "\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n", "solution": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    if n <= 0 {\n        return false;\n    }\n\n    let mut count = 0;\n    while n > 0 {\n        count += n & 1;\n        n >>= 1;\n    }\n\n    count == 1\n}", "is_solved": false}
{"name": "mbpp_594_diff_even_odd", "language": "rs", "prompt": "/// Write a function to find the difference of the first even and first odd number of a given vector.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_594_diff_even_odd.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "diff_even_odd", "test": "\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n", "solution": "/// Write a function to find the difference of the first even and first odd number of a given vector.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even: Option<isize> = None;\n    let mut odd: Option<isize> = None;\n\n    for num in list1 {\n        if even.is_none() && num % 2 == 0 {\n            even = Some(num);\n        } else if odd.is_none() && num % 2 != 0 {\n            odd = Some(num);\n        }\n\n        if even.is_some() && odd.is_some() {\n            break;\n        }\n    }\n\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}", "is_solved": true}
{"name": "mbpp_274_even_binomial_Coeff_Sum", "language": "rs", "prompt": "/// Write a rsthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nfn even_binomial_Coeff_Sum(n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_274_even_binomial_Coeff_Sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "even_binomial_Coeff_Sum", "test": "\n\nfn main() {\n    let candidate = even_binomial_Coeff_Sum;\n    assert_eq!(candidate(4), 8);\n    assert_eq!(candidate(6), 32);\n    assert_eq!(candidate(2), 2);\n}\n", "solution": "/// Write a rsthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nfn even_binomial_Coeff_Sum(n: isize) -> isize {\n    let mut sum = 0;\n    let mut i = 0;\n\n    while i <= n {\n        sum += binomial_coeff(n, i);\n        i += 2;\n    }\n\n    sum\n}\n\nfn binomial_coeff(n: isize, k: isize) -> isize {\n    let mut res = 1;\n\n    if k > n - k {\n        k = n - k;\n    }\n\n    for i in 0..k {\n        res *= n - i;\n        res /= i + 1;\n    }\n\n    res\n}", "is_solved": false}
{"name": "mbpp_126_sum", "language": "rs", "prompt": "/// Write a rsthon function to find the sum of common divisors of two given numbers.\nfn sum(a: isize, b: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_126_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "sum", "test": "\n\nfn main() {\n    let candidate = sum;\n    assert_eq!(candidate(10, 15), 6);\n    assert_eq!(candidate(100, 150), 93);\n    assert_eq!(candidate(4, 6), 3);\n}\n", "solution": "/// Write a rsthon function to find the sum of common divisors of two given numbers.\nfn sum(a: isize, b: isize) -> isize {\n    let mut sum = 0;\n    let min_num = a.min(b);\n\n    for i in 1..=min_num {\n        if a % i == 0 && b % i == 0 {\n            sum += i;\n        }\n    }\n\n    sum\n}", "is_solved": true}
{"name": "mbpp_769_Diff", "language": "rs", "prompt": "/// Write a rsthon function to get the difference between two vectors.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_769_Diff.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "Diff", "test": "\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n", "solution": "/// Write a rsthon function to get the difference between two vectors.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n\n    for i in 0..li1.len() {\n        result.push(li1[i] - li2[i]);\n    }\n\n    result\n}", "is_solved": false}
{"name": "mbpp_796_return_sum", "language": "rs", "prompt": "use std::collections::HashMap;\n\n/// Write function to find the sum of all items in the given HashMap.\nfn return_sum(dict: HashMap<String, isize>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_796_return_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "return_sum", "test": "\n\nfn main() {\n    let candidate = return_sum;\n    assert_eq!(candidate(HashMap::from([(String::from(\"a\"), 100), (String::from(\"b\"), 200), (String::from(\"c\"), 300)])), 600);\n    assert_eq!(candidate(HashMap::from([(String::from(\"a\"), 25), (String::from(\"b\"), 18), (String::from(\"c\"), 45)])), 88);\n    assert_eq!(candidate(HashMap::from([(String::from(\"a\"), 36), (String::from(\"b\"), 39), (String::from(\"c\"), 49)])), 124);\n}\n", "solution": "use std::collections::HashMap;\n\n/// Write function to find the sum of all items in the given HashMap.\nfn return_sum(dict: HashMap<String, isize>) -> isize {\n    let mut sum = 0;\n    for value in dict.values() {\n        sum += value;\n    }\n    sum\n}", "is_solved": true}
{"name": "mbpp_574_surfacearea_cylinder", "language": "rs", "prompt": "/// Write a function to find the surface area of a cylinder.\nfn surfacearea_cylinder(r: isize, h: isize) -> f64 {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_574_surfacearea_cylinder.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "surfacearea_cylinder", "test": "\n\nfn main() {\n    let candidate = surfacearea_cylinder;\n    assert_eq!(candidate(10, 5), 942.45);\n    assert_eq!(candidate(4, 5), 226.18800000000002);\n    assert_eq!(candidate(4, 10), 351.848);\n}\n", "solution": "/// Write a function to find the surface area of a cylinder.\nfn surfacearea_cylinder(r: isize, h: isize) -> f64 {\n    let pi = std::f64::consts::PI;\n    let radius = r as f64;\n    let height = h as f64;\n\n    let base_area = pi * radius * radius;\n    let lateral_area = 2.0 * pi * radius * height;\n\n    let surface_area = 2.0 * base_area + lateral_area;\n    surface_area\n}", "is_solved": false}
{"name": "mbpp_783_rgb_to_hsv", "language": "rs", "prompt": "/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfn rgb_to_hsv(r: isize, g: isize, b: isize) -> Vec<f64> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_783_rgb_to_hsv.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "rgb_to_hsv", "test": "\n\nfn main() {\n    let candidate = rgb_to_hsv;\n    assert_eq!(candidate(255, 255, 255), vec![0.0, 0.0, 100.0]);\n    assert_eq!(candidate(0, 215, 0), vec![120.0, 100.0, 84.31372549019608]);\n    assert_eq!(candidate(10, 215, 110), vec![149.26829268292684, 95.34883720930233, 84.31372549019608]);\n}\n", "solution": "/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfn rgb_to_hsv(r: isize, g: isize, b: isize) -> Vec<f64> {\n    let r = r as f64 / 255.0;\n    let g = g as f64 / 255.0;\n    let b = b as f64 / 255.0;\n\n    let max = r.max(g).max(b);\n    let min = r.min(g).min(b);\n    let diff = max - min;\n\n    let h = if max == min {\n        0.0\n    } else if max == r {\n        60.0 * (((g - b) / diff) % 6.0)\n    } else if max == g {\n        60.0 * (((b - r) / diff) + 2.0)\n    } else {\n        60.0 * (((r - g) / diff) + 4.0)\n    };\n\n    let s = if max == 0.0 {\n        0.0\n    } else {\n        diff / max\n    };\n\n    let v = max;\n\n    vec![h, s, v]\n}", "is_solved": false}
{"name": "mbpp_70_get_equal", "language": "rs", "prompt": "/// Write a function to find whether all the given vectors have equal length or not.\nfn get_equal(Input: Vec<Vec<isize>>) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_70_get_equal.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "get_equal", "test": "\n\nfn main() {\n    let candidate = get_equal;\n    assert_eq!(candidate(vec![vec![11, 22, 33], vec![44, 55, 66]]), true);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6, 7]]), false);\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4]]), true);\n}\n", "solution": "/// Write a function to find whether all the given vectors have equal length or not.\nfn get_equal(Input: Vec<Vec<isize>>) -> bool {\n    let length = Input[0].len();\n\n    for vec in Input.iter() {\n        if vec.len() != length {\n            return false;\n        }\n    }\n\n    true\n}", "is_solved": true}
{"name": "mbpp_267_square_Sum", "language": "rs", "prompt": "/// Write a rsthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfn square_Sum(n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_267_square_Sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "square_Sum", "test": "\n\nfn main() {\n    let candidate = square_Sum;\n    assert_eq!(candidate(2), 10);\n    assert_eq!(candidate(3), 35);\n    assert_eq!(candidate(4), 84);\n}\n", "solution": "/// Write a rsthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfn square_Sum(n: isize) -> isize {\n    let mut sum = 0;\n    let mut count = 0;\n    let mut current = 1;\n\n    while count < n {\n        sum += current * current;\n        count += 1;\n        current += 2;\n    }\n\n    sum\n}", "is_solved": true}
{"name": "mbpp_171_perimeter_pentagon", "language": "rs", "prompt": "/// Write a function to find the perimeter of a regular pentagon from the length of its sides.\nfn perimeter_pentagon(a: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_171_perimeter_pentagon.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "perimeter_pentagon", "test": "\n\nfn main() {\n    let candidate = perimeter_pentagon;\n    assert_eq!(candidate(5), 25);\n    assert_eq!(candidate(10), 50);\n    assert_eq!(candidate(15), 75);\n}\n", "solution": "/// Write a function to find the perimeter of a regular pentagon from the length of its sides.\nfn perimeter_pentagon(a: isize) -> isize {\n    5 * a\n}", "is_solved": true}
{"name": "mbpp_164_are_equivalent", "language": "rs", "prompt": "/// Write a function to determine if the sum of the divisors of two integers are the same.\nfn are_equivalent(num1: isize, num2: isize) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_164_are_equivalent.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "are_equivalent", "test": "\n\nfn main() {\n    let candidate = are_equivalent;\n    assert_eq!(candidate(36, 57), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(23, 47), true);\n}\n", "solution": "/// Write a function to determine if the sum of the divisors of two integers are the same.\nfn are_equivalent(num1: isize, num2: isize) -> bool {\n    fn sum_of_divisors(num: isize) -> isize {\n        let mut sum = 0;\n        for i in 1..=(num / 2) {\n            if num % i == 0 {\n                sum += i;\n            }\n        }\n        sum\n    }\n\n    sum_of_divisors(num1) == sum_of_divisors(num2)\n}", "is_solved": true}
{"name": "mbpp_803_is_perfect_square", "language": "rs", "prompt": "/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfn is_perfect_square(n: isize) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_803_is_perfect_square.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "is_perfect_square", "test": "\n\nfn main() {\n    let candidate = is_perfect_square;\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(36), true);\n    assert_eq!(candidate(14), false);\n    assert_eq!(candidate(196), true);\n    assert_eq!(candidate(125), false);\n    assert_eq!(candidate(15625), true);\n}\n", "solution": "/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfn is_perfect_square(n: isize) -> bool {\n    if n < 0 {\n        return false;\n    }\n\n    let mut i = 1;\n    while i * i <= n {\n        if i * i == n {\n            return true;\n        }\n        i += 1;\n    }\n\n    false\n}", "is_solved": true}
{"name": "mbpp_305_start_withp", "language": "rs", "prompt": "/// Write a function to return two words from a vector of words starting with letter 'p'.\nfn start_withp(words: Vec<String>) -> (String, String) {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_305_start_withp.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "start_withp", "test": "\n\nfn main() {\n    let candidate = start_withp;\n    assert_eq!(candidate(vec![String::from(\"Python PHP\"), String::from(\"Java JavaScript\"), String::from(\"c c++\")]), (String::from(\"Python\"), String::from(\"PHP\")));\n    assert_eq!(candidate(vec![String::from(\"Python Programming\"), String::from(\"Java Programming\")]), (String::from(\"Python\"), String::from(\"Programming\")));\n    assert_eq!(candidate(vec![String::from(\"Pqrst Pqr\"), String::from(\"qrstuv\")]), (String::from(\"Pqrst\"), String::from(\"Pqr\")));\n}\n", "solution": "/// Write a function to return two words from a vector of words starting with letter 'p'.\nfn start_withp(words: Vec<String>) -> (String, String) {\n    let mut p_words = words.into_iter().filter(|word| word.starts_with('p')).take(2).collect::<Vec<String>>();\n\n    let first_word = if p_words.len() > 0 { p_words.remove(0) } else { String::new() };\n    let second_word = if p_words.len() > 0 { p_words.remove(0) } else { String::new() };\n\n    (first_word, second_word)\n}", "is_solved": false}
{"name": "mbpp_617_min_Jumps", "language": "rs", "prompt": "/// Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\nfn min_Jumps(steps: (isize, isize), d: isize) -> f64 {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_617_min_Jumps.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "min_Jumps", "test": "\n\nfn main() {\n    let candidate = min_Jumps;\n    assert_eq!(candidate((3, 4), 11), 3.5);\n    assert_eq!(candidate((3, 4), 0), 0.0);\n    assert_eq!(candidate((11, 14), 11), 1.0);\n}\n", "solution": "/// Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\nfn min_Jumps(steps: (isize, isize), d: isize) -> f64 {\n    let (x, y) = steps;\n    let total_steps = (d as f64 / (x as f64 - y as f64)).ceil();\n    total_steps\n}", "is_solved": false}
{"name": "mbpp_117_list_to_float", "language": "rs", "prompt": "/// Write a function to convert all possible convertible elements in a vector of vectors to floats.\nfn list_to_float(test_list: Vec<(String, String)>) -> Vec<(f64, f64)> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_117_list_to_float.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "list_to_float", "test": "\n\nfn main() {\n    let candidate = list_to_float;\n    assert_eq!(candidate(vec![(String::from(\"3\"), String::from(\"4\")), (String::from(\"1\"), String::from(\"26.45\")), (String::from(\"7.32\"), String::from(\"8\")), (String::from(\"4\"), String::from(\"8\"))]), vec![(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]);\n    assert_eq!(candidate(vec![(String::from(\"4\"), String::from(\"4\")), (String::from(\"2\"), String::from(\"27\")), (String::from(\"4.12\"), String::from(\"9\")), (String::from(\"7\"), String::from(\"11\"))]), vec![(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]);\n    assert_eq!(candidate(vec![(String::from(\"6\"), String::from(\"78\")), (String::from(\"5\"), String::from(\"26.45\")), (String::from(\"1.33\"), String::from(\"4\")), (String::from(\"82\"), String::from(\"13\"))]), vec![(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]);\n}\n", "solution": "/// Write a function to convert all possible convertible elements in a vector of vectors to floats.\nfn list_to_float(test_list: Vec<(String, String)>) -> Vec<(f64, f64)> {\n    test_list.into_iter()\n        .map(|(a, b)| {\n            let a_float = a.parse::<f64>().unwrap_or(0.0);\n            let b_float = b.parse::<f64>().unwrap_or(0.0);\n            (a_float, b_float)\n        })\n        .collect()\n}", "is_solved": true}
{"name": "mbpp_67_bell_number", "language": "rs", "prompt": "/// Write a function to find the number of ways to partition a set of Bell numbers.\nfn bell_number(n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_67_bell_number.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "bell_number", "test": "\n\nfn main() {\n    let candidate = bell_number;\n    assert_eq!(candidate(2), 2);\n    assert_eq!(candidate(10), 115975);\n    assert_eq!(candidate(56), 6775685320645824322581483068371419745979053216268760300);\n}\n", "solution": "/// Write a function to find the number of ways to partition a set of Bell numbers.\nfn bell_number(n: isize) -> isize {\n    if n < 0 {\n        return 0;\n    }\n\n    let mut bell_matrix = vec![vec![0; (n + 1) as usize]; (n + 1) as usize];\n\n    bell_matrix[0][0] = 1;\n\n    for i in 1..=(n as usize) {\n        bell_matrix[i][0] = bell_matrix[i - 1][i - 1];\n\n        for j in 1..=i {\n            bell_matrix[i][j] = bell_matrix[i - 1][j - 1] + bell_matrix[i][j - 1];\n        }\n    }\n\n    bell_matrix[n as usize][0]\n}", "is_solved": false}
{"name": "mbpp_404_minimum", "language": "rs", "prompt": "/// Write a rsthon function to find the minimum of two numbers.\nfn minimum(a: isize, b: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_404_minimum.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "minimum", "test": "\n\nfn main() {\n    let candidate = minimum;\n    assert_eq!(candidate(1, 2), 1);\n    assert_eq!(candidate(-5, -4), -5);\n    assert_eq!(candidate(0, 0), 0);\n}\n", "solution": "/// Write a rsthon function to find the minimum of two numbers.\nfn minimum(a: isize, b: isize) -> isize {\n    if a < b {\n        a\n    } else {\n        b\n    }\n}", "is_solved": true}
{"name": "mbpp_14_find_Volume", "language": "rs", "prompt": "/// Write a rsthon function to find the volume of a triangular prism.\nfn find_Volume(l: isize, b: isize, h: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_14_find_Volume.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "find_Volume", "test": "\n\nfn main() {\n    let candidate = find_Volume;\n    assert_eq!(candidate(10, 8, 6), 240);\n    assert_eq!(candidate(3, 2, 2), 6);\n    assert_eq!(candidate(1, 2, 1), 1);\n}\n", "solution": "/// Write a rsthon function to find the volume of a triangular prism.\nfn find_Volume(l: isize, b: isize, h: isize) -> isize {\n    let volume = l * b * h / 2;\n    volume\n}", "is_solved": true}
{"name": "mbpp_8_square_nums", "language": "rs", "prompt": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_8_square_nums.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "square_nums", "test": "\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n", "solution": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.into_iter().map(|num| num * num).collect()\n}", "is_solved": true}
{"name": "mbpp_244_next_Perfect_Square", "language": "rs", "prompt": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "next_Perfect_Square", "test": "\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n", "solution": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut next_square = N + 1;\n\n    while !is_perfect_square(next_square) {\n        next_square += 1;\n    }\n\n    next_square\n}\n\nfn is_perfect_square(num: isize) -> bool {\n    let root = (num as f64).sqrt() as isize;\n    root * root == num\n}", "is_solved": true}
{"name": "mbpp_292_find", "language": "rs", "prompt": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_292_find.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "find", "test": "\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n", "solution": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if m == 0 {\n        panic!(\"Division by zero is not allowed\");\n    }\n    n / m\n}", "is_solved": true}
{"name": "mbpp_603_get_ludic", "language": "rs", "prompt": "/// Write a function to get all lucid numbers smaller than or equal to a given integer.\nfn get_ludic(n: isize) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_603_get_ludic.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "get_ludic", "test": "\n\nfn main() {\n    let candidate = get_ludic;\n    assert_eq!(candidate(10), vec![1, 2, 3, 5, 7]);\n    assert_eq!(candidate(25), vec![1, 2, 3, 5, 7, 11, 13, 17, 23, 25]);\n    assert_eq!(candidate(45), vec![1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]);\n}\n", "solution": "/// Write a function to get all lucid numbers smaller than or equal to a given integer.\nfn get_ludic(n: isize) -> Vec<isize> {\n    let mut ludic_numbers = vec![1];\n    let mut candidates: Vec<isize> = (2..=n).collect();\n\n    while let Some(ludic) = candidates.first().cloned() {\n        ludic_numbers.push(ludic);\n        candidates = candidates\n            .into_iter()\n            .enumerate()\n            .filter(|(i, _)| (i + 1) % ludic != 0)\n            .map(|(_, x)| x)\n            .collect();\n    }\n\n    ludic_numbers\n}", "is_solved": false}
{"name": "mbpp_734_sum_Of_Subarray_Prod", "language": "rs", "prompt": "/// Write a rsthon function to find sum of products of all possible subvectors of a given vector. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subvectors/\nfn sum_Of_Subarray_Prod(arr: Vec<isize>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_734_sum_Of_Subarray_Prod.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "sum_Of_Subarray_Prod", "test": "\n\nfn main() {\n    let candidate = sum_Of_Subarray_Prod;\n    assert_eq!(candidate(vec![1, 2, 3]), 20);\n    assert_eq!(candidate(vec![1, 2]), 5);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), 84);\n}\n", "solution": "/// Write a rsthon function to find sum of products of all possible subvectors of a given vector. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subvectors/\nfn sum_Of_Subarray_Prod(arr: Vec<isize>) -> isize {\n    let n = arr.len();\n    let mut sum = 0;\n\n    for i in 0..n {\n        sum += arr[i] * ((i + 1) as isize) * ((n - i) as isize);\n    }\n\n    sum\n}", "is_solved": false}
{"name": "mbpp_567_issort_list", "language": "rs", "prompt": "/// Write a function to check whether a specified vector is sorted or not.\nfn issort_list(list1: Vec<isize>) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_567_issort_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "issort_list", "test": "\n\nfn main() {\n    let candidate = issort_list;\n    assert_eq!(candidate(vec![1, 2, 4, 6, 8, 10, 12, 14, 16, 17]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 6, 8, 10, 12, 14, 20, 17]), false);\n    assert_eq!(candidate(vec![1, 2, 4, 6, 8, 10, 15, 14, 20]), false);\n}\n", "solution": "/// Write a function to check whether a specified vector is sorted or not.\nfn issort_list(list1: Vec<isize>) -> bool {\n    if list1.is_empty() {\n        return true;\n    }\n\n    for i in 1..list1.len() {\n        if list1[i - 1] > list1[i] {\n            return false;\n        }\n    }\n\n    true\n}", "is_solved": true}
{"name": "mbpp_475_sort_counter", "language": "rs", "prompt": "use std::collections::HashMap;\n\n/// Write a function to sort a HashMap by value.\nfn sort_counter(dict1: HashMap<String, isize>) -> Vec<(String, isize)> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_475_sort_counter.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "sort_counter", "test": "\n\nfn main() {\n    let candidate = sort_counter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Math\"), 81), (String::from(\"Physics\"), 83), (String::from(\"Chemistry\"), 87)])), vec![(String::from(\"Chemistry\"), 87), (String::from(\"Physics\"), 83), (String::from(\"Math\"), 81)]);\n    assert_eq!(candidate(HashMap::from([(String::from(\"Math\"), 400), (String::from(\"Physics\"), 300), (String::from(\"Chemistry\"), 250)])), vec![(String::from(\"Math\"), 400), (String::from(\"Physics\"), 300), (String::from(\"Chemistry\"), 250)]);\n    assert_eq!(candidate(HashMap::from([(String::from(\"Math\"), 900), (String::from(\"Physics\"), 1000), (String::from(\"Chemistry\"), 1250)])), vec![(String::from(\"Chemistry\"), 1250), (String::from(\"Physics\"), 1000), (String::from(\"Math\"), 900)]);\n}\n", "solution": "use std::collections::HashMap;\n\n/// Write a function to sort a HashMap by value.\nfn sort_counter(dict1: HashMap<String, isize>) -> Vec<(String, isize)> {\n    let mut vec: Vec<(&String, &isize)> = dict1.iter().collect();\n    vec.sort_by(|a, b| a.1.cmp(b.1));\n\n    let sorted_dict: Vec<(String, isize)> = vec.into_iter().map(|(k, v)| (k.clone(), *v)).collect();\n    sorted_dict\n}", "is_solved": false}
{"name": "mbpp_560_union_elements", "language": "rs", "prompt": "/// Write a function to find the union of the elements of two given vectors and output them in sorted order.\nfn union_elements(test_tup1: Vec<isize>, test_tup2: Vec<isize>) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_560_union_elements.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "union_elements", "test": "\n\nfn main() {\n    let candidate = union_elements;\n    assert_eq!(candidate(vec![3, 4, 5, 6], vec![5, 7, 4, 10]), vec![3, 4, 5, 6, 7, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], vec![3, 4, 5, 6]), vec![1, 2, 3, 4, 5, 6]);\n    assert_eq!(candidate(vec![11, 12, 13, 14], vec![13, 15, 16, 17]), vec![11, 12, 13, 14, 15, 16, 17]);\n}\n", "solution": "/// Write a function to find the union of the elements of two given vectors and output them in sorted order.\nfn union_elements(test_tup1: Vec<isize>, test_tup2: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n\n    for elem in test_tup1.iter() {\n        if !result.contains(elem) {\n            result.push(*elem);\n        }\n    }\n\n    for elem in test_tup2.iter() {\n        if !result.contains(elem) {\n            result.push(*elem);\n        }\n    }\n\n    result.sort();\n    result\n}", "is_solved": true}
{"name": "mbpp_737_check_str", "language": "rs", "prompt": "/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfn check_str(string: String) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_737_check_str.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "check_str", "test": "\n\nfn main() {\n    let candidate = check_str;\n    assert_eq!(candidate(String::from(\"annie\")), true);\n    assert_eq!(candidate(String::from(\"dawood\")), false);\n    assert_eq!(candidate(String::from(\"Else\")), true);\n}\n", "solution": "/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfn check_str(string: String) -> bool {\n    let re = regex::Regex::new(r\"^[aeiouAEIOU]\").unwrap();\n    re.is_match(&string)\n}", "is_solved": false}
{"name": "mbpp_626_triangle_area", "language": "rs", "prompt": "/// Write a rsthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nfn triangle_area(r: isize) -> Option<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_626_triangle_area.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "triangle_area", "test": "\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(-1), None);\n    assert_eq!(candidate(0), Some(0));\n    assert_eq!(candidate(2), Some(4));\n}\n", "solution": "/// Write a rsthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nfn triangle_area(r: isize) -> Option<isize> {\n    if r <= 0 {\n        return None;\n    }\n\n    let area = (r * r) as f64 * (std::f64::consts::PI / 4.0);\n    Some(area as isize)\n}", "is_solved": false}
{"name": "mbpp_463_max_subarray_product", "language": "rs", "prompt": "/// Write a function to find the maximum product subvector of the given vector.\nfn max_subarray_product(arr: Vec<isize>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_463_max_subarray_product.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "max_subarray_product", "test": "\n\nfn main() {\n    let candidate = max_subarray_product;\n    assert_eq!(candidate(vec![1, -2, -3, 0, 7, -8, -2]), 112);\n    assert_eq!(candidate(vec![6, -3, -10, 0, 2]), 180);\n    assert_eq!(candidate(vec![-2, -40, 0, -2, -3]), 80);\n}\n", "solution": "/// Write a function to find the maximum product subvector of the given vector.\nfn max_subarray_product(arr: Vec<isize>) -> isize {\n    if arr.is_empty() {\n        return 0;\n    }\n\n    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut result = arr[0];\n\n    for i in 1..arr.len() {\n        if arr[i] < 0 {\n            let temp = max_product;\n            max_product = min_product;\n            min_product = temp;\n        }\n\n        max_product = isize::max(arr[i], max_product * arr[i]);\n        min_product = isize::min(arr[i], min_product * arr[i]);\n\n        result = isize::max(result, max_product);\n    }\n\n    result\n}", "is_solved": true}
{"name": "mbpp_223_is_majority", "language": "rs", "prompt": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "is_majority", "test": "\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n", "solution": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n\n    count > n / 2\n}", "is_solved": false}
{"name": "mbpp_794_text_starta_endb", "language": "rs", "prompt": "/// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfn text_starta_endb(text: String) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_794_text_starta_endb.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "text_starta_endb", "test": "\n\nfn main() {\n    let candidate = text_starta_endb;\n    assert_eq!(candidate(String::from(\"aabbbb\")), true);\n    assert_eq!(candidate(String::from(\"aabAbbbc\")), false);\n    assert_eq!(candidate(String::from(\"accddbbjjj\")), false);\n}\n", "solution": "/// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfn text_starta_endb(text: String) -> bool {\n    if text.starts_with('a') && text.ends_with('b') {\n        return true;\n    }\n    false\n}", "is_solved": true}
{"name": "mbpp_79_word_len", "language": "rs", "prompt": "/// Write a rsthon function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_79_word_len.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "word_len", "test": "\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n", "solution": "/// Write a rsthon function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    let length = s.chars().count();\n    length % 2 != 0\n}", "is_solved": true}
{"name": "mbpp_741_all_Characters_Same", "language": "rs", "prompt": "/// Write a rsthon function to check whether all the characters are same or not.\nfn all_Characters_Same(s: String) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_741_all_Characters_Same.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "all_Characters_Same", "test": "\n\nfn main() {\n    let candidate = all_Characters_Same;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"aaa\")), true);\n    assert_eq!(candidate(String::from(\"data\")), false);\n}\n", "solution": "/// Write a rsthon function to check whether all the characters are same or not.\nfn all_Characters_Same(s: String) -> bool {\n    if s.is_empty() {\n        return true;\n    }\n\n    let first_char = s.chars().next().unwrap();\n    for c in s.chars() {\n        if c != first_char {\n            return false;\n        }\n    }\n\n    true\n}", "is_solved": true}
{"name": "mbpp_775_odd_position", "language": "rs", "prompt": "/// Write a rsthon function to check whether every odd index contains odd numbers of a given vector.\nfn odd_position(nums: Vec<isize>) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_775_odd_position.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "odd_position", "test": "\n\nfn main() {\n    let candidate = odd_position;\n    assert_eq!(candidate(vec![2, 1, 4, 3, 6, 7, 6, 3]), true);\n    assert_eq!(candidate(vec![4, 1, 2]), true);\n    assert_eq!(candidate(vec![1, 2, 3]), false);\n}\n", "solution": "/// Write a rsthon function to check whether every odd index contains odd numbers of a given vector.\nfn odd_position(nums: Vec<isize>) -> bool {\n    for i in (1..nums.len()).step_by(2) {\n        if nums[i] % 2 == 0 {\n            return false;\n        }\n    }\n    true\n}", "is_solved": true}
{"name": "mbpp_644_reverse_Array_Upto_K", "language": "rs", "prompt": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_644_reverse_Array_Upto_K.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "reverse_Array_Upto_K", "test": "\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n", "solution": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    if k <= 0 {\n        return input;\n    }\n\n    let k = k as usize;\n    let mut result = input.clone();\n    let mut start = 0;\n    let mut end = k - 1;\n\n    while start < end {\n        result.swap(start, end);\n        start += 1;\n        end -= 1;\n    }\n\n    result\n}", "is_solved": true}
{"name": "mbpp_588_big_diff", "language": "rs", "prompt": "/// Write a rsthon function to find the difference between largest and smallest value in a given vector.\nfn big_diff(nums: Vec<isize>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_588_big_diff.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "big_diff", "test": "\n\nfn main() {\n    let candidate = big_diff;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), 3);\n    assert_eq!(candidate(vec![4, 5, 12]), 8);\n    assert_eq!(candidate(vec![9, 2, 3]), 7);\n}\n", "solution": "/// Write a rsthon function to find the difference between largest and smallest value in a given vector.\nfn big_diff(nums: Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\n    let mut min_num = nums[0];\n    let mut max_num = nums[0];\n\n    for num in nums {\n        if num < min_num {\n            min_num = num;\n        } else if num > max_num {\n            max_num = num;\n        }\n    }\n\n    max_num - min_num\n}", "is_solved": true}
{"name": "mbpp_445_index_multiplication", "language": "rs", "prompt": "/// Write a function to perform index wise multiplication of vector elements in the given two vectors.\nfn index_multiplication(test_tup1: Vec<Vec<isize>>, test_tup2: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_445_index_multiplication.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "index_multiplication", "test": "\n\nfn main() {\n    let candidate = index_multiplication;\n    assert_eq!(candidate(vec![vec![1, 3], vec![4, 5], vec![2, 9], vec![1, 10]], vec![vec![6, 7], vec![3, 9], vec![1, 1], vec![7, 3]]), vec![vec![6, 21], vec![12, 45], vec![2, 9], vec![7, 30]]);\n    assert_eq!(candidate(vec![vec![2, 4], vec![5, 6], vec![3, 10], vec![2, 11]], vec![vec![7, 8], vec![4, 10], vec![2, 2], vec![8, 4]]), vec![vec![14, 32], vec![20, 60], vec![6, 20], vec![16, 44]]);\n    assert_eq!(candidate(vec![vec![3, 5], vec![6, 7], vec![4, 11], vec![3, 12]], vec![vec![8, 9], vec![5, 11], vec![3, 3], vec![9, 5]]), vec![vec![24, 45], vec![30, 77], vec![12, 33], vec![27, 60]]);\n}\n", "solution": "/// Write a function to perform index wise multiplication of vector elements in the given two vectors.\nfn index_multiplication(test_tup1: Vec<Vec<isize>>, test_tup2: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut result: Vec<Vec<isize>> = Vec::new();\n\n    for i in 0..test_tup1.len() {\n        let mut row: Vec<isize> = Vec::new();\n        for j in 0..test_tup1[i].len() {\n            row.push(test_tup1[i][j] * test_tup2[i][j]);\n        }\n        result.push(row);\n    }\n\n    result\n}", "is_solved": true}
{"name": "mbpp_256_count_Primes_nums", "language": "rs", "prompt": "/// Write a rsthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nfn count_Primes_nums(n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_256_count_Primes_nums.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "count_Primes_nums", "test": "\n\nfn main() {\n    let candidate = count_Primes_nums;\n    assert_eq!(candidate(5), 2);\n    assert_eq!(candidate(10), 4);\n    assert_eq!(candidate(100), 25);\n}\n", "solution": "/// Write a rsthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nfn count_Primes_nums(n: isize) -> isize {\n    if n <= 2 {\n        return 0;\n    }\n\n    let mut primes = vec![true; n as usize];\n    primes[0] = false;\n    primes[1] = false;\n\n    for i in 2..((n as f64).sqrt().ceil() as usize) {\n        if primes[i] {\n            let mut j = i * i;\n            while j < n as usize {\n                primes[j] = false;\n                j += i;\n            }\n        }\n    }\n\n    primes.into_iter().filter(|&prime| prime).count() as isize\n}", "is_solved": true}
{"name": "mbpp_170_sum_range_list", "language": "rs", "prompt": "/// Write a function to find the sum of numbers in a vector within a range specified by two indices.\nfn sum_range_list(list1: Vec<isize>, m: isize, n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_170_sum_range_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "sum_range_list", "test": "\n\nfn main() {\n    let candidate = sum_range_list;\n    assert_eq!(candidate(vec![2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10), 29);\n    assert_eq!(candidate(vec![2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 5, 7), 16);\n    assert_eq!(candidate(vec![2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 7, 10), 38);\n}\n", "solution": "/// Write a function to find the sum of numbers in a vector within a range specified by two indices.\nfn sum_range_list(list1: Vec<isize>, m: isize, n: isize) -> isize {\n    let mut sum = 0;\n    for i in m as usize..=n as usize {\n        if i < list1.len() {\n            sum += list1[i];\n        }\n    }\n    sum\n}", "is_solved": true}
{"name": "mbpp_71_comb_sort", "language": "rs", "prompt": "/// Write a function to sort a vector of elements.\nfn comb_sort(nums: Vec<isize>) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_71_comb_sort.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "comb_sort", "test": "\n\nfn main() {\n    let candidate = comb_sort;\n    assert_eq!(candidate(vec![5, 15, 37, 25, 79]), vec![5, 15, 25, 37, 79]);\n    assert_eq!(candidate(vec![41, 32, 15, 19, 22]), vec![15, 19, 22, 32, 41]);\n    assert_eq!(candidate(vec![99, 15, 13, 47]), vec![13, 15, 47, 99]);\n}\n", "solution": "/// Write a function to sort a vector of elements.\nfn comb_sort(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    let mut gap = nums.len();\n    let shrink_factor = 1.3;\n    let mut sorted = false;\n\n    while !sorted {\n        gap = (gap as f64 / shrink_factor).floor() as usize;\n        if gap <= 1 {\n            gap = 1;\n            sorted = true;\n        }\n\n        let mut i = 0;\n        while i + gap < nums.len() {\n            if nums[i] > nums[i + gap] {\n                nums.swap(i, i + gap);\n                sorted = false;\n            }\n            i += 1;\n        }\n    }\n\n    nums\n}", "is_solved": true}
{"name": "mbpp_451_remove_whitespaces", "language": "rs", "prompt": "/// Write a function to remove all whitespaces from the given string.\nfn remove_whitespaces(text1: String) -> String {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_451_remove_whitespaces.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "remove_whitespaces", "test": "\n\nfn main() {\n    let candidate = remove_whitespaces;\n    assert_eq!(candidate(String::from(\" Google    Flutter \")), String::from(\"GoogleFlutter\"));\n    assert_eq!(candidate(String::from(\" Google    Dart \")), String::from(\"GoogleDart\"));\n    assert_eq!(candidate(String::from(\" iOS    Swift \")), String::from(\"iOSSwift\"));\n}\n", "solution": "/// Write a function to remove all whitespaces from the given string.\nfn remove_whitespaces(text1: String) -> String {\n    text1.chars().filter(|c| !c.is_whitespace()).collect()\n}", "is_solved": true}
{"name": "mbpp_747_lcs_of_three", "language": "rs", "prompt": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_747_lcs_of_three.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "lcs_of_three", "test": "\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n", "solution": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 1..=m {\n        for j in 1..=n {\n            for k in 1..=o {\n                if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && Y.chars().nth(j - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = 1 + dp[i - 1][j - 1][k - 1];\n                } else {\n                    dp[i][j][k] = std::cmp::max(dp[i - 1][j][k], std::cmp::max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]\n}", "is_solved": true}
{"name": "mbpp_257_swap_numbers", "language": "rs", "prompt": "/// Write a function that takes in two numbers and returns a vector with the second number and then the first number.\nfn swap_numbers(a: isize, b: isize) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_257_swap_numbers.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "swap_numbers", "test": "\n\nfn main() {\n    let candidate = swap_numbers;\n    assert_eq!(candidate(10, 20), vec![20, 10]);\n    assert_eq!(candidate(15, 17), vec![17, 15]);\n    assert_eq!(candidate(100, 200), vec![200, 100]);\n}\n", "solution": "/// Write a function that takes in two numbers and returns a vector with the second number and then the first number.\nfn swap_numbers(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    result.push(b);\n    result.push(a);\n    result\n}", "is_solved": true}
{"name": "mbpp_64_subject_marks", "language": "rs", "prompt": "/// Write a function to sort a vector of tuples using the second value of each tuple.\nfn subject_marks(subjectmarks: Vec<(String, isize)>) -> Vec<(String, isize)> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_64_subject_marks.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "subject_marks", "test": "\n\nfn main() {\n    let candidate = subject_marks;\n    assert_eq!(candidate(vec![(String::from(\"English\"), 88), (String::from(\"Science\"), 90), (String::from(\"Maths\"), 97), (String::from(\"Social sciences\"), 82)]), vec![(String::from(\"Social sciences\"), 82), (String::from(\"English\"), 88), (String::from(\"Science\"), 90), (String::from(\"Maths\"), 97)]);\n    assert_eq!(candidate(vec![(String::from(\"Telugu\"), 49), (String::from(\"Hindhi\"), 54), (String::from(\"Social\"), 33)]), vec![(String::from(\"Social\"), 33), (String::from(\"Telugu\"), 49), (String::from(\"Hindhi\"), 54)]);\n    assert_eq!(candidate(vec![(String::from(\"Physics\"), 96), (String::from(\"Chemistry\"), 97), (String::from(\"Biology\"), 45)]), vec![(String::from(\"Biology\"), 45), (String::from(\"Physics\"), 96), (String::from(\"Chemistry\"), 97)]);\n}\n", "solution": "/// Write a function to sort a vector of tuples using the second value of each tuple.\nfn subject_marks(subjectmarks: Vec<(String, isize)>) -> Vec<(String, isize)> {\n    subjectmarks.into_iter().sorted_by(|a, b| a.1.cmp(&b.1)).collect()\n}", "is_solved": false}
{"name": "mbpp_116_tuple_to_int", "language": "rs", "prompt": "/// Write a function to convert a given tuple of positive integers into a single integer.\nfn tuple_to_int(nums: (isize, isize, isize)) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_116_tuple_to_int.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "tuple_to_int", "test": "\n\nfn main() {\n    let candidate = tuple_to_int;\n    assert_eq!(candidate((1, 2, 3)), 123);\n    assert_eq!(candidate((4, 5, 6)), 456);\n    assert_eq!(candidate((5, 6, 7)), 567);\n}\n", "solution": "/// Write a function to convert a given tuple of positive integers into a single integer.\nfn tuple_to_int(nums: (isize, isize, isize)) -> isize {\n    let (a, b, c) = nums;\n    let result = a * 100 + b * 10 + c;\n    result\n}", "is_solved": true}
{"name": "mbpp_479_first_Digit", "language": "rs", "prompt": "/// Write a rsthon function to find the first digit of a given number.\nfn first_Digit(n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_479_first_Digit.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "first_Digit", "test": "\n\nfn main() {\n    let candidate = first_Digit;\n    assert_eq!(candidate(123), 1);\n    assert_eq!(candidate(456), 4);\n    assert_eq!(candidate(12), 1);\n}\n", "solution": "/// Write a rsthon function to find the first digit of a given number.\nfn first_Digit(n: isize) -> isize {\n    let mut num = n.abs();\n    while num >= 10 {\n        num /= 10;\n    }\n    num\n}", "is_solved": true}
{"name": "mbpp_118_string_to_list", "language": "rs", "prompt": "/// Write a function to convert a string to a vector of strings split on the space character.\nfn string_to_list(string: String) -> Vec<String> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_118_string_to_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "string_to_list", "test": "\n\nfn main() {\n    let candidate = string_to_list;\n    assert_eq!(candidate(String::from(\"python programming\")), vec![String::from(\"python\"), String::from(\"programming\")]);\n    assert_eq!(candidate(String::from(\"lists tuples strings\")), vec![String::from(\"lists\"), String::from(\"tuples\"), String::from(\"strings\")]);\n    assert_eq!(candidate(String::from(\"write a program\")), vec![String::from(\"write\"), String::from(\"a\"), String::from(\"program\")]);\n}\n", "solution": "/// Write a function to convert a string to a vector of strings split on the space character.\nfn string_to_list(string: String) -> Vec<String> {\n    string.split_whitespace()\n        .map(|s| s.to_string())\n        .collect()", "is_solved": false}
{"name": "mbpp_763_find_min_diff", "language": "rs", "prompt": "/// Write a rsthon function to find the minimum difference between any two elements in a given vector. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfn find_min_diff(arr: Vec<isize>, n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_763_find_min_diff.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "find_min_diff", "test": "\n\nfn main() {\n    let candidate = find_min_diff;\n    assert_eq!(candidate(vec![1, 5, 3, 19, 18, 25], 6), 1);\n    assert_eq!(candidate(vec![4, 3, 2, 6], 4), 1);\n    assert_eq!(candidate(vec![30, 5, 20, 9], 4), 4);\n}\n", "solution": "/// Write a rsthon function to find the minimum difference between any two elements in a given vector. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfn find_min_diff(arr: Vec<isize>, n: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n\n    let mut arr_sorted = arr.clone();\n    arr_sorted.sort();\n\n    let mut min_diff = arr_sorted[1] - arr_sorted[0];\n\n    for i in 1..(n as usize - 1) {\n        let diff = arr_sorted[i + 1] - arr_sorted[i];\n        if diff < min_diff {\n            min_diff = diff;\n        }\n    }\n\n    min_diff\n}", "is_solved": true}
{"name": "mbpp_408_k_smallest_pairs", "language": "rs", "prompt": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "k_smallest_pairs", "test": "\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n", "solution": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut pairs: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<Reverse<(isize, usize, usize)>> = BinaryHeap::new();\n\n    if nums1.is_empty() || nums2.is_empty() || k == 0 {\n        return pairs;\n    }\n\n    for i in 0..nums1.len() {\n        heap.push(Reverse((nums1[i] + nums2[0], i, 0)));\n    }\n\n    while pairs.len() < k as usize && !heap.is_empty() {\n        let Reverse((_, i, j)) = heap.pop().unwrap();\n        pairs.push(vec![nums1[i], nums2[j]]);\n\n        if j + 1 < nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j + 1], i, j + 1)));\n        }\n    }\n\n    pairs\n}", "is_solved": false}
{"name": "mbpp_748_capital_words_spaces", "language": "rs", "prompt": "/// Write a function to put spaces between words starting with capital letters in a given string.\nfn capital_words_spaces(str1: String) -> String {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_748_capital_words_spaces.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "capital_words_spaces", "test": "\n\nfn main() {\n    let candidate = capital_words_spaces;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"Python\"));\n    assert_eq!(candidate(String::from(\"PythonProgrammingExamples\")), String::from(\"Python Programming Examples\"));\n    assert_eq!(candidate(String::from(\"GetReadyToBeCodingFreak\")), String::from(\"Get Ready To Be Coding Freak\"));\n}\n", "solution": "/// Write a function to put spaces between words starting with capital letters in a given string.\nfn capital_words_spaces(str1: String) -> String {\n    let mut result = String::new();\n    let chars = str1.chars().collect::<Vec<char>>();\n\n    for (i, c) in chars.iter().enumerate() {\n        if i != 0 && c.is_uppercase() {\n            result.push(' ');\n        }\n        result.push(*c);\n    }\n\n    result\n}", "is_solved": true}
{"name": "mbpp_252_convert", "language": "rs", "prompt": "/// Write a rsthon function to convert complex numbers to polar coordinates.\nfn convert(numbers: isize) -> (f64, f64) {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_252_convert.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "convert", "test": "\n\nfn main() {\n    let candidate = convert;\n    assert_eq!(candidate(1), (1.0, 0.0));\n    assert_eq!(candidate(4), (4.0, 0.0));\n    assert_eq!(candidate(5), (5.0, 0.0));\n}\n", "solution": "/// Write a rsthon function to convert complex numbers to polar coordinates.\nfn convert(numbers: isize) -> (f64, f64) {\n    let real = numbers as f64;\n    let imaginary = numbers as f64;\n\n    let radius = (real.powi(2) + imaginary.powi(2)).sqrt();\n    let angle = imaginary.atan2(real);\n\n    (radius, angle)\n}", "is_solved": false}
{"name": "mbpp_436_neg_nos", "language": "rs", "prompt": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_436_neg_nos.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "neg_nos", "test": "\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n", "solution": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n    let mut neg_numbers = Vec::new();\n\n    for num in list1 {\n        if num < 0 {\n            neg_numbers.push(num);\n        }\n    }\n\n    neg_numbers\n}", "is_solved": true}
{"name": "mbpp_397_median_numbers", "language": "rs", "prompt": "/// Write a function to find the median of three numbers.\nfn median_numbers(a: isize, b: isize, c: isize) -> f64 {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_397_median_numbers.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "median_numbers", "test": "\n\nfn main() {\n    let candidate = median_numbers;\n    assert_eq!(candidate(25, 55, 65), 55.0);\n    assert_eq!(candidate(20, 10, 30), 20.0);\n    assert_eq!(candidate(15, 45, 75), 45.0);\n}\n", "solution": "/// Write a function to find the median of three numbers.\nfn median_numbers(a: isize, b: isize, c: isize) -> f64 {\n    let mut nums = [a, b, c];\n    nums.sort();\n    nums[1] as f64\n}", "is_solved": true}
{"name": "mbpp_745_divisible_by_digits", "language": "rs", "prompt": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "divisible_by_digits", "test": "\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n", "solution": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\n    for num in startnum..=endnum {\n        let mut divisible = true;\n        let digits = num.to_string().chars().filter_map(|c| c.to_digit(10)).map(|d| d as isize);\n\n        for digit in digits {\n            if digit == 0 || num % digit != 0 {\n                divisible = false;\n                break;\n            }\n        }\n\n        if divisible {\n            result.push(num);\n        }\n    }\n\n    result\n}", "is_solved": false}
{"name": "mbpp_554_Split", "language": "rs", "prompt": "/// Write a rsthon function which takes a vector of integers and only returns the odd ones.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_554_Split.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "Split", "test": "\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), vec![1, 3, 5]);\n    assert_eq!(candidate(vec![10, 11, 12, 13]), vec![11, 13]);\n    assert_eq!(candidate(vec![7, 8, 9, 1]), vec![7, 9, 1]);\n}\n", "solution": "/// Write a rsthon function which takes a vector of integers and only returns the odd ones.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut odd_numbers = Vec::new();\n\n    for number in list {\n        if number % 2 != 0 {\n            odd_numbers.push(number);\n        }\n    }\n\n    odd_numbers\n}", "is_solved": true}
{"name": "mbpp_128_long_words", "language": "rs", "prompt": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_128_long_words.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "long_words", "test": "\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n", "solution": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n    let words: Vec<String> = str.split_whitespace().map(|s| s.to_string()).collect();\n    let mut long_words: Vec<String> = Vec::new();\n\n    for word in words {\n        if word.len() > n as usize {\n            long_words.push(word);\n        }\n    }\n\n    long_words\n}", "is_solved": true}
{"name": "mbpp_69_is_sublist", "language": "rs", "prompt": "/// Write a function to check whether a vector contains the given subvector or not.\nfn is_sublist(l: Vec<isize>, s: Vec<isize>) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_69_is_sublist.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "is_sublist", "test": "\n\nfn main() {\n    let candidate = is_sublist;\n    assert_eq!(candidate(vec![2, 4, 3, 5, 7], vec![3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, 3, 5, 7], vec![4, 3]), true);\n    assert_eq!(candidate(vec![2, 4, 3, 5, 7], vec![1, 6]), false);\n}\n", "solution": "/// Write a function to check whether a vector contains the given subvector or not.\nfn is_sublist(l: Vec<isize>, s: Vec<isize>) -> bool {\n    if s.is_empty() {\n        return true;\n    }\n\n    if l.len() < s.len() {\n        return false;\n    }\n\n    for i in 0..=(l.len() - s.len()) {\n        if l[i..i + s.len()] == s[..] {\n            return true;\n        }\n    }\n\n    false\n}", "is_solved": true}
{"name": "mbpp_732_replace_specialchar", "language": "rs", "prompt": "/// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfn replace_specialchar(text: String) -> String {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_732_replace_specialchar.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "replace_specialchar", "test": "\n\nfn main() {\n    let candidate = replace_specialchar;\n    assert_eq!(candidate(String::from(\"Python language, Programming language.\")), String::from(\"Python:language::Programming:language:\"));\n    assert_eq!(candidate(String::from(\"a b c,d e f\")), String::from(\"a:b:c:d:e:f\"));\n    assert_eq!(candidate(String::from(\"ram reshma,ram rahim\")), String::from(\"ram:reshma:ram:rahim\"));\n}\n", "solution": "/// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfn replace_specialchar(text: String) -> String {\n    text.replace(|c| c == ' ' || c == ',' || c == '.', \":\")", "is_solved": false}
{"name": "mbpp_141_pancake_sort", "language": "rs", "prompt": "/// Write a function to sort a vector of elements.\nfn pancake_sort(nums: Vec<isize>) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "pancake_sort", "test": "\n\nfn main() {\n    let candidate = pancake_sort;\n    assert_eq!(candidate(vec![15, 79, 25, 38, 69]), vec![15, 25, 38, 69, 79]);\n    assert_eq!(candidate(vec![98, 12, 54, 36, 85]), vec![12, 36, 54, 85, 98]);\n    assert_eq!(candidate(vec![41, 42, 32, 12, 23]), vec![12, 23, 32, 41, 42]);\n}\n", "solution": "/// Write a function to sort a vector of elements.\nfn pancake_sort(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    let mut n = nums.len();\n\n    while n > 1 {\n        let mut max_idx = 0;\n\n        for i in 1..n {\n            if nums[i] > nums[max_idx] {\n                max_idx = i;\n            }\n        }\n\n        if max_idx != n - 1 {\n            nums[0..=max_idx].reverse();\n            nums[0..n].reverse();\n        }\n\n        n -= 1;\n    }\n\n    nums\n}", "is_solved": true}
{"name": "mbpp_308_large_product", "language": "rs", "prompt": "/// Write a function to find the specified number of largest products from two given vectors, selecting one factor from each vector.\nfn large_product(nums1: Vec<isize>, nums2: Vec<isize>, N: isize) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_308_large_product.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "large_product", "test": "\n\nfn main() {\n    let candidate = large_product;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], vec![3, 6, 8, 9, 10, 6], 3), vec![60, 54, 50]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], vec![3, 6, 8, 9, 10, 6], 4), vec![60, 54, 50, 48]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], vec![3, 6, 8, 9, 10, 6], 5), vec![60, 54, 50, 48, 45]);\n}\n", "solution": "/// Write a function to find the specified number of largest products from two given vectors, selecting one factor from each vector.\nfn large_product(nums1: Vec<isize>, nums2: Vec<isize>, N: isize) -> Vec<isize> {\n    let mut products = Vec::new();\n\n    for num1 in &nums1 {\n        for num2 in &nums2 {\n            products.push(num1 * num2);\n        }\n    }\n\n    products.sort_unstable_by(|a, b| b.cmp(a));\n    products.truncate(N as usize);\n\n    products\n}", "is_solved": true}
{"name": "mbpp_293_otherside_rightangle", "language": "rs", "prompt": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_293_otherside_rightangle.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "otherside_rightangle", "test": "\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n", "solution": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w_squared = (w * w) as f64;\n    let h_squared = (h * h) as f64;\n    let other_side = (w_squared + h_squared).sqrt();\n    other_side\n}", "is_solved": true}
{"name": "mbpp_106_add_lists", "language": "rs", "prompt": "/// Write a function to append the given vector to the given tuples.\nfn add_lists(test_list: Vec<isize>, test_tup: (isize, isize)) -> (isize, isize, isize, isize, isize) {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_106_add_lists.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "add_lists", "test": "\n\nfn main() {\n    let candidate = add_lists;\n    assert_eq!(candidate(vec![5, 6, 7], (9, 10)), (9, 10, 5, 6, 7));\n    assert_eq!(candidate(vec![6, 7, 8], (10, 11)), (10, 11, 6, 7, 8));\n    assert_eq!(candidate(vec![7, 8, 9], (11, 12)), (11, 12, 7, 8, 9));\n}\n", "solution": "/// Write a function to append the given vector to the given tuples.\nfn add_lists(test_list: Vec<isize>, test_tup: (isize, isize)) -> (isize, isize, isize, isize, isize) {\n    let (t1, t2) = test_tup;\n    let mut result = (t1, t2, 0, 0, 0);\n\n    for (i, item) in test_list.iter().enumerate() {\n        if i < 3 {\n            result.2+i = *item;\n        } else {\n            break;\n        }\n    }\n\n    result\n}", "is_solved": false}
{"name": "mbpp_720_add_dict_to_tuple", "language": "rs", "prompt": "use std::collections::HashMap;\n\n/// Write a function to add a HashMap to the tuple. The output should be a tuple.\nfn add_dict_to_tuple(test_tup: (isize, isize, isize), test_dict: HashMap<String, isize>) -> (isize, isize, isize, HashMap<String, isize>) {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_720_add_dict_to_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "add_dict_to_tuple", "test": "\n\nfn main() {\n    let candidate = add_dict_to_tuple;\n    assert_eq!(candidate((4, 5, 6), HashMap::from([(String::from(\"MSAM\"), 1), (String::from(\"is\"), 2), (String::from(\"best\"), 3)])), (4, 5, 6, HashMap::from([(String::from(\"MSAM\"), 1), (String::from(\"is\"), 2), (String::from(\"best\"), 3)])));\n    assert_eq!(candidate((1, 2, 3), HashMap::from([(String::from(\"UTS\"), 2), (String::from(\"is\"), 3), (String::from(\"Worst\"), 4)])), (1, 2, 3, HashMap::from([(String::from(\"UTS\"), 2), (String::from(\"is\"), 3), (String::from(\"Worst\"), 4)])));\n    assert_eq!(candidate((8, 9, 10), HashMap::from([(String::from(\"POS\"), 3), (String::from(\"is\"), 4), (String::from(\"Okay\"), 5)])), (8, 9, 10, HashMap::from([(String::from(\"POS\"), 3), (String::from(\"is\"), 4), (String::from(\"Okay\"), 5)])));\n}\n", "solution": "use std::collections::HashMap;\n\n/// Write a function to add a HashMap to the tuple. The output should be a tuple.\nfn add_dict_to_tuple(test_tup: (isize, isize, isize), test_dict: HashMap<String, isize>) -> (isize, isize, isize, HashMap<String, isize>) {\n    let (a, b, c) = test_tup;\n    let result = (a, b, c, test_dict);\n    result\n}", "is_solved": true}
{"name": "mbpp_395_first_non_repeating_character", "language": "rs", "prompt": "/// Write a rsthon function to find the first non-repeated character in a given string.\nfn first_non_repeating_character(str1: String) -> Option<String> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "first_non_repeating_character", "test": "\n\nfn main() {\n    let candidate = first_non_repeating_character;\n    assert_eq!(candidate(String::from(\"abcabc\")), None);\n    assert_eq!(candidate(String::from(\"abc\")), Some(String::from(\"a\")));\n    assert_eq!(candidate(String::from(\"ababc\")), Some(String::from(\"c\")));\n}\n", "solution": "/// Write a rsthon function to find the first non-repeated character in a given string.\nfn first_non_repeating_character(str1: String) -> Option<String> {\n    let mut char_count = std::collections::HashMap::new();\n\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if let Some(count) = char_count.get(&c) {\n            if *count == 1 {\n                return Some(c.to_string());\n            }\n        }\n    }\n\n    None\n}", "is_solved": true}
{"name": "mbpp_9_find_Rotations", "language": "rs", "prompt": "/// Write a rsthon function to find the minimum number of rotations (greater than 0) required to get the same string.\nfn find_Rotations(str: String) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_9_find_Rotations.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "find_Rotations", "test": "\n\nfn main() {\n    let candidate = find_Rotations;\n    assert_eq!(candidate(String::from(\"aaaa\")), 1);\n    assert_eq!(candidate(String::from(\"ab\")), 2);\n    assert_eq!(candidate(String::from(\"abc\")), 3);\n}\n", "solution": "/// Write a rsthon function to find the minimum number of rotations (greater than 0) required to get the same string.\nfn find_Rotations(str: String) -> isize {\n    let len = str.len();\n    let mut rotations = 1;\n    let mut rotated_str = str.clone();\n\n    while rotations <= len {\n        rotated_str = format!(\"{}{}\", &rotated_str[1..], &rotated_str[0..1]);\n        if rotated_str == str {\n            return rotations as isize;\n        }\n        rotations += 1;\n    }\n\n    -1\n}", "is_solved": true}
{"name": "mbpp_792_count_list", "language": "rs", "prompt": "/// Write a rsthon function to count the number of vectors in a given number of vectors.\nfn count_list(input_list: Vec<Vec<isize>>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_792_count_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "count_list", "test": "\n\nfn main() {\n    let candidate = count_list;\n    assert_eq!(candidate(vec![vec![1, 3], vec![5, 7], vec![9, 11], vec![13, 15, 17]]), 4);\n    assert_eq!(candidate(vec![vec![1, 2], vec![2, 3], vec![4, 5]]), 3);\n    assert_eq!(candidate(vec![vec![1, 0], vec![2, 0]]), 2);\n}\n", "solution": "/// Write a rsthon function to count the number of vectors in a given number of vectors.\nfn count_list(input_list: Vec<Vec<isize>>) -> isize {\n    let count = input_list.len() as isize;\n    count\n}", "is_solved": true}
{"name": "mbpp_477_is_lower", "language": "rs", "prompt": "/// Write a rsthon function to convert the given string to lower case.\nfn is_lower(string: String) -> String {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_477_is_lower.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "is_lower", "test": "\n\nfn main() {\n    let candidate = is_lower;\n    assert_eq!(candidate(String::from(\"InValid\")), String::from(\"invalid\"));\n    assert_eq!(candidate(String::from(\"TruE\")), String::from(\"true\"));\n    assert_eq!(candidate(String::from(\"SenTenCE\")), String::from(\"sentence\"));\n}\n", "solution": "/// Write a rsthon function to convert the given string to lower case.\nfn is_lower(string: String) -> String {\n    string.to_lowercase()\n}", "is_solved": true}
{"name": "mbpp_422_find_Average_Of_Cube", "language": "rs", "prompt": "/// Write a rsthon function to find the average of cubes of first n natural numbers.\nfn find_Average_Of_Cube(n: isize) -> f64 {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_422_find_Average_Of_Cube.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "find_Average_Of_Cube", "test": "\n\nfn main() {\n    let candidate = find_Average_Of_Cube;\n    assert_eq!(candidate(2), 4.5);\n    assert_eq!(candidate(3), 12.0);\n    assert_eq!(candidate(1), 1.0);\n}\n", "solution": "/// Write a rsthon function to find the average of cubes of first n natural numbers.\nfn find_Average_Of_Cube(n: isize) -> f64 {\n    let mut sum: isize = 0;\n\n    for i in 1..=n {\n        sum += i.pow(3);\n    }\n\n    let average = sum as f64 / n as f64;\n    average\n}", "is_solved": true}
{"name": "mbpp_637_noprofit_noloss", "language": "rs", "prompt": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_637_noprofit_noloss.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "noprofit_noloss", "test": "\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n", "solution": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}", "is_solved": true}
{"name": "mbpp_557_toggle_string", "language": "rs", "prompt": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_557_toggle_string.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "toggle_string", "test": "\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n", "solution": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n    string.chars()\n        .map(|c| {\n            if c.is_lowercase() {\n                c.to_uppercase().collect::<String>()\n            } else {\n                c.to_lowercase().collect::<String>()\n            }\n        })\n        .collect()\n}", "is_solved": true}
{"name": "mbpp_786_right_insertion", "language": "rs", "prompt": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_786_right_insertion.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "right_insertion", "test": "\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n", "solution": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left = 0;\n    let mut right = a.len();\n\n    while left < right {\n        let mid = left + (right - left) / 2;\n        if x < a[mid] {\n            right = mid;\n        } else {\n            left = mid + 1;\n        }\n    }\n\n    left as isize\n}", "is_solved": true}
{"name": "mbpp_807_first_odd", "language": "rs", "prompt": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_807_first_odd.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "first_odd", "test": "\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n", "solution": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 != 0 {\n            return num;\n        }\n    }\n    -1\n}", "is_solved": true}
{"name": "mbpp_631_replace_spaces", "language": "rs", "prompt": "/// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfn replace_spaces(text: String) -> String {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_631_replace_spaces.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "replace_spaces", "test": "\n\nfn main() {\n    let candidate = replace_spaces;\n    assert_eq!(candidate(String::from(\"Jumanji The Jungle\")), String::from(\"Jumanji_The_Jungle\"));\n    assert_eq!(candidate(String::from(\"The_Avengers\")), String::from(\"The Avengers\"));\n    assert_eq!(candidate(String::from(\"Fast and Furious\")), String::from(\"Fast_and_Furious\"));\n}\n", "solution": "/// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfn replace_spaces(text: String) -> String {\n    text.chars()\n        .map(|c| match c {\n            ' ' => '_',\n            '_' => ' ',\n            _ => c,\n        })\n        .collect()\n}", "is_solved": true}
{"name": "mbpp_573_unique_product", "language": "rs", "prompt": "/// Write a rsthon function to calculate the product of the unique numbers in a given vector.\nfn unique_product(list_data: Vec<isize>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_573_unique_product.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "unique_product", "test": "\n\nfn main() {\n    let candidate = unique_product;\n    assert_eq!(candidate(vec![10, 20, 30, 40, 20, 50, 60, 40]), 720000000);\n    assert_eq!(candidate(vec![1, 2, 3, 1]), 6);\n    assert_eq!(candidate(vec![7, 8, 9, 0, 1, 1]), 0);\n}\n", "solution": "/// Write a rsthon function to calculate the product of the unique numbers in a given vector.\nfn unique_product(list_data: Vec<isize>) -> isize {\n    let unique_numbers: Vec<isize> = list_data.into_iter().unique().collect();\n    let product: isize = unique_numbers.into_iter().product();\n    product\n}", "is_solved": false}
{"name": "mbpp_643_text_match_wordz_middle", "language": "rs", "prompt": "/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfn text_match_wordz_middle(text: String) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_643_text_match_wordz_middle.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "text_match_wordz_middle", "test": "\n\nfn main() {\n    let candidate = text_match_wordz_middle;\n    assert_eq!(candidate(String::from(\"pythonzabc.\")), true);\n    assert_eq!(candidate(String::from(\"zxyabc.\")), false);\n    assert_eq!(candidate(String::from(\"  lang  .\")), false);\n}\n", "solution": "/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfn text_match_wordz_middle(text: String) -> bool {\n    let chars = text.chars().collect::<Vec<char>>();\n    let len = chars.len();\n\n    if len <= 2 {\n        return false;\n    }\n\n    for i in 1..len - 1 {\n        if chars[i] == 'z' {\n            return true;\n        }\n    }\n\n    false\n}", "is_solved": true}
{"name": "mbpp_299_max_aggregate", "language": "rs", "prompt": "/// Write a function to calculate the maximum aggregate from the vector of tuples.\nfn max_aggregate(stdata: Vec<(String, isize)>) -> (String, isize) {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_299_max_aggregate.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "max_aggregate", "test": "\n\nfn main() {\n    let candidate = max_aggregate;\n    assert_eq!(candidate(vec![(String::from(\"Juan Whelan\"), 90), (String::from(\"Sabah Colley\"), 88), (String::from(\"Peter Nichols\"), 7), (String::from(\"Juan Whelan\"), 122), (String::from(\"Sabah Colley\"), 84)]), (String::from(\"Juan Whelan\"), 212));\n    assert_eq!(candidate(vec![(String::from(\"Juan Whelan\"), 50), (String::from(\"Sabah Colley\"), 48), (String::from(\"Peter Nichols\"), 37), (String::from(\"Juan Whelan\"), 22), (String::from(\"Sabah Colley\"), 14)]), (String::from(\"Juan Whelan\"), 72));\n    assert_eq!(candidate(vec![(String::from(\"Juan Whelan\"), 10), (String::from(\"Sabah Colley\"), 20), (String::from(\"Peter Nichols\"), 30), (String::from(\"Juan Whelan\"), 40), (String::from(\"Sabah Colley\"), 50)]), (String::from(\"Sabah Colley\"), 70));\n}\n", "solution": "/// Write a function to calculate the maximum aggregate from the vector of tuples.\nfn max_aggregate(stdata: Vec<(String, isize)>) -> (String, isize) {\n    let mut max_aggregate = (String::new(), isize::MIN);\n\n    for data in stdata {\n        if data.1 > max_aggregate.1 {\n            max_aggregate = data;\n        }\n    }\n\n    max_aggregate\n}", "is_solved": false}
{"name": "mbpp_474_replace_char", "language": "rs", "prompt": "/// Write a function to replace characters in a string.\nfn replace_char(str1: String, ch: String, newch: String) -> String {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_474_replace_char.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "replace_char", "test": "\n\nfn main() {\n    let candidate = replace_char;\n    assert_eq!(candidate(String::from(\"polygon\"), String::from(\"y\"), String::from(\"l\")), String::from(\"pollgon\"));\n    assert_eq!(candidate(String::from(\"character\"), String::from(\"c\"), String::from(\"a\")), String::from(\"aharaater\"));\n    assert_eq!(candidate(String::from(\"python\"), String::from(\"l\"), String::from(\"a\")), String::from(\"python\"));\n}\n", "solution": "/// Write a function to replace characters in a string.\nfn replace_char(str1: String, ch: String, newch: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str\n}", "is_solved": true}
{"name": "mbpp_433_check_greater", "language": "rs", "prompt": "/// Write a function to check whether the entered number is greater than the elements of the given vector.\nfn check_greater(arr: Vec<isize>, number: isize) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_433_check_greater.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "check_greater", "test": "\n\nfn main() {\n    let candidate = check_greater;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 4), false);\n    assert_eq!(candidate(vec![2, 3, 4, 5, 6], 8), true);\n    assert_eq!(candidate(vec![9, 7, 4, 8, 6, 1], 11), true);\n}\n", "solution": "/// Write a function to check whether the entered number is greater than the elements of the given vector.\nfn check_greater(arr: Vec<isize>, number: isize) -> bool {\n    for element in arr {\n        if number <= element {\n            return false;\n        }\n    }\n    true\n}", "is_solved": true}
{"name": "mbpp_427_change_date_format", "language": "rs", "prompt": "/// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfn change_date_format(dt: String) -> String {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_427_change_date_format.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "change_date_format", "test": "\n\nfn main() {\n    let candidate = change_date_format;\n    assert_eq!(candidate(String::from(\"2026-01-02\")), String::from(\"02-01-2026\"));\n    assert_eq!(candidate(String::from(\"2020-11-13\")), String::from(\"13-11-2020\"));\n    assert_eq!(candidate(String::from(\"2021-04-26\")), String::from(\"26-04-2021\"));\n}\n", "solution": "/// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfn change_date_format(dt: String) -> String {\n    let parts: Vec<&str> = dt.split('-').collect();\n    if parts.len() != 3 {\n        return \"Invalid date format\".to_string();\n    }\n    format!(\"{}-{}-{}\", parts[2], parts[1], parts[0])\n}", "is_solved": true}
{"name": "mbpp_442_positive_count", "language": "rs", "prompt": "/// Write a function to find the ration of positive numbers in a vector of integers.\nfn positive_count(nums: Vec<isize>) -> f64 {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_442_positive_count.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "positive_count", "test": "\n\nfn main() {\n    let candidate = positive_count;\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.54);\n    assert_eq!(candidate(vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.69);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.56);\n}\n", "solution": "/// Write a function to find the ration of positive numbers in a vector of integers.\nfn positive_count(nums: Vec<isize>) -> f64 {\n    let total_nums = nums.len() as f64;\n    let mut positive_count = 0;\n\n    for num in nums {\n        if num > 0 {\n            positive_count += 1;\n        }\n    }\n\n    positive_count as f64 / total_nums\n}", "is_solved": false}
{"name": "mbpp_453_sumofFactors", "language": "rs", "prompt": "/// Write a rsthon function to find the sum of even factors of a number.\nfn sumofFactors(n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_453_sumofFactors.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "sumofFactors", "test": "\n\nfn main() {\n    let candidate = sumofFactors;\n    assert_eq!(candidate(18), 26);\n    assert_eq!(candidate(30), 48);\n    assert_eq!(candidate(6), 8);\n}\n", "solution": "/// Write a rsthon function to find the sum of even factors of a number.\nfn sumofFactors(n: isize) -> isize {\n    let mut sum = 0;\n\n    for i in 1..=(n / 2) {\n        if n % i == 0 && i % 2 == 0 {\n            sum += i;\n        }\n    }\n\n    if n % 2 == 0 {\n        sum += n;\n    }\n\n    sum\n}", "is_solved": true}
{"name": "mbpp_478_remove_lowercase", "language": "rs", "prompt": "/// Write a function to remove lowercase substrings from a given string.\nfn remove_lowercase(str1: String) -> String {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_478_remove_lowercase.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "remove_lowercase", "test": "\n\nfn main() {\n    let candidate = remove_lowercase;\n    assert_eq!(candidate(String::from(\"PYTHon\")), String::from(\"PYTH\"));\n    assert_eq!(candidate(String::from(\"FInD\")), String::from(\"FID\"));\n    assert_eq!(candidate(String::from(\"STRinG\")), String::from(\"STRG\"));\n}\n", "solution": "/// Write a function to remove lowercase substrings from a given string.\nfn remove_lowercase(str1: String) -> String {\n    let mut result = String::new();\n\n    for c in str1.chars() {\n        if c.is_uppercase() {\n            result.push(c);\n        }\n    }\n\n    result\n}", "is_solved": true}
{"name": "mbpp_18_remove_dirty_chars", "language": "rs", "prompt": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_18_remove_dirty_chars.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "remove_dirty_chars", "test": "\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n", "solution": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut clean_string = String::new();\n    let second_string_chars: Vec<char> = second_string.chars().collect();\n\n    for c in string.chars() {\n        if !second_string_chars.contains(&c) {\n            clean_string.push(c);\n        }\n    }\n\n    clean_string\n}", "is_solved": true}
{"name": "mbpp_772_remove_length", "language": "rs", "prompt": "/// Write a function to remove all the words with k length in the given string.\nfn remove_length(test_str: String, K: isize) -> String {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_772_remove_length.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "remove_length", "test": "\n\nfn main() {\n    let candidate = remove_length;\n    assert_eq!(candidate(String::from(\"The person is most value tet\"), 3), String::from(\"person is most value\"));\n    assert_eq!(candidate(String::from(\"If you told me about this ok\"), 4), String::from(\"If you me about ok\"));\n    assert_eq!(candidate(String::from(\"Forces of darkeness is come into the play\"), 4), String::from(\"Forces of darkeness is the\"));\n}\n", "solution": "/// Write a function to remove all the words with k length in the given string.\nfn remove_length(test_str: String, K: isize) -> String {\n    let words: Vec<&str> = test_str.split_whitespace().collect();\n    let filtered_words: Vec<&str> = words.into_iter().filter(|word| word.len() != K as usize).collect();\n    filtered_words.join(\" \")\n}", "is_solved": true}
{"name": "mbpp_752_jacobsthal_num", "language": "rs", "prompt": "/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfn jacobsthal_num(n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_752_jacobsthal_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "jacobsthal_num", "test": "\n\nfn main() {\n    let candidate = jacobsthal_num;\n    assert_eq!(candidate(5), 11);\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(4), 5);\n    assert_eq!(candidate(13), 2731);\n}\n", "solution": "/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfn jacobsthal_num(n: isize) -> isize {\n    if n == 0 {\n        return 0;\n    } else if n == 1 {\n        return 1;\n    } else {\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n    }\n}", "is_solved": true}
{"name": "mbpp_145_max_Abs_Diff", "language": "rs", "prompt": "/// Write a rsthon function to find the maximum difference between any two elements in a given vector.\nfn max_Abs_Diff(arr: Vec<isize>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_145_max_Abs_Diff.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "max_Abs_Diff", "test": "\n\nfn main() {\n    let candidate = max_Abs_Diff;\n    assert_eq!(candidate(vec![2, 1, 5, 3]), 4);\n    assert_eq!(candidate(vec![9, 3, 2, 5, 1]), 8);\n    assert_eq!(candidate(vec![3, 2, 1]), 2);\n}\n", "solution": "/// Write a rsthon function to find the maximum difference between any two elements in a given vector.\nfn max_Abs_Diff(arr: Vec<isize>) -> isize {\n    let mut max_diff = 0;\n    let mut min_element = arr[0];\n    let mut max_element = arr[0];\n\n    for &num in arr.iter() {\n        if num < min_element {\n            min_element = num;\n        }\n        if num > max_element {\n            max_element = num;\n        }\n    }\n\n    max_diff = max_element - min_element;\n    max_diff\n}", "is_solved": true}
{"name": "mbpp_572_two_unique_nums", "language": "rs", "prompt": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "two_unique_nums", "test": "\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n", "solution": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n\n    unique_nums\n}", "is_solved": false}
{"name": "mbpp_556_find_Odd_Pair", "language": "rs", "prompt": "/// Write a rsthon function to count the number of pairs whose xor value is odd.\nfn find_Odd_Pair(A: Vec<isize>, N: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_556_find_Odd_Pair.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "find_Odd_Pair", "test": "\n\nfn main() {\n    let candidate = find_Odd_Pair;\n    assert_eq!(candidate(vec![5, 4, 7, 2, 1], 5), 6);\n    assert_eq!(candidate(vec![7, 2, 8, 1, 0, 5, 11], 7), 12);\n    assert_eq!(candidate(vec![1, 2, 3], 3), 2);\n}\n", "solution": "/// Write a rsthon function to count the number of pairs whose xor value is odd.\nfn find_Odd_Pair(A: Vec<isize>, N: isize) -> isize {\n    let mut count = 0;\n\n    for i in 0..(N as usize) {\n        for j in (i + 1)..(N as usize) {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count += 1;\n            }\n        }\n    }\n\n    count\n}", "is_solved": true}
{"name": "mbpp_306_max_sum_increasing_subseq", "language": "rs", "prompt": "/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfn max_sum_increasing_subseq(a: Vec<isize>, n: isize, index: isize, k: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "max_sum_increasing_subseq", "test": "\n\nfn main() {\n    let candidate = max_sum_increasing_subseq;\n    assert_eq!(candidate(vec![1, 101, 2, 3, 100, 4, 5], 7, 4, 6), 11);\n    assert_eq!(candidate(vec![1, 101, 2, 3, 100, 4, 5], 7, 2, 5), 7);\n    assert_eq!(candidate(vec![11, 15, 19, 21, 26, 28, 31], 7, 2, 4), 71);\n}\n", "solution": "/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfn max_sum_increasing_subseq(a: Vec<isize>, n: isize, index: isize, k: isize) -> isize {\n    let mut dp = vec![0; n as usize];\n    dp[0] = a[0];\n\n    for i in 1..n as usize {\n        dp[i] = a[i];\n        for j in 0..i {\n            if a[i] > a[j] {\n                dp[i] = dp[i].max(dp[j] + a[i]);\n            }\n        }\n    }\n\n    let mut max_sum = 0;\n    for i in 0..=index as usize {\n        if i + k as usize + 1 < n as usize && a[i + k as usize + 1] > a[i] {\n            max_sum = max_sum.max(dp[i] + a[i + k as usize + 1]);\n        }\n    }\n\n    max_sum\n}", "is_solved": false}
{"name": "mbpp_388_highest_Power_of_2", "language": "rs", "prompt": "/// Write a rsthon function to find the highest power of 2 that is less than or equal to n.\nfn highest_Power_of_2(n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_388_highest_Power_of_2.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "highest_Power_of_2", "test": "\n\nfn main() {\n    let candidate = highest_Power_of_2;\n    assert_eq!(candidate(10), 8);\n    assert_eq!(candidate(19), 16);\n    assert_eq!(candidate(32), 32);\n}\n", "solution": "/// Write a rsthon function to find the highest power of 2 that is less than or equal to n.\nfn highest_Power_of_2(n: isize) -> isize {\n    let mut power = 1;\n    while power * 2 <= n {\n        power *= 2;\n    }\n    power\n}", "is_solved": true}
{"name": "mbpp_401_add_nested_tuples", "language": "rs", "prompt": "/// Write a function to perform index wise addition of vector elements in the given two nested vectors.\nfn add_nested_tuples(test_tup1: Vec<Vec<isize>>, test_tup2: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_401_add_nested_tuples.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "add_nested_tuples", "test": "\n\nfn main() {\n    let candidate = add_nested_tuples;\n    assert_eq!(candidate(vec![vec![1, 3], vec![4, 5], vec![2, 9], vec![1, 10]], vec![vec![6, 7], vec![3, 9], vec![1, 1], vec![7, 3]]), vec![vec![7, 10], vec![7, 14], vec![3, 10], vec![8, 13]]);\n    assert_eq!(candidate(vec![vec![2, 4], vec![5, 6], vec![3, 10], vec![2, 11]], vec![vec![7, 8], vec![4, 10], vec![2, 2], vec![8, 4]]), vec![vec![9, 12], vec![9, 16], vec![5, 12], vec![10, 15]]);\n    assert_eq!(candidate(vec![vec![3, 5], vec![6, 7], vec![4, 11], vec![3, 12]], vec![vec![8, 9], vec![5, 11], vec![3, 3], vec![9, 5]]), vec![vec![11, 14], vec![11, 18], vec![7, 14], vec![12, 17]]);\n}\n", "solution": "/// Write a function to perform index wise addition of vector elements in the given two nested vectors.\nfn add_nested_tuples(test_tup1: Vec<Vec<isize>>, test_tup2: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut result: Vec<Vec<isize>> = Vec::new();\n\n    for (i, inner_tup1) in test_tup1.iter().enumerate() {\n        let mut inner_result: Vec<isize> = Vec::new();\n        for (j, value) in inner_tup1.iter().enumerate() {\n            inner_result.push(value + test_tup2[i][j]);\n        }\n        result.push(inner_result);\n    }\n\n    result\n}", "is_solved": true}
{"name": "mbpp_435_last_Digit", "language": "rs", "prompt": "/// Write a rsthon function to find the last digit of a given number.\nfn last_Digit(n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_435_last_Digit.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "last_Digit", "test": "\n\nfn main() {\n    let candidate = last_Digit;\n    assert_eq!(candidate(123), 3);\n    assert_eq!(candidate(25), 5);\n    assert_eq!(candidate(30), 0);\n}\n", "solution": "/// Write a rsthon function to find the last digit of a given number.\nfn last_Digit(n: isize) -> isize {\n    n.abs() % 10\n}", "is_solved": true}
{"name": "mbpp_611_max_of_nth", "language": "rs", "prompt": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_611_max_of_nth.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "max_of_nth", "test": "\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n", "solution": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    if test_list.is_empty() || N < 0 {\n        return isize::MIN;\n    }\n\n    let mut max_value = isize::MIN;\n    for row in test_list.iter() {\n        if N as usize >= row.len() {\n            continue;\n        }\n        max_value = isize::max(max_value, row[N as usize]);\n    }\n\n    max_value\n}", "is_solved": true}
{"name": "mbpp_280_sequential_search", "language": "rs", "prompt": "/// Write a function that takes in a vector and element and returns a tuple containing a boolean that indicates if the element is in the vector and the index position of the element (or -1 if the element is not found).\nfn sequential_search(dlist: Vec<isize>, item: isize) -> (bool, isize) {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_280_sequential_search.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "sequential_search", "test": "\n\nfn main() {\n    let candidate = sequential_search;\n    assert_eq!(candidate(vec![11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31), (true, 3));\n    assert_eq!(candidate(vec![12, 32, 45, 62, 35, 47, 44, 61], 61), (true, 7));\n    assert_eq!(candidate(vec![9, 10, 17, 19, 22, 39, 48, 56], 48), (true, 6));\n}\n", "solution": "/// Write a function that takes in a vector and element and returns a tuple containing a boolean that indicates if the element is in the vector and the index position of the element (or -1 if the element is not found).\nfn sequential_search(dlist: Vec<isize>, item: isize) -> (bool, isize) {\n    for (index, &element) in dlist.iter().enumerate() {\n        if element == item {\n            return (true, index as isize);\n        }\n    }\n    (false, -1)\n}", "is_solved": true}
{"name": "mbpp_576_is_Sub_Array", "language": "rs", "prompt": "/// Write a rsthon function to check whether a vector is subvector of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "is_Sub_Array", "test": "\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n", "solution": "/// Write a rsthon function to check whether a vector is subvector of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    if A.len() < B.len() {\n        return false;\n    }\n\n    let mut i = 0;\n    let mut j = 0;\n\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i += 1;\n        }\n    }\n\n    j == B.len()\n}", "is_solved": true}
{"name": "mbpp_131_reverse_vowels", "language": "rs", "prompt": "/// Write a rsthon function to reverse only the vowels of a given string (where y is not a vowel).\nfn reverse_vowels(str1: String) -> String {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_131_reverse_vowels.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "reverse_vowels", "test": "\n\nfn main() {\n    let candidate = reverse_vowels;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"Python\"));\n    assert_eq!(candidate(String::from(\"USA\")), String::from(\"ASU\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"ab\"));\n}\n", "solution": "/// Write a rsthon function to reverse only the vowels of a given string (where y is not a vowel).\nfn reverse_vowels(str1: String) -> String {\n    let vowels = \"aeiouAEIOU\";\n    let mut chars = str1.chars().collect::<Vec<char>>();\n    let mut i = 0;\n    let mut j = chars.len() - 1;\n\n    while i < j {\n        if !vowels.contains(chars[i]) {\n            i += 1;\n            continue;\n        }\n        if !vowels.contains(chars[j]) {\n            j -= 1;\n            continue;\n        }\n\n        chars.swap(i, j);\n        i += 1;\n        j -= 1;\n    }\n\n    chars.into_iter().collect()\n}", "is_solved": true}
{"name": "mbpp_432_median_trapezium", "language": "rs", "prompt": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_432_median_trapezium.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "median_trapezium", "test": "\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n", "solution": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = median * height as f64;\n    area\n}", "is_solved": false}
{"name": "mbpp_161_remove_elements", "language": "rs", "prompt": "/// Write a function to remove all elements from a given vector present in another vector.\nfn remove_elements(list1: Vec<isize>, list2: Vec<isize>) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_161_remove_elements.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "remove_elements", "test": "\n\nfn main() {\n    let candidate = remove_elements;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], vec![2, 4, 6, 8]), vec![1, 3, 5, 7, 9, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], vec![1, 3, 5, 7]), vec![2, 4, 6, 8, 9, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], vec![5, 7]), vec![1, 2, 3, 4, 6, 8, 9, 10]);\n}\n", "solution": "/// Write a function to remove all elements from a given vector present in another vector.\nfn remove_elements(list1: Vec<isize>, list2: Vec<isize>) -> Vec<isize> {\n    list1.into_iter().filter(|x| !list2.contains(x)).collect()\n}", "is_solved": true}
{"name": "mbpp_597_find_kth", "language": "rs", "prompt": "/// Write a function to find kth element from the given two sorted vectors.\nfn find_kth(arr1: Vec<isize>, arr2: Vec<isize>, k: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_597_find_kth.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "find_kth", "test": "\n\nfn main() {\n    let candidate = find_kth;\n    assert_eq!(candidate(vec![2, 3, 6, 7, 9], vec![1, 4, 8, 10], 5), 6);\n    assert_eq!(candidate(vec![100, 112, 256, 349, 770], vec![72, 86, 113, 119, 265, 445, 892], 7), 256);\n    assert_eq!(candidate(vec![3, 4, 7, 8, 10], vec![2, 5, 9, 11], 6), 8);\n}\n", "solution": "/// Write a function to find kth element from the given two sorted vectors.\nfn find_kth(arr1: Vec<isize>, arr2: Vec<isize>, k: isize) -> isize {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n\n    while i < arr1.len() && j < arr2.len() {\n        if arr1[i] < arr2[j] {\n            count += 1;\n            if count == k {\n                return arr1[i];\n            }\n            i += 1;\n        } else {\n            count += 1;\n            if count == k {\n                return arr2[j];\n            }\n            j += 1;\n        }\n    }\n\n    while i < arr1.len() {\n        count += 1;\n        if count == k {\n            return arr1[i];\n        }\n        i += 1;\n    }\n\n    while j < arr2.len() {\n        count += 1;\n        if count == k {\n            return arr2[j];\n        }\n        j += 1;\n    }\n\n    panic!(\"k is out of bounds\");\n}", "is_solved": true}
{"name": "mbpp_226_odd_values_string", "language": "rs", "prompt": "/// Write a rsthon function to remove the characters which have odd index values of a given string.\nfn odd_values_string(str: String) -> String {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_226_odd_values_string.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "odd_values_string", "test": "\n\nfn main() {\n    let candidate = odd_values_string;\n    assert_eq!(candidate(String::from(\"abcdef\")), String::from(\"ace\"));\n    assert_eq!(candidate(String::from(\"python\")), String::from(\"pto\"));\n    assert_eq!(candidate(String::from(\"data\")), String::from(\"dt\"));\n    assert_eq!(candidate(String::from(\"lambs\")), String::from(\"lms\"));\n}\n", "solution": "/// Write a rsthon function to remove the characters which have odd index values of a given string.\nfn odd_values_string(str: String) -> String {\n    let mut result = String::new();\n    for (index, ch) in str.char_indices() {\n        if index % 2 == 0 {\n            result.push(ch);\n        }\n    }\n    result\n}", "is_solved": true}
{"name": "mbpp_269_ascii_value", "language": "rs", "prompt": "/// Write a function to find the ascii value of a character.\nfn ascii_value(k: String) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_269_ascii_value.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "ascii_value", "test": "\n\nfn main() {\n    let candidate = ascii_value;\n    assert_eq!(candidate(String::from(\"A\")), 65);\n    assert_eq!(candidate(String::from(\"R\")), 82);\n    assert_eq!(candidate(String::from(\"S\")), 83);\n}\n", "solution": "/// Write a function to find the ascii value of a character.\nfn ascii_value(k: String) -> isize {\n    let character = k.chars().next().unwrap_or('\\0');\n    character as isize\n}", "is_solved": true}
{"name": "mbpp_739_find_Index", "language": "rs", "prompt": "/// Write a rsthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfn find_Index(n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "find_Index", "test": "\n\nfn main() {\n    let candidate = find_Index;\n    assert_eq!(candidate(2), 4);\n    assert_eq!(candidate(3), 14);\n    assert_eq!(candidate(4), 45);\n}\n", "solution": "/// Write a rsthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfn find_Index(n: isize) -> isize {\n    let mut index = 1;\n    let mut triangular_number = 1;\n    let mut num_digits = 1;\n\n    while num_digits < n {\n        index += 1;\n        triangular_number += index;\n        num_digits = (triangular_number as f64).log10().floor() as isize + 1;\n    }\n\n    index\n}", "is_solved": true}
{"name": "mbpp_19_test_duplicate", "language": "rs", "prompt": "/// Write a function to find whether a given vector of integers contains any duplicate element.\nfn test_duplicate(arraynums: Vec<isize>) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_19_test_duplicate.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "test_duplicate", "test": "\n\nfn main() {\n    let candidate = test_duplicate;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 4]), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2, 3, 3, 4, 4, 5]), true);\n}\n", "solution": "/// Write a function to find whether a given vector of integers contains any duplicate element.\nfn test_duplicate(arraynums: Vec<isize>) -> bool {\n    let mut nums_set = std::collections::HashSet::new();\n\n    for num in arraynums {\n        if nums_set.contains(&num) {\n            return true;\n        } else {\n            nums_set.insert(num);\n        }\n    }\n\n    false\n}", "is_solved": true}
{"name": "mbpp_62_smallest_num", "language": "rs", "prompt": "/// Write a rsthon function to find smallest number in a vector.\nfn smallest_num(xs: Vec<isize>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_62_smallest_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "smallest_num", "test": "\n\nfn main() {\n    let candidate = smallest_num;\n    assert_eq!(candidate(vec![10, 20, 1, 45, 99]), 1);\n    assert_eq!(candidate(vec![1, 2, 3]), 1);\n    assert_eq!(candidate(vec![45, 46, 50, 60]), 45);\n}\n", "solution": "/// Write a rsthon function to find smallest number in a vector.\nfn smallest_num(xs: Vec<isize>) -> isize {\n    if xs.is_empty() {\n        panic!(\"The input vector is empty\");\n    }\n\n    let mut smallest = xs[0];\n\n    for &x in xs.iter() {\n        if x < smallest {\n            smallest = x;\n        }\n    }\n\n    smallest\n}", "is_solved": true}
{"name": "mbpp_746_sector_area", "language": "rs", "prompt": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_746_sector_area.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "sector_area", "test": "\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n", "solution": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let angle_radians = (a as f64).to_radians();\n    let area = (r as f64).powi(2) * angle_radians / 2.0;\n    Some(area)\n}", "is_solved": true}
{"name": "mbpp_142_count_samepair", "language": "rs", "prompt": "/// Write a function to count number items that are identical in the same position of three given vectors.\nfn count_samepair(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_142_count_samepair.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "count_samepair", "test": "\n\nfn main() {\n    let candidate = count_samepair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9], vec![2, 1, 3, 1, 2, 6, 7, 9]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 8], vec![2, 1, 3, 1, 2, 6, 7, 8]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 2, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 8], vec![2, 1, 3, 1, 2, 6, 7, 8]), 5);\n}\n", "solution": "/// Write a function to count number items that are identical in the same position of three given vectors.\nfn count_samepair(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> isize {\n    let mut count = 0;\n    let min_length = list1.len().min(list2.len()).min(list3.len());\n\n    for i in 0..min_length {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1;\n        }\n    }\n\n    count\n}", "is_solved": true}
{"name": "mbpp_400_extract_freq", "language": "rs", "prompt": "/// Write a function to extract the number of unique tuples in the given vector.\nfn extract_freq(test_list: Vec<(isize, isize)>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_400_extract_freq.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "extract_freq", "test": "\n\nfn main() {\n    let candidate = extract_freq;\n    assert_eq!(candidate(vec![(3, 4), (1, 2), (4, 3), (5, 6)]), 3);\n    assert_eq!(candidate(vec![(4, 15), (2, 3), (5, 4), (6, 7)]), 4);\n    assert_eq!(candidate(vec![(5, 16), (2, 3), (6, 5), (6, 9)]), 4);\n}\n", "solution": "/// Write a function to extract the number of unique tuples in the given vector.\nfn extract_freq(test_list: Vec<(isize, isize)>) -> isize {\n    let mut unique_tuples = std::collections::HashSet::new();\n\n    for tuple in test_list {\n        unique_tuples.insert(tuple);\n    }\n\n    unique_tuples.len() as isize\n}", "is_solved": false}
{"name": "mbpp_135_hexagonal_num", "language": "rs", "prompt": "/// Write a function to find the nth hexagonal number.\nfn hexagonal_num(n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_135_hexagonal_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "hexagonal_num", "test": "\n\nfn main() {\n    let candidate = hexagonal_num;\n    assert_eq!(candidate(10), 190);\n    assert_eq!(candidate(5), 45);\n    assert_eq!(candidate(7), 91);\n}\n", "solution": "/// Write a function to find the nth hexagonal number.\nfn hexagonal_num(n: isize) -> isize {\n    if n <= 0 {\n        return 0;\n    }\n    n * (2 * n - 1)\n}", "is_solved": true}
{"name": "mbpp_800_remove_all_spaces", "language": "rs", "prompt": "/// Write a function to remove all whitespaces from a string.\nfn remove_all_spaces(text: String) -> String {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_800_remove_all_spaces.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "remove_all_spaces", "test": "\n\nfn main() {\n    let candidate = remove_all_spaces;\n    assert_eq!(candidate(String::from(\"python  program\")), String::from(\"pythonprogram\"));\n    assert_eq!(candidate(String::from(\"python   programming    language\")), String::from(\"pythonprogramminglanguage\"));\n    assert_eq!(candidate(String::from(\"python                     program\")), String::from(\"pythonprogram\"));\n    assert_eq!(candidate(String::from(\"   python                     program\")), String::from(\"pythonprogram\"));\n}\n", "solution": "/// Write a function to remove all whitespaces from a string.\nfn remove_all_spaces(text: String) -> String {\n    text.chars().filter(|c| !c.is_whitespace()).collect()\n}", "is_solved": true}
{"name": "mbpp_127_multiply_int", "language": "rs", "prompt": "/// Write a function to multiply two integers.\nfn multiply_int(x: isize, y: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_127_multiply_int.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "multiply_int", "test": "\n\nfn main() {\n    let candidate = multiply_int;\n    assert_eq!(candidate(10, 20), 200);\n    assert_eq!(candidate(5, 10), 50);\n    assert_eq!(candidate(4, 8), 32);\n}\n", "solution": "/// Write a function to multiply two integers.\nfn multiply_int(x: isize, y: isize) -> isize {\n    x * y\n}", "is_solved": true}
{"name": "mbpp_764_number_ctr", "language": "rs", "prompt": "/// Write a rsthon function to count number of digits in a given string.\nfn number_ctr(str: String) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_764_number_ctr.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "number_ctr", "test": "\n\nfn main() {\n    let candidate = number_ctr;\n    assert_eq!(candidate(String::from(\"program2bedone\")), 1);\n    assert_eq!(candidate(String::from(\"3wonders\")), 1);\n    assert_eq!(candidate(String::from(\"123\")), 3);\n    assert_eq!(candidate(String::from(\"3wond-1ers2\")), 3);\n}\n", "solution": "/// Write a rsthon function to count number of digits in a given string.\nfn number_ctr(str: String) -> isize {\n    let mut count = 0;\n\n    for c in str.chars() {\n        if c.is_digit(10) {\n            count += 1;\n        }\n    }\n\n    count\n}", "is_solved": true}
{"name": "mbpp_767_get_pairs_count", "language": "rs", "prompt": "/// Write a rsthon function to count the number of pairs whose sum is equal to ‘sum’. The funtion gets as input a vector of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_767_get_pairs_count.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "get_pairs_count", "test": "\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n", "solution": "/// Write a rsthon function to count the number of pairs whose sum is equal to ‘sum’. The funtion gets as input a vector of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let arr_len = arr.len();\n\n    for i in 0..arr_len {\n        for j in i + 1..arr_len {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n\n    count\n}", "is_solved": true}
{"name": "mbpp_99_decimal_to_binary", "language": "rs", "prompt": "/// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfn decimal_to_binary(n: isize) -> String {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_99_decimal_to_binary.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "decimal_to_binary", "test": "\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(8), String::from(\"1000\"));\n    assert_eq!(candidate(18), String::from(\"10010\"));\n    assert_eq!(candidate(7), String::from(\"111\"));\n}\n", "solution": "/// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfn decimal_to_binary(n: isize) -> String {\n    let mut binary = String::new();\n    let mut num = n;\n\n    if num == 0 {\n        return \"0\".to_string();\n    }\n\n    while num > 0 {\n        let remainder = num % 2;\n        binary.insert(0, char::from_digit(remainder as u32, 10).unwrap());\n        num /= 2;\n    }\n\n    binary\n}", "is_solved": true}
{"name": "mbpp_119_search", "language": "rs", "prompt": "/// Write a rsthon function to find the element that appears only once in a sorted vector.\nfn search(arr: Vec<isize>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "search", "test": "\n\nfn main() {\n    let candidate = search;\n    assert_eq!(candidate(vec![1, 1, 2, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]), 8);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4, 4]), 1);\n}\n", "solution": "/// Write a rsthon function to find the element that appears only once in a sorted vector.\nfn search(arr: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < arr.len() {\n        if i == arr.len() - 1 || arr[i] != arr[i + 1] {\n            return arr[i];\n        }\n        i += 2;\n    }\n    -1\n}", "is_solved": true}
{"name": "mbpp_92_is_undulating", "language": "rs", "prompt": "/// Write a function to check whether the given number is undulating or not.\nfn is_undulating(n: isize) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "is_undulating", "test": "\n\nfn main() {\n    let candidate = is_undulating;\n    assert_eq!(candidate(1212121), true);\n    assert_eq!(candidate(1991), false);\n    assert_eq!(candidate(121), true);\n}\n", "solution": "/// Write a function to check whether the given number is undulating or not.\nfn is_undulating(n: isize) -> bool {\n    if n < 100 {\n        return false;\n    }\n\n    let digits: Vec<_> = n.to_string().chars().map(|c| c.to_digit(10).unwrap()).collect();\n    let first_digit = digits[0];\n\n    for i in (1..digits.len()).step_by(2) {\n        if digits[i] != first_digit {\n            return false;\n        }\n    }\n\n    let second_digit = digits[1];\n    if first_digit == second_digit {\n        return false;\n    }\n\n    for i in (2..digits.len()).step_by(2) {\n        if digits[i] != second_digit {\n            return false;\n        }\n    }\n\n    true\n}", "is_solved": false}
{"name": "mbpp_105_count", "language": "rs", "prompt": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_105_count.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "count", "test": "\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n", "solution": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for value in lst {\n        if value {\n            count += 1;\n        }\n    }\n    count as isize\n}", "is_solved": true}
{"name": "mbpp_766_pair_wise", "language": "rs", "prompt": "/// Write a function to return a vector of all pairs of consecutive items in a given vector.\nfn pair_wise(l1: Vec<isize>) -> Vec<(isize, isize)> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_766_pair_wise.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "pair_wise", "test": "\n\nfn main() {\n    let candidate = pair_wise;\n    assert_eq!(candidate(vec![1, 1, 2, 3, 3, 4, 4, 5]), vec![(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), vec![(1, 5), (5, 7), (7, 9), (9, 10)]);\n    assert_eq!(candidate(vec![5, 1, 9, 7, 10]), vec![(5, 1), (1, 9), (9, 7), (7, 10)]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]);\n}\n", "solution": "/// Write a function to return a vector of all pairs of consecutive items in a given vector.\nfn pair_wise(l1: Vec<isize>) -> Vec<(isize, isize)> {\n    let mut result = Vec::new();\n\n    for i in 0..l1.len() - 1 {\n        result.push((l1[i], l1[i + 1]));\n    }\n\n    result\n}", "is_solved": true}
{"name": "mbpp_464_check_value", "language": "rs", "prompt": "use std::collections::HashMap;\n\n/// Write a function to check if all values are same in a HashMap.\nfn check_value(dict: HashMap<String, isize>, n: isize) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_464_check_value.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "check_value", "test": "\n\nfn main() {\n    let candidate = check_value;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 12), (String::from(\"Alden Cantrell\"), 12), (String::from(\"Kierra Gentry\"), 12), (String::from(\"Pierre Cox\"), 12)]), 10), false);\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 12), (String::from(\"Alden Cantrell\"), 12), (String::from(\"Kierra Gentry\"), 12), (String::from(\"Pierre Cox\"), 12)]), 12), true);\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 12), (String::from(\"Alden Cantrell\"), 12), (String::from(\"Kierra Gentry\"), 12), (String::from(\"Pierre Cox\"), 12)]), 5), false);\n}\n", "solution": "use std::collections::HashMap;\n\n/// Write a function to check if all values are same in a HashMap.\nfn check_value(dict: HashMap<String, isize>, n: isize) -> bool {\n    for value in dict.values() {\n        if *value != n {\n            return false;\n        }\n    }\n    true\n}", "is_solved": true}
{"name": "mbpp_443_largest_neg", "language": "rs", "prompt": "/// Write a rsthon function to find the largest negative number from the given vector.\nfn largest_neg(list1: Vec<isize>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_443_largest_neg.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "largest_neg", "test": "\n\nfn main() {\n    let candidate = largest_neg;\n    assert_eq!(candidate(vec![1, 2, 3, -4, -6]), -6);\n    assert_eq!(candidate(vec![1, 2, 3, -8, -9]), -9);\n    assert_eq!(candidate(vec![1, 2, 3, 4, -1]), -1);\n}\n", "solution": "/// Write a rsthon function to find the largest negative number from the given vector.\nfn largest_neg(list1: Vec<isize>) -> isize {\n    let mut largest_negative = isize::MIN;\n\n    for num in list1 {\n        if num < 0 && num > largest_negative {\n            largest_negative = num;\n        }\n    }\n\n    largest_negative\n}", "is_solved": false}
{"name": "mbpp_602_first_repeated_char", "language": "rs", "prompt": "/// Write a rsthon function to find the first repeated character in a given string.\nfn first_repeated_char(str1: String) -> Option<String> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_602_first_repeated_char.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "first_repeated_char", "test": "\n\nfn main() {\n    let candidate = first_repeated_char;\n    assert_eq!(candidate(String::from(\"abcabc\")), Some(String::from(\"a\")));\n    assert_eq!(candidate(String::from(\"abc\")), None);\n    assert_eq!(candidate(String::from(\"123123\")), Some(String::from(\"1\")));\n}\n", "solution": "/// Write a rsthon function to find the first repeated character in a given string.\nfn first_repeated_char(str1: String) -> Option<String> {\n    let mut char_set = std::collections::HashSet::new();\n\n    for c in str1.chars() {\n        if char_set.contains(&c) {\n            return Some(c.to_string());\n        } else {\n            char_set.insert(c);\n        }\n    }\n\n    None\n}", "is_solved": true}
{"name": "mbpp_770_odd_num_sum", "language": "rs", "prompt": "/// Write a rsthon function to find the sum of fourth power of first n odd natural numbers.\nfn odd_num_sum(n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_770_odd_num_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "odd_num_sum", "test": "\n\nfn main() {\n    let candidate = odd_num_sum;\n    assert_eq!(candidate(2), 82);\n    assert_eq!(candidate(3), 707);\n    assert_eq!(candidate(4), 3108);\n}\n", "solution": "/// Write a rsthon function to find the sum of fourth power of first n odd natural numbers.\nfn odd_num_sum(n: isize) -> isize {\n    let mut sum = 0;\n    let mut count = 0;\n    let mut num = 1;\n\n    while count < n {\n        sum += num.pow(4);\n        count += 1;\n        num += 2;\n    }\n\n    sum\n}", "is_solved": false}
{"name": "mbpp_424_extract_rear", "language": "rs", "prompt": "/// Write a function to extract only the rear index element of each string in the given tuple.\nfn extract_rear(test_tuple: (String, String, String)) -> Vec<String> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_424_extract_rear.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "extract_rear", "test": "\n\nfn main() {\n    let candidate = extract_rear;\n    assert_eq!(candidate((String::from(\"Mers\"), String::from(\"for\"), String::from(\"Vers\"))), vec![String::from(\"s\"), String::from(\"r\"), String::from(\"s\")]);\n    assert_eq!(candidate((String::from(\"Avenge\"), String::from(\"for\"), String::from(\"People\"))), vec![String::from(\"e\"), String::from(\"r\"), String::from(\"e\")]);\n    assert_eq!(candidate((String::from(\"Gotta\"), String::from(\"get\"), String::from(\"go\"))), vec![String::from(\"a\"), String::from(\"t\"), String::from(\"o\")]);\n}\n", "solution": "/// Write a function to extract only the rear index element of each string in the given tuple.\nfn extract_rear(test_tuple: (String, String, String)) -> Vec<String> {\n    let (a, b, c) = test_tuple;\n    let mut result = Vec::new();\n\n    result.push(a.chars().last().unwrap().to_string());\n    result.push(b.chars().last().unwrap().to_string());\n    result.push(c.chars().last().unwrap().to_string());\n\n    result\n}", "is_solved": true}
{"name": "mbpp_133_sum_negativenum", "language": "rs", "prompt": "/// Write a function to calculate the sum of the negative numbers of a given vector of numbers.\nfn sum_negativenum(nums: Vec<isize>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_133_sum_negativenum.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "sum_negativenum", "test": "\n\nfn main() {\n    let candidate = sum_negativenum;\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17]), -32);\n    assert_eq!(candidate(vec![10, 15, -14, 13, -18, 12, -20]), -52);\n    assert_eq!(candidate(vec![19, -65, 57, 39, 152, -639, 121, 44, 90, -190]), -894);\n}\n", "solution": "/// Write a function to calculate the sum of the negative numbers of a given vector of numbers.\nfn sum_negativenum(nums: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for num in nums {\n        if num < 0 {\n            sum += num;\n        }\n    }\n    sum\n}", "is_solved": true}
{"name": "mbpp_760_unique_Element", "language": "rs", "prompt": "/// Write a rsthon function to check whether a vector of numbers contains only one distinct element or not.\nfn unique_Element(arr: Vec<isize>) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_760_unique_Element.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "unique_Element", "test": "\n\nfn main() {\n    let candidate = unique_Element;\n    assert_eq!(candidate(vec![1, 1, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), false);\n}\n", "solution": "/// Write a rsthon function to check whether a vector of numbers contains only one distinct element or not.\nfn unique_Element(arr: Vec<isize>) -> bool {\n    if arr.is_empty() {\n        return false;\n    }\n\n    let first_element = arr[0];\n    for element in arr {\n        if element != first_element {\n            return false;\n        }\n    }\n\n    true\n}", "is_solved": true}
{"name": "mbpp_281_all_unique", "language": "rs", "prompt": "/// Write a rsthon function to check if the elements of a given vector are unique or not.\nfn all_unique(test_list: Vec<isize>) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_281_all_unique.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "all_unique", "test": "\n\nfn main() {\n    let candidate = all_unique;\n    assert_eq!(candidate(vec![1, 2, 3]), true);\n    assert_eq!(candidate(vec![1, 2, 1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n}\n", "solution": "/// Write a rsthon function to check if the elements of a given vector are unique or not.\nfn all_unique(test_list: Vec<isize>) -> bool {\n    let mut seen = std::collections::HashSet::new();\n\n    for &value in test_list.iter() {\n        if seen.contains(&value) {\n            return false;\n        } else {\n            seen.insert(value);\n        }\n    }\n\n    true\n}", "is_solved": true}
{"name": "mbpp_406_find_Parity", "language": "rs", "prompt": "/// Write a rsthon function to find whether the parity of a given number is odd.\nfn find_Parity(x: isize) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_406_find_Parity.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "find_Parity", "test": "\n\nfn main() {\n    let candidate = find_Parity;\n    assert_eq!(candidate(12), false);\n    assert_eq!(candidate(7), true);\n    assert_eq!(candidate(10), false);\n}\n", "solution": "/// Write a rsthon function to find whether the parity of a given number is odd.\nfn find_Parity(x: isize) -> bool {\n    if x % 2 == 0 {\n        return false;\n    } else {\n        return true;\n    }\n}", "is_solved": true}
{"name": "mbpp_562_Find_Max_Length", "language": "rs", "prompt": "/// Write a rsthon function to find the length of the longest subvectors.\nfn Find_Max_Length(lst: Vec<Vec<isize>>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_562_Find_Max_Length.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "Find_Max_Length", "test": "\n\nfn main() {\n    let candidate = Find_Max_Length;\n    assert_eq!(candidate(vec![vec![1], vec![1, 4], vec![5, 6, 7, 8]]), 4);\n    assert_eq!(candidate(vec![vec![0, 1], vec![2, 2], vec![3, 2, 1]]), 3);\n    assert_eq!(candidate(vec![vec![7], vec![22, 23], vec![13, 14, 15], vec![10, 20, 30, 40, 50]]), 5);\n}\n", "solution": "/// Write a rsthon function to find the length of the longest subvectors.\nfn Find_Max_Length(lst: Vec<Vec<isize>>) -> isize {\n    let mut max_length = 0;\n\n    for subvector in lst {\n        let length = subvector.len();\n        if length > max_length {\n            max_length = length;\n        }\n    }\n\n    max_length as isize\n}", "is_solved": true}
{"name": "mbpp_87_merge_dictionaries_three", "language": "rs", "prompt": "use std::collections::HashMap;\n\n/// Write a function to merge three dictionaries into a single HashMap.\nfn merge_dictionaries_three(dict1: HashMap<String, String>, dict2: HashMap<String, String>, dict3: HashMap<String, String>) -> HashMap<String, String> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_87_merge_dictionaries_three.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "merge_dictionaries_three", "test": "\n\nfn main() {\n    let candidate = merge_dictionaries_three;\n    assert_eq!(candidate(HashMap::from([(String::from(\"R\"), String::from(\"Red\")), (String::from(\"B\"), String::from(\"Black\")), (String::from(\"P\"), String::from(\"Pink\"))]), HashMap::from([(String::from(\"G\"), String::from(\"Green\")), (String::from(\"W\"), String::from(\"White\"))]), HashMap::from([(String::from(\"O\"), String::from(\"Orange\")), (String::from(\"W\"), String::from(\"White\")), (String::from(\"B\"), String::from(\"Black\"))])), HashMap::from([(String::from(\"B\"), String::from(\"Black\")), (String::from(\"R\"), String::from(\"Red\")), (String::from(\"P\"), String::from(\"Pink\")), (String::from(\"G\"), String::from(\"Green\")), (String::from(\"W\"), String::from(\"White\")), (String::from(\"O\"), String::from(\"Orange\"))]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"R\"), String::from(\"Red\")), (String::from(\"B\"), String::from(\"Black\")), (String::from(\"P\"), String::from(\"Pink\"))]), HashMap::from([(String::from(\"G\"), String::from(\"Green\")), (String::from(\"W\"), String::from(\"White\"))]), HashMap::from([(String::from(\"L\"), String::from(\"lavender\")), (String::from(\"B\"), String::from(\"Blue\"))])), HashMap::from([(String::from(\"W\"), String::from(\"White\")), (String::from(\"P\"), String::from(\"Pink\")), (String::from(\"B\"), String::from(\"Black\")), (String::from(\"R\"), String::from(\"Red\")), (String::from(\"G\"), String::from(\"Green\")), (String::from(\"L\"), String::from(\"lavender\"))]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"R\"), String::from(\"Red\")), (String::from(\"B\"), String::from(\"Black\")), (String::from(\"P\"), String::from(\"Pink\"))]), HashMap::from([(String::from(\"L\"), String::from(\"lavender\")), (String::from(\"B\"), String::from(\"Blue\"))]), HashMap::from([(String::from(\"G\"), String::from(\"Green\")), (String::from(\"W\"), String::from(\"White\"))])), HashMap::from([(String::from(\"B\"), String::from(\"Black\")), (String::from(\"P\"), String::from(\"Pink\")), (String::from(\"R\"), String::from(\"Red\")), (String::from(\"G\"), String::from(\"Green\")), (String::from(\"L\"), String::from(\"lavender\")), (String::from(\"W\"), String::from(\"White\"))]));\n}\n", "solution": "use std::collections::HashMap;\n\n/// Write a function to merge three dictionaries into a single HashMap.\nfn merge_dictionaries_three(dict1: HashMap<String, String>, dict2: HashMap<String, String>, dict3: HashMap<String, String>) -> HashMap<String, String> {\n    let mut merged_dict = HashMap::new();\n\n    for (key, value) in dict1 {\n        merged_dict.insert(key, value);\n    }\n\n    for (key, value) in dict2 {\n        merged_dict.insert(key, value);\n    }\n\n    for (key, value) in dict3 {\n        merged_dict.insert(key, value);\n    }\n\n    merged_dict\n}", "is_solved": false}
{"name": "mbpp_11_remove_Occ", "language": "rs", "prompt": "/// Write a rsthon function to remove first and last occurrence of a given character from the string.\nfn remove_Occ(s: String, ch: String) -> String {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_11_remove_Occ.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "remove_Occ", "test": "\n\nfn main() {\n    let candidate = remove_Occ;\n    assert_eq!(candidate(String::from(\"hello\"), String::from(\"l\")), String::from(\"heo\"));\n    assert_eq!(candidate(String::from(\"abcda\"), String::from(\"a\")), String::from(\"bcd\"));\n    assert_eq!(candidate(String::from(\"PHP\"), String::from(\"P\")), String::from(\"H\"));\n}\n", "solution": "/// Write a rsthon function to remove first and last occurrence of a given character from the string.\nfn remove_Occ(s: String, ch: String) -> String {\n    let first_occurrence = s.find(&ch);\n    let last_occurrence = s.rfind(&ch);\n\n    if let (Some(first), Some(last)) = (first_occurrence, last_occurrence) {\n        let mut chars = s.chars().collect::<Vec<char>>();\n        chars.remove(first);\n        if last > first {\n            chars.remove(last - 1);\n        } else {\n            chars.remove(last);\n        }\n        chars.into_iter().collect()\n    } else {\n        s\n    }\n}", "is_solved": true}
{"name": "mbpp_751_check_min_heap", "language": "rs", "prompt": "/// Write a function to check if the given vector represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-vector-represents-a-binary-heap/\nfn check_min_heap(arr: Vec<isize>) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_751_check_min_heap.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "check_min_heap", "test": "\n\nfn main() {\n    let candidate = check_min_heap;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![2, 3, 4, 5, 10, 15]), true);\n    assert_eq!(candidate(vec![2, 10, 4, 5, 3, 15]), false);\n}\n", "solution": "/// Write a function to check if the given vector represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-vector-represents-a-binary-heap/\nfn check_min_heap(arr: Vec<isize>) -> bool {\n    let n = arr.len();\n\n    for i in 0..n / 2 {\n        let left_child = 2 * i + 1;\n        let right_child = 2 * i + 2;\n\n        if left_child < n && arr[i] > arr[left_child] {\n            return false;\n        }\n\n        if right_child < n && arr[i] > arr[right_child] {\n            return false;\n        }\n    }\n\n    true\n}", "is_solved": true}
{"name": "mbpp_578_interleave_lists", "language": "rs", "prompt": "/// Write a function to interleave 3 vectors of the same length into a single flat vector.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_578_interleave_lists.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "interleave_lists", "test": "\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n", "solution": "/// Write a function to interleave 3 vectors of the same length into a single flat vector.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let len = list1.len();\n\n    for i in 0..len {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n\n    result\n}", "is_solved": true}
{"name": "mbpp_90_len_log", "language": "rs", "prompt": "/// Write a rsthon function to find the length of the longest word.\nfn len_log(list1: Vec<String>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_90_len_log.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "len_log", "test": "\n\nfn main() {\n    let candidate = len_log;\n    assert_eq!(candidate(vec![String::from(\"python\"), String::from(\"PHP\"), String::from(\"bigdata\")]), 7);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]), 3);\n    assert_eq!(candidate(vec![String::from(\"small\"), String::from(\"big\"), String::from(\"tall\")]), 5);\n}\n", "solution": "/// Write a rsthon function to find the length of the longest word.\nfn len_log(list1: Vec<String>) -> isize {\n    let mut max_len = 0;\n\n    for word in list1 {\n        if word.len() > max_len {\n            max_len = word.len();\n        }\n    }\n\n    max_len as isize\n}", "is_solved": true}
{"name": "mbpp_452_loss_amount", "language": "rs", "prompt": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_452_loss_amount.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "loss_amount", "test": "\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n", "solution": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount;\n    } else {\n        return 0;\n    }\n}", "is_solved": false}
{"name": "mbpp_798__sum", "language": "rs", "prompt": "/// Write a rsthon function to find the sum of a vector.\nfn _sum(arr: Vec<isize>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_798__sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "_sum", "test": "\n\nfn main() {\n    let candidate = _sum;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![15, 12, 13, 10]), 50);\n    assert_eq!(candidate(vec![0, 1, 2]), 3);\n}\n", "solution": "/// Write a rsthon function to find the sum of a vector.\nfn _sum(arr: Vec<isize>) -> isize {\n    let mut total: isize = 0;\n    for num in arr {\n        total += num;\n    }\n    total\n}", "is_solved": true}
{"name": "mbpp_393_max_length_list", "language": "rs", "prompt": "/// Write a function to find the vector with maximum length.\nfn max_length_list(input_list: Vec<Vec<isize>>) -> (isize, Vec<isize>) {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_393_max_length_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "max_length_list", "test": "\n\nfn main() {\n    let candidate = max_length_list;\n    assert_eq!(candidate(vec![vec![0], vec![1, 3], vec![5, 7], vec![9, 11], vec![13, 15, 17]]), (3, vec![13, 15, 17]));\n    assert_eq!(candidate(vec![vec![1, 2, 3, 4, 5], vec![1, 2, 3, 4], vec![1, 2, 3], vec![1, 2], vec![1]]), (5, vec![1, 2, 3, 4, 5]));\n    assert_eq!(candidate(vec![vec![3, 4, 5], vec![6, 7, 8, 9], vec![10, 11, 12]]), (4, vec![6, 7, 8, 9]));\n}\n", "solution": "/// Write a function to find the vector with maximum length.\nfn max_length_list(input_list: Vec<Vec<isize>>) -> (isize, Vec<isize>) {\n    let mut max_length = 0;\n    let mut max_vector = Vec::new();\n\n    for vector in input_list {\n        let length = vector.len() as isize;\n        if length > max_length {\n            max_length = length;\n            max_vector = vector;\n        }\n    }\n\n    (max_length, max_vector)\n}", "is_solved": true}
{"name": "mbpp_272_rear_extract", "language": "rs", "prompt": "/// Write a function that takes in a vector of tuples and returns a vector containing the rear element of each tuple.\nfn rear_extract(test_list: Vec<(isize, String, isize)>) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_272_rear_extract.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "rear_extract", "test": "\n\nfn main() {\n    let candidate = rear_extract;\n    assert_eq!(candidate(vec![(1, String::from(\"Rash\"), 21), (2, String::from(\"Varsha\"), 20), (3, String::from(\"Kil\"), 19)]), vec![21, 20, 19]);\n    assert_eq!(candidate(vec![(1, String::from(\"Sai\"), 36), (2, String::from(\"Ayesha\"), 25), (3, String::from(\"Salman\"), 45)]), vec![36, 25, 45]);\n    assert_eq!(candidate(vec![(1, String::from(\"Sudeep\"), 14), (2, String::from(\"Vandana\"), 36), (3, String::from(\"Dawood\"), 56)]), vec![14, 36, 56]);\n}\n", "solution": "/// Write a function that takes in a vector of tuples and returns a vector containing the rear element of each tuple.\nfn rear_extract(test_list: Vec<(isize, String, isize)>) -> Vec<isize> {\n    let mut result = Vec::new();\n\n    for tuple in test_list {\n        result.push(tuple.2);\n    }\n\n    result\n}", "is_solved": true}
{"name": "mbpp_564_count_Pairs", "language": "rs", "prompt": "/// Write a rsthon function which takes a vector of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_564_count_Pairs.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "count_Pairs", "test": "\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n", "solution": "/// Write a rsthon function which takes a vector of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i as usize] != arr[j as usize] {\n                count += 1;\n            }\n        }\n    }\n\n    count\n}", "is_solved": true}
{"name": "mbpp_438_count_bidirectional", "language": "rs", "prompt": "/// Write a function to count bidirectional tuple pairs.\nfn count_bidirectional(test_list: Vec<(isize, isize)>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_438_count_bidirectional.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "count_bidirectional", "test": "\n\nfn main() {\n    let candidate = count_bidirectional;\n    assert_eq!(candidate(vec![(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]), 3);\n    assert_eq!(candidate(vec![(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)]), 2);\n    assert_eq!(candidate(vec![(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)]), 4);\n}\n", "solution": "/// Write a function to count bidirectional tuple pairs.\nfn count_bidirectional(test_list: Vec<(isize, isize)>) -> isize {\n    let mut count = 0;\n    let mut checked_pairs = Vec::new();\n\n    for pair in &test_list {\n        let reverse_pair = (pair.1, pair.0);\n        if !checked_pairs.contains(pair) && !checked_pairs.contains(&reverse_pair) {\n            count += 1;\n            checked_pairs.push(*pair);\n            checked_pairs.push(reverse_pair);\n        }\n    }\n\n    count\n}", "is_solved": false}
{"name": "mbpp_640_remove_parenthesis", "language": "rs", "prompt": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_640_remove_parenthesis.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "remove_parenthesis", "test": "\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n", "solution": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut open_parenthesis = 0;\n\n    for item in items {\n        for ch in item.chars() {\n            if ch == '(' {\n                open_parenthesis += 1;\n            } else if ch == ')' {\n                if open_parenthesis > 0 {\n                    open_parenthesis -= 1;\n                } else {\n                    result.push(ch);\n                }\n            } else if open_parenthesis == 0 {\n                result.push(ch);\n            }\n        }\n    }\n\n    result\n}", "is_solved": false}
{"name": "mbpp_72_dif_Square", "language": "rs", "prompt": "/// Write a rsthon function to check whether the given number can be represented as the difference of two squares or not.\nfn dif_Square(n: isize) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_72_dif_Square.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "dif_Square", "test": "\n\nfn main() {\n    let candidate = dif_Square;\n    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(15), true);\n}\n", "solution": "/// Write a rsthon function to check whether the given number can be represented as the difference of two squares or not.\nfn dif_Square(n: isize) -> bool {\n    if n % 2 == 0 {\n        return (n / 2) % 2 == 1;\n    } else {\n        return n % 4 == 1;\n    }\n}", "is_solved": false}
{"name": "mbpp_448_cal_sum", "language": "rs", "prompt": "/// Write a function to calculate the sum of perrin numbers.\nfn cal_sum(n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_448_cal_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "cal_sum", "test": "\n\nfn main() {\n    let candidate = cal_sum;\n    assert_eq!(candidate(9), 49);\n    assert_eq!(candidate(10), 66);\n    assert_eq!(candidate(11), 88);\n}\n", "solution": "/// Write a function to calculate the sum of perrin numbers.\nfn cal_sum(n: isize) -> isize {\n    if n <= 0 {\n        return 0;\n    }\n\n    let mut a = 0;\n    let mut b = 2;\n    let mut c = 3;\n    let mut sum = a + b + c;\n\n    for _ in 3..n {\n        let temp = a + b;\n        a = b;\n        b = c;\n        c = temp;\n        sum += c;\n    }\n\n    sum\n}", "is_solved": false}
{"name": "mbpp_96_divisor", "language": "rs", "prompt": "/// Write a rsthon function to find the number of divisors of a given integer.\nfn divisor(n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_96_divisor.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "divisor", "test": "\n\nfn main() {\n    let candidate = divisor;\n    assert_eq!(candidate(15), 4);\n    assert_eq!(candidate(12), 6);\n    assert_eq!(candidate(9), 3);\n}\n", "solution": "/// Write a rsthon function to find the number of divisors of a given integer.\nfn divisor(n: isize) -> isize {\n    let mut count = 0;\n\n    for i in 1..=n {\n        if n % i == 0 {\n            count += 1;\n        }\n    }\n\n    count\n}", "is_solved": true}
{"name": "mbpp_296_get_Inv_Count", "language": "rs", "prompt": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_296_get_Inv_Count.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "get_Inv_Count", "test": "\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n", "solution": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count = 0;\n    let n = arr.len();\n\n    for i in 0..n {\n        for j in (i + 1)..n {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n        }\n    }\n\n    inv_count\n}", "is_solved": true}
{"name": "mbpp_57_find_Max_Num", "language": "rs", "prompt": "/// Write a rsthon function to find the largest number that can be formed with the given vector of digits.\nfn find_Max_Num(arr: Vec<isize>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_57_find_Max_Num.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "find_Max_Num", "test": "\n\nfn main() {\n    let candidate = find_Max_Num;\n    assert_eq!(candidate(vec![1, 2, 3]), 321);\n    assert_eq!(candidate(vec![4, 5, 6, 1]), 6541);\n    assert_eq!(candidate(vec![1, 2, 3, 9]), 9321);\n}\n", "solution": "/// Write a rsthon function to find the largest number that can be formed with the given vector of digits.\nfn find_Max_Num(arr: Vec<isize>) -> isize {\n    let mut arr_str: Vec<String> = arr.into_iter().map(|x| x.to_string()).collect();\n    arr_str.sort_by(|a, b| (b.clone() + a).cmp(&(a.clone() + b)));\n\n    let max_num_str = arr_str.join(\"\");\n    max_num_str.parse::<isize>().unwrap()\n}", "is_solved": true}
{"name": "mbpp_614_cummulative_sum", "language": "rs", "prompt": "/// Write a function to find the cumulative sum of all the values that are present in the given vector of vectors.\nfn cummulative_sum(test_list: Vec<Vec<isize>>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_614_cummulative_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "cummulative_sum", "test": "\n\nfn main() {\n    let candidate = cummulative_sum;\n    assert_eq!(candidate(vec![vec![1, 3], vec![5, 6, 7], vec![2, 6]]), 30);\n    assert_eq!(candidate(vec![vec![2, 4], vec![6, 7, 8], vec![3, 7]]), 37);\n    assert_eq!(candidate(vec![vec![3, 5], vec![7, 8, 9], vec![4, 8]]), 44);\n}\n", "solution": "/// Write a function to find the cumulative sum of all the values that are present in the given vector of vectors.\nfn cummulative_sum(test_list: Vec<Vec<isize>>) -> isize {\n    let mut total_sum = 0;\n    for inner_list in test_list {\n        for value in inner_list {\n            total_sum += value;\n        }\n    }\n    total_sum\n}", "is_solved": true}
{"name": "mbpp_623_nth_nums", "language": "rs", "prompt": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_623_nth_nums.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "nth_nums", "test": "\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n", "solution": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    nums.into_iter().map(|num| num.pow(n as u32)).collect()\n}", "is_solved": true}
{"name": "mbpp_799_left_rotate", "language": "rs", "prompt": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "left_rotate", "test": "\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n", "solution": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n    let mask = (1 << 32) - 1;\n    let left_shift = (n << d) & mask;\n    let right_shift = n >> (32 - d);\n    left_rotate | right_shift\n}", "is_solved": false}
{"name": "mbpp_247_lps", "language": "rs", "prompt": "/// Write a function to find the length of the longest palindromic subsequence in the given string.\nfn lps(str: String) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_247_lps.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "lps", "test": "\n\nfn main() {\n    let candidate = lps;\n    assert_eq!(candidate(String::from(\"TENS FOR TENS\")), 5);\n    assert_eq!(candidate(String::from(\"CARDIO FOR CARDS\")), 7);\n    assert_eq!(candidate(String::from(\"PART OF THE JOURNEY IS PART\")), 9);\n}\n", "solution": "/// Write a function to find the length of the longest palindromic subsequence in the given string.\nfn lps(str: String) -> isize {\n    let n = str.len();\n    let chars: Vec<char> = str.chars().collect();\n    let mut dp = vec![vec![0; n]; n];\n\n    for i in 0..n {\n        dp[i][i] = 1;\n    }\n\n    for len in 2..=n {\n        for i in 0..n - len + 1 {\n            let j = i + len - 1;\n            if chars[i] == chars[j] {\n                dp[i][j] = dp[i + 1][j - 1] + 2;\n            } else {\n                dp[i][j] = isize::max(dp[i + 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n\n    dp[0][n - 1]\n}", "is_solved": true}
{"name": "mbpp_735_toggle_middle_bits", "language": "rs", "prompt": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "toggle_middle_bits", "test": "\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n", "solution": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n    let mut result = n;\n    let mut position = 1;\n\n    while (1 << position) < n {\n        result ^= 1 << position;\n        position += 1;\n    }\n\n    result ^= 1 << (position - 1);\n\n    result\n}", "is_solved": true}
{"name": "mbpp_132_tup_string", "language": "rs", "prompt": "/// Write a function to convert a vector to a string.\nfn tup_string(tup1: Vec<String>) -> String {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_132_tup_string.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "tup_string", "test": "\n\nfn main() {\n    let candidate = tup_string;\n    assert_eq!(candidate(vec![String::from(\"e\"), String::from(\"x\"), String::from(\"e\"), String::from(\"r\"), String::from(\"c\"), String::from(\"i\"), String::from(\"s\"), String::from(\"e\"), String::from(\"s\")]), String::from(\"exercises\"));\n    assert_eq!(candidate(vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]), String::from(\"program\"));\n}\n", "solution": "/// Write a function to convert a vector to a string.\nfn tup_string(tup1: Vec<String>) -> String {\n    let mut result = String::new();\n    for s in tup1 {\n        result.push_str(&s);\n    }\n    result\n}", "is_solved": true}
{"name": "mbpp_460_Extract", "language": "rs", "prompt": "/// Write a rsthon function to get the first element of each subvector.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_460_Extract.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "Extract", "test": "\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n", "solution": "/// Write a rsthon function to get the first element of each subvector.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n\n    for subvector in lst {\n        if !subvector.is_empty() {\n            result.push(subvector[0]);\n        }\n    }\n\n    result\n}", "is_solved": true}
{"name": "mbpp_606_radian_degree", "language": "rs", "prompt": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_606_radian_degree.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "radian_degree", "test": "\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n", "solution": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n    let radians = (degree as f64) * std::f64::consts::PI / 180.0;\n    radians\n}", "is_solved": true}
{"name": "mbpp_167_next_power_of_2", "language": "rs", "prompt": "/// Write a rsthon function to find the smallest power of 2 greater than or equal to n.\nfn next_power_of_2(n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_167_next_power_of_2.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "next_power_of_2", "test": "\n\nfn main() {\n    let candidate = next_power_of_2;\n    assert_eq!(candidate(0), 1);\n    assert_eq!(candidate(5), 8);\n    assert_eq!(candidate(17), 32);\n}\n", "solution": "/// Write a rsthon function to find the smallest power of 2 greater than or equal to n.\nfn next_power_of_2(n: isize) -> isize {\n    let mut power = 1;\n    while power < n {\n        power *= 2;\n    }\n    power\n}", "is_solved": true}
{"name": "mbpp_756_text_match_zero_one", "language": "rs", "prompt": "/// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/rsthon-exercises/re/rsthon-re-exercise-3.php\nfn text_match_zero_one(text: String) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_756_text_match_zero_one.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "text_match_zero_one", "test": "\n\nfn main() {\n    let candidate = text_match_zero_one;\n    assert_eq!(candidate(String::from(\"ac\")), false);\n    assert_eq!(candidate(String::from(\"dc\")), false);\n    assert_eq!(candidate(String::from(\"abbbba\")), true);\n    assert_eq!(candidate(String::from(\"dsabbbba\")), true);\n    assert_eq!(candidate(String::from(\"asbbbba\")), false);\n    assert_eq!(candidate(String::from(\"abaaa\")), true);\n}\n", "solution": "/// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/rsthon-exercises/re/rsthon-re-exercise-3.php\nfn text_match_zero_one(text: String) -> bool {\n    let re = regex::Regex::new(r\"a+b+\").unwrap();\n    re.is_match(&text)\n}", "is_solved": false}
{"name": "mbpp_633_pair_xor_Sum", "language": "rs", "prompt": "/// Write a rsthon function to find the sum of xor of all pairs of numbers in the given vector.\nfn pair_xor_Sum(arr: Vec<isize>, n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_633_pair_xor_Sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "pair_xor_Sum", "test": "\n\nfn main() {\n    let candidate = pair_xor_Sum;\n    assert_eq!(candidate(vec![5, 9, 7, 6], 4), 47);\n    assert_eq!(candidate(vec![7, 3, 5], 3), 12);\n    assert_eq!(candidate(vec![7, 3], 2), 4);\n}\n", "solution": "/// Write a rsthon function to find the sum of xor of all pairs of numbers in the given vector.\nfn pair_xor_Sum(arr: Vec<isize>, n: isize) -> isize {\n    let mut sum = 0;\n\n    for i in 0..n {\n        for j in i + 1..n {\n            sum ^= arr[i as usize] ^ arr[j as usize];\n        }\n    }\n\n    sum\n}", "is_solved": false}
{"name": "mbpp_458_rectangle_area", "language": "rs", "prompt": "/// Write a function to find the area of a rectangle.\nfn rectangle_area(l: isize, b: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_458_rectangle_area.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "rectangle_area", "test": "\n\nfn main() {\n    let candidate = rectangle_area;\n    assert_eq!(candidate(10, 20), 200);\n    assert_eq!(candidate(10, 5), 50);\n    assert_eq!(candidate(4, 2), 8);\n}\n", "solution": "/// Write a function to find the area of a rectangle.\nfn rectangle_area(l: isize, b: isize) -> isize {\n    l * b\n}", "is_solved": true}
{"name": "mbpp_738_geometric_sum", "language": "rs", "prompt": "/// Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/rsthon-exercises/data-structures-and-algorithms/rsthon-recursion-exercise-9.php\nfn geometric_sum(n: isize) -> f64 {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_738_geometric_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "geometric_sum", "test": "\n\nfn main() {\n    let candidate = geometric_sum;\n    assert_eq!(candidate(7), 1.9921875);\n    assert_eq!(candidate(4), 1.9375);\n    assert_eq!(candidate(8), 1.99609375);\n}\n", "solution": "/// Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/rsthon-exercises/data-structures-and-algorithms/rsthon-recursion-exercise-9.php\nfn geometric_sum(n: isize) -> f64 {\n    if n == 0 {\n        return 0.0;\n    }\n    let result = 1.0 / (2f64.powi(n as i32 - 1)) + geometric_sum(n - 1);\n    result\n}", "is_solved": false}
{"name": "mbpp_426_filter_oddnumbers", "language": "rs", "prompt": "/// Write a function to filter odd numbers.\nfn filter_oddnumbers(nums: Vec<isize>) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_426_filter_oddnumbers.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "filter_oddnumbers", "test": "\n\nfn main() {\n    let candidate = filter_oddnumbers;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 3, 5, 7, 9]);\n    assert_eq!(candidate(vec![10, 20, 45, 67, 84, 93]), vec![45, 67, 93]);\n    assert_eq!(candidate(vec![5, 7, 9, 8, 6, 4, 3]), vec![5, 7, 9, 3]);\n}\n", "solution": "/// Write a function to filter odd numbers.\nfn filter_oddnumbers(nums: Vec<isize>) -> Vec<isize> {\n    nums.into_iter().filter(|&num| num % 2 != 0).collect()\n}", "is_solved": true}
{"name": "mbpp_437_remove_odd", "language": "rs", "prompt": "/// Write a function to remove odd characters in a string.\nfn remove_odd(str1: String) -> String {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_437_remove_odd.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "remove_odd", "test": "\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(String::from(\"python\")), String::from(\"yhn\"));\n    assert_eq!(candidate(String::from(\"program\")), String::from(\"rga\"));\n    assert_eq!(candidate(String::from(\"language\")), String::from(\"agae\"));\n}\n", "solution": "/// Write a function to remove odd characters in a string.\nfn remove_odd(str1: String) -> String {\n    let mut result = String::new();\n    for (index, ch) in str1.char_indices() {\n        if index % 2 == 0 {\n            result.push(ch);\n        }\n    }\n    result\n}", "is_solved": false}
{"name": "mbpp_227_min_of_three", "language": "rs", "prompt": "/// Write a function to find minimum of three numbers.\nfn min_of_three(a: isize, b: isize, c: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_227_min_of_three.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "min_of_three", "test": "\n\nfn main() {\n    let candidate = min_of_three;\n    assert_eq!(candidate(10, 20, 0), 0);\n    assert_eq!(candidate(19, 15, 18), 15);\n    assert_eq!(candidate(-10, -20, -30), -30);\n}\n", "solution": "/// Write a function to find minimum of three numbers.\nfn min_of_three(a: isize, b: isize, c: isize) -> isize {\n    if a < b && a < c {\n        a\n    } else if b < a && b < c {\n        b\n    } else {\n        c\n    }\n}", "is_solved": true}
{"name": "mbpp_172_count_occurance", "language": "rs", "prompt": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_172_count_occurance.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "count_occurance", "test": "\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n", "solution": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n    let mut count = 0;\n    let search_str = \"std\";\n    let search_str_len = search_str.len();\n\n    for i in 0..s.len() - search_str_len + 1 {\n        if &s[i..i + search_str_len] == search_str {\n            count += 1;\n        }\n    }\n\n    count\n}", "is_solved": false}
{"name": "mbpp_434_text_match_one", "language": "rs", "prompt": "/// Write a function that matches a string that has an a followed by one or more b's.\nfn text_match_one(text: String) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_434_text_match_one.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "text_match_one", "test": "\n\nfn main() {\n    let candidate = text_match_one;\n    assert_eq!(candidate(String::from(\"ac\")), false);\n    assert_eq!(candidate(String::from(\"dc\")), false);\n    assert_eq!(candidate(String::from(\"abba\")), true);\n}\n", "solution": "/// Write a function that matches a string that has an a followed by one or more b's.\nfn text_match_one(text: String) -> bool {\n    let pattern = regex::Regex::new(r\"a+b+\").unwrap();\n    pattern.is_match(&text)\n}", "is_solved": false}
{"name": "mbpp_291_count_no_of_ways", "language": "rs", "prompt": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "count_no_of_ways", "test": "\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n", "solution": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n\n    let mut same_color = k;\n    let mut diff_color = k * (k - 1);\n    let mut total_ways = same_color + diff_color;\n\n    for _ in 3..=n {\n        same_color = diff_color;\n        diff_color = total_ways * (k - 1);\n        total_ways = same_color + diff_color;\n    }\n\n    total_ways\n}", "is_solved": true}
{"name": "mbpp_471_find_remainder", "language": "rs", "prompt": "/// Write a rsthon function to find the product of the vector multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_471_find_remainder.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "find_remainder", "test": "\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n", "solution": "/// Write a rsthon function to find the product of the vector multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product: isize = 1;\n\n    for num in arr {\n        product = (product * num) % n;\n    }\n\n    product\n}", "is_solved": true}
{"name": "mbpp_808_check_K", "language": "rs", "prompt": "/// Write a function to check if the given tuples contain the k or not.\nfn check_K(test_tup: Vec<isize>, K: isize) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_808_check_K.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "check_K", "test": "\n\nfn main() {\n    let candidate = check_K;\n    assert_eq!(candidate(vec![10, 4, 5, 6, 8], 6), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 7), false);\n    assert_eq!(candidate(vec![7, 8, 9, 44, 11, 12], 11), true);\n}\n", "solution": "/// Write a function to check if the given tuples contain the k or not.\nfn check_K(test_tup: Vec<isize>, K: isize) -> bool {\n    for value in test_tup {\n        if value == K {\n            return true;\n        }\n    }\n    false\n}", "is_solved": true}
{"name": "mbpp_68_is_Monotonic", "language": "rs", "prompt": "/// Write a rsthon function to check whether the given vector is monotonic or not.\nfn is_Monotonic(A: Vec<isize>) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_68_is_Monotonic.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "is_Monotonic", "test": "\n\nfn main() {\n    let candidate = is_Monotonic;\n    assert_eq!(candidate(vec![6, 5, 4, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 2, 3]), true);\n    assert_eq!(candidate(vec![1, 3, 2]), false);\n}\n", "solution": "/// Write a rsthon function to check whether the given vector is monotonic or not.\nfn is_Monotonic(A: Vec<isize>) -> bool {\n    if A.len() <= 2 {\n        return true;\n    }\n\n    let mut increasing = None;\n\n    for i in 1..A.len() {\n        if A[i - 1] == A[i] {\n            continue;\n        }\n\n        if increasing.is_none() {\n            increasing = Some(A[i - 1] < A[i]);\n        } else if increasing.unwrap() != (A[i - 1] < A[i]) {\n            return false;\n        }\n    }\n\n    true\n}", "is_solved": true}
{"name": "mbpp_430_parabola_directrix", "language": "rs", "prompt": "/// Write a function to find the directrix of a parabola.\nfn parabola_directrix(a: isize, b: isize, c: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_430_parabola_directrix.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "parabola_directrix", "test": "\n\nfn main() {\n    let candidate = parabola_directrix;\n    assert_eq!(candidate(5, 3, 2), -198);\n    assert_eq!(candidate(9, 8, 4), -2336);\n    assert_eq!(candidate(2, 4, 6), -130);\n}\n", "solution": "/// Write a function to find the directrix of a parabola.\nfn parabola_directrix(a: isize, b: isize, c: isize) -> isize {\n    let directrix = c - (b * b) / (4 * a);\n    directrix\n}", "is_solved": false}
{"name": "mbpp_618_div_list", "language": "rs", "prompt": "/// Write a function to divide two vectors element wise.\nfn div_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<f64> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_618_div_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "div_list", "test": "\n\nfn main() {\n    let candidate = div_list;\n    assert_eq!(candidate(vec![4, 5, 6], vec![1, 2, 3]), vec![4.0, 2.5, 2.0]);\n    assert_eq!(candidate(vec![3, 2], vec![1, 4]), vec![3.0, 0.5]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![1.8, 1.7142857142857142]);\n}\n", "solution": "/// Write a function to divide two vectors element wise.\nfn div_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<f64> {\n    let mut result = Vec::new();\n\n    for (num1, num2) in nums1.iter().zip(nums2.iter()) {\n        if *num2 != 0 {\n            result.push(*num1 as f64 / *num2 as f64);\n        } else {\n            result.push(std::f64::INFINITY);\n        }\n    }\n\n    result\n}", "is_solved": true}
{"name": "mbpp_421_concatenate_tuple", "language": "rs", "prompt": "/// Write a function to concatenate each element of tuple by the delimiter.\nfn concatenate_tuple(test_tup: (String, String, isize, String)) -> String {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_421_concatenate_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "concatenate_tuple", "test": "\n\nfn main() {\n    let candidate = concatenate_tuple;\n    assert_eq!(candidate((String::from(\"ID\"), String::from(\"is\"), 4, String::from(\"UTS\"))), String::from(\"ID-is-4-UTS\"));\n    assert_eq!(candidate((String::from(\"QWE\"), String::from(\"is\"), 4, String::from(\"RTY\"))), String::from(\"QWE-is-4-RTY\"));\n    assert_eq!(candidate((String::from(\"ZEN\"), String::from(\"is\"), 4, String::from(\"OP\"))), String::from(\"ZEN-is-4-OP\"));\n}\n", "solution": "/// Write a function to concatenate each element of tuple by the delimiter.\nfn concatenate_tuple(test_tup: (String, String, isize, String)) -> String {\n    let (a, b, c, d) = test_tup;\n    format!(\"{}{}{}{}{}\", a, b, c, d)\n}", "is_solved": false}
{"name": "mbpp_750_add_tuple", "language": "rs", "prompt": "/// Write a function to add the given tuple to the given vector.\nfn add_tuple(test_list: Vec<isize>, test_tup: (isize, isize)) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_750_add_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "add_tuple", "test": "\n\nfn main() {\n    let candidate = add_tuple;\n    assert_eq!(candidate(vec![5, 6, 7], (9, 10)), vec![5, 6, 7, 9, 10]);\n    assert_eq!(candidate(vec![6, 7, 8], (10, 11)), vec![6, 7, 8, 10, 11]);\n    assert_eq!(candidate(vec![7, 8, 9], (11, 12)), vec![7, 8, 9, 11, 12]);\n}\n", "solution": "/// Write a function to add the given tuple to the given vector.\nfn add_tuple(test_list: Vec<isize>, test_tup: (isize, isize)) -> Vec<isize> {\n    let mut result = test_list.clone();\n    result.push(test_tup.0);\n    result.push(test_tup.1);\n    result\n}", "is_solved": true}
{"name": "mbpp_304_find_Element", "language": "rs", "prompt": "/// Write a rsthon function to find element at a given index after number of rotations.\nfn find_Element(arr: Vec<isize>, ranges: Vec<Vec<isize>>, rotations: isize, index: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_304_find_Element.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "find_Element", "test": "\n\nfn main() {\n    let candidate = find_Element;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![vec![0, 2], vec![0, 3]], 2, 1), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4], vec![vec![0, 1], vec![0, 2]], 1, 2), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], vec![vec![0, 1], vec![0, 2]], 1, 1), 1);\n}\n", "solution": "/// Write a rsthon function to find element at a given index after number of rotations.\nfn find_Element(arr: Vec<isize>, ranges: Vec<Vec<isize>>, rotations: isize, index: isize) -> isize {\n    let mut arr = arr;\n    let n = arr.len();\n    let mut temp: Vec<isize> = vec![0; n];\n\n    // Apply rotations\n    for r in ranges.iter() {\n        let (left, right) = (r[0] as usize, r[1] as usize);\n        let k = rotations % (right - left + 1) as isize;\n\n        for i in 0..=right - left {\n            temp[(i + k as usize) % (right - left + 1)] = arr[left + i];\n        }\n\n        for i in 0..=right - left {\n            arr[left + i] = temp[i];\n        }\n    }\n\n    // Return the element at the given index\n    arr[index as usize]\n}", "is_solved": false}
{"name": "mbpp_740_tuple_to_dict", "language": "rs", "prompt": "use std::collections::HashMap;\n\n/// Write a function to convert the given tuple to a key-value HashMap using adjacent elements. https://www.geeksforgeeks.org/rsthon-convert-tuple-to-adjacent-pair-HashMap/\nfn tuple_to_dict(test_tup: (isize, isize, isize, isize, isize, isize)) -> HashMap<isize, isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "tuple_to_dict", "test": "\n\nfn main() {\n    let candidate = tuple_to_dict;\n    assert_eq!(candidate((1, 5, 7, 10, 13, 5)), HashMap::from([(1, 5), (7, 10), (13, 5)]));\n    assert_eq!(candidate((1, 2, 3, 4, 5, 6)), HashMap::from([(1, 2), (3, 4), (5, 6)]));\n    assert_eq!(candidate((7, 8, 9, 10, 11, 12)), HashMap::from([(7, 8), (9, 10), (11, 12)]));\n}\n", "solution": "use std::collections::HashMap;\n\n/// Write a function to convert the given tuple to a key-value HashMap using adjacent elements. https://www.geeksforgeeks.org/rsthon-convert-tuple-to-adjacent-pair-HashMap/\nfn tuple_to_dict(test_tup: (isize, isize, isize, isize, isize, isize)) -> HashMap<isize, isize> {\n    let mut result = HashMap::new();\n    let tuple_elements = [test_tup.0, test_tup.1, test_tup.2, test_tup.3, test_tup.4, test_tup.5];\n\n    for i in (0..tuple_elements.len() - 1).step_by(2) {\n        result.insert(tuple_elements[i], tuple_elements[i + 1]);\n    }\n\n    result\n}", "is_solved": true}
{"name": "mbpp_627_find_First_Missing", "language": "rs", "prompt": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "find_First_Missing", "test": "\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n", "solution": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut prev = 0;\n\n    for num in array {\n        if num > 0 {\n            if num - prev > 1 {\n                return prev + 1;\n            }\n            prev = num;\n        }\n    }\n\n    return prev + 1;\n}", "is_solved": false}
{"name": "mbpp_165_count_char_position", "language": "rs", "prompt": "/// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfn count_char_position(str1: String) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_165_count_char_position.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "count_char_position", "test": "\n\nfn main() {\n    let candidate = count_char_position;\n    assert_eq!(candidate(String::from(\"xbcefg\")), 2);\n    assert_eq!(candidate(String::from(\"ABcED\")), 3);\n    assert_eq!(candidate(String::from(\"AbgdeF\")), 5);\n}\n", "solution": "/// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfn count_char_position(str1: String) -> isize {\n    let mut count = 0;\n    let str1_lower = str1.to_lowercase();\n\n    for (i, c) in str1_lower.chars().enumerate() {\n        let alphabet_position = (c as isize) - ('a' as isize) + 1;\n        if alphabet_position == (i as isize) + 1 {\n            count += 1;\n        }\n    }\n\n    count\n}", "is_solved": true}
{"name": "mbpp_589_perfect_squares", "language": "rs", "prompt": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_589_perfect_squares.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "perfect_squares", "test": "\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n", "solution": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\n    for i in a..=b {\n        let sqrt_i = (i as f64).sqrt() as isize;\n        if sqrt_i * sqrt_i == i {\n            result.push(i);\n        }\n    }\n\n    result\n}", "is_solved": true}
{"name": "mbpp_736_left_insertion", "language": "rs", "prompt": "/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rsthon-exercises/data-structures-and-algorithms/rsthon-data-structure-exercise-24.php\nfn left_insertion(a: Vec<isize>, x: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "left_insertion", "test": "\n\nfn main() {\n    let candidate = left_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n", "solution": "/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rsthon-exercises/data-structures-and-algorithms/rsthon-data-structure-exercise-24.php\nfn left_insertion(a: Vec<isize>, x: isize) -> isize {\n    let mut left: isize = 0;\n    let mut right: isize = a.len() as isize - 1;\n\n    while left <= right {\n        let mid = left + (right - left) / 2;\n\n        if a[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    left\n}", "is_solved": true}
{"name": "mbpp_63_max_difference", "language": "rs", "prompt": "/// Write a function to find the maximum difference between available pairs in the given tuple vector.\nfn max_difference(test_list: Vec<(isize, isize)>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_63_max_difference.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "max_difference", "test": "\n\nfn main() {\n    let candidate = max_difference;\n    assert_eq!(candidate(vec![(3, 5), (1, 7), (10, 3), (1, 2)]), 7);\n    assert_eq!(candidate(vec![(4, 6), (2, 17), (9, 13), (11, 12)]), 15);\n    assert_eq!(candidate(vec![(12, 35), (21, 27), (13, 23), (41, 22)]), 23);\n}\n", "solution": "/// Write a function to find the maximum difference between available pairs in the given tuple vector.\nfn max_difference(test_list: Vec<(isize, isize)>) -> isize {\n    let mut max_diff = isize::MIN;\n\n    for (a, b) in test_list {\n        let diff = (a - b).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n\n    max_diff\n}", "is_solved": true}
{"name": "mbpp_264_dog_age", "language": "rs", "prompt": "/// Write a function to calculate a dog's age in dog's years.\nfn dog_age(h_age: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_264_dog_age.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "dog_age", "test": "\n\nfn main() {\n    let candidate = dog_age;\n    assert_eq!(candidate(12), 61);\n    assert_eq!(candidate(15), 73);\n    assert_eq!(candidate(24), 109);\n}\n", "solution": "/// Write a function to calculate a dog's age in dog's years.\nfn dog_age(h_age: isize) -> isize {\n    let dog_age = h_age * 7;\n    dog_age\n}", "is_solved": false}
{"name": "mbpp_273_substract_elements", "language": "rs", "prompt": "/// Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nfn substract_elements(test_tup1: (isize, isize, isize), test_tup2: (isize, isize, isize)) -> (isize, isize, isize) {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_273_substract_elements.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "substract_elements", "test": "\n\nfn main() {\n    let candidate = substract_elements;\n    assert_eq!(candidate((10, 4, 5), (2, 5, 18)), (8, -1, -13));\n    assert_eq!(candidate((11, 2, 3), (24, 45, 16)), (-13, -43, -13));\n    assert_eq!(candidate((7, 18, 9), (10, 11, 12)), (-3, 7, -3));\n}\n", "solution": "/// Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nfn substract_elements(test_tup1: (isize, isize, isize), test_tup2: (isize, isize, isize)) -> (isize, isize, isize) {\n    let result = (\n        test_tup1.0 - test_tup2.0,\n        test_tup1.1 - test_tup2.1,\n        test_tup1.2 - test_tup2.2,\n    );\n    result\n}", "is_solved": true}
{"name": "mbpp_83_get_Char", "language": "rs", "prompt": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_83_get_Char.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "get_Char", "test": "\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n", "solution": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n\n    for c in strr.chars() {\n        sum += c as u32;\n    }\n\n    let result = ((sum % 26) + ('A' as u32)) as u8;\n    let result_char = result as char;\n\n    result_char.to_string()\n}", "is_solved": false}
{"name": "mbpp_91_find_substring", "language": "rs", "prompt": "/// Write a function to check if a string is present as a substring in a given vector of string values.\nfn find_substring(str1: Vec<String>, sub_str: String) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_91_find_substring.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "find_substring", "test": "\n\nfn main() {\n    let candidate = find_substring;\n    assert_eq!(candidate(vec![String::from(\"red\"), String::from(\"black\"), String::from(\"white\"), String::from(\"green\"), String::from(\"orange\")], String::from(\"ack\")), true);\n    assert_eq!(candidate(vec![String::from(\"red\"), String::from(\"black\"), String::from(\"white\"), String::from(\"green\"), String::from(\"orange\")], String::from(\"abc\")), false);\n    assert_eq!(candidate(vec![String::from(\"red\"), String::from(\"black\"), String::from(\"white\"), String::from(\"green\"), String::from(\"orange\")], String::from(\"ange\")), true);\n}\n", "solution": "/// Write a function to check if a string is present as a substring in a given vector of string values.\nfn find_substring(str1: Vec<String>, sub_str: String) -> bool {\n    for s in str1.iter() {\n        if s.contains(&sub_str) {\n            return true;\n        }\n    }\n    false\n}", "is_solved": true}
{"name": "mbpp_100_next_smallest_palindrome", "language": "rs", "prompt": "/// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nfn next_smallest_palindrome(num: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_100_next_smallest_palindrome.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "next_smallest_palindrome", "test": "\n\nfn main() {\n    let candidate = next_smallest_palindrome;\n    assert_eq!(candidate(99), 101);\n    assert_eq!(candidate(1221), 1331);\n    assert_eq!(candidate(120), 121);\n}\n", "solution": "/// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nfn next_smallest_palindrome(num: isize) -> isize {\n    let mut next_num = num + 1;\n\n    while !is_palindrome(next_num) {\n        next_num += 1;\n    }\n\n    next_num\n}\n\nfn is_palindrome(num: isize) -> bool {\n    let num_str = num.to_string();\n    let reversed_str = num_str.chars().rev().collect::<String>();\n\n    num_str == reversed_str\n}", "is_solved": true}
{"name": "mbpp_282_sub_list", "language": "rs", "prompt": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_282_sub_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "sub_list", "test": "\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n", "solution": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()\n}", "is_solved": true}
{"name": "mbpp_790_even_position", "language": "rs", "prompt": "/// Write a rsthon function to check whether every even index contains even numbers of a given vector.\nfn even_position(nums: Vec<isize>) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_790_even_position.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "even_position", "test": "\n\nfn main() {\n    let candidate = even_position;\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3]), false);\n    assert_eq!(candidate(vec![2, 1, 4]), true);\n}\n", "solution": "/// Write a rsthon function to check whether every even index contains even numbers of a given vector.\nfn even_position(nums: Vec<isize>) -> bool {\n    for (index, &num) in nums.iter().enumerate() {\n        if index % 2 == 0 && num % 2 != 0 {\n            return false;\n        }\n    }\n    true\n}", "is_solved": true}
{"name": "mbpp_411_snake_to_camel", "language": "rs", "prompt": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "snake_to_camel", "test": "\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n", "solution": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut camel_case = String::new();\n    let mut to_upper = false;\n\n    for c in word.chars() {\n        if c == '_' {\n            to_upper = true;\n        } else if to_upper {\n            camel_case.push(c.to_ascii_uppercase());\n            to_upper = false;\n        } else {\n            camel_case.push(c);\n        }\n    }\n\n    camel_case\n}", "is_solved": false}
{"name": "mbpp_56_checks", "language": "rs", "prompt": "/// Write a rsthon function to check if a given number is one less than twice its reverse.\nfn checks(n: isize) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "checks", "test": "\n\nfn main() {\n    let candidate = checks;\n    assert_eq!(candidate(70), false);\n    assert_eq!(candidate(23), false);\n    assert_eq!(candidate(73), true);\n}\n", "solution": "/// Write a rsthon function to check if a given number is one less than twice its reverse.\nfn checks(n: isize) -> bool {\n    let reversed_n = n.to_string().chars().rev().collect::<String>().parse::<isize>().unwrap();\n    let double_reversed_n = 2 * reversed_n;\n    double_reversed_n - n == 1\n}", "is_solved": true}
{"name": "mbpp_724_power_base_sum", "language": "rs", "prompt": "/// Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nfn power_base_sum(base: isize, power: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "power_base_sum", "test": "\n\nfn main() {\n    let candidate = power_base_sum;\n    assert_eq!(candidate(2, 100), 115);\n    assert_eq!(candidate(8, 10), 37);\n    assert_eq!(candidate(8, 15), 62);\n    assert_eq!(candidate(3, 3), 9);\n}\n", "solution": "/// Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nfn power_base_sum(base: isize, power: isize) -> isize {\n    let result = base.pow(power as u32);\n    let sum = result\n        .to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap() as isize)\n        .sum();\n    sum\n}", "is_solved": false}
{"name": "mbpp_268_find_star_num", "language": "rs", "prompt": "/// Write a function to find the n'th star number.\nfn find_star_num(n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_268_find_star_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "find_star_num", "test": "\n\nfn main() {\n    let candidate = find_star_num;\n    assert_eq!(candidate(3), 37);\n    assert_eq!(candidate(4), 73);\n    assert_eq!(candidate(5), 121);\n}\n", "solution": "/// Write a function to find the n'th star number.\nfn find_star_num(n: isize) -> isize {\n    if n < 1 {\n        panic!(\"n must be a positive integer\");\n    }\n\n    let star_num = (6 * n * (n - 1)) + 1;\n    star_num\n}", "is_solved": true}
{"name": "mbpp_251_insert_element", "language": "rs", "prompt": "/// Write a function that takes in a vector and an element and inserts the element before each element in the vector, and returns the resulting vector.\nfn insert_element(list: Vec<String>, element: String) -> Vec<String> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_251_insert_element.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "insert_element", "test": "\n\nfn main() {\n    let candidate = insert_element;\n    assert_eq!(candidate(vec![String::from(\"Red\"), String::from(\"Green\"), String::from(\"Black\")], String::from(\"c\")), vec![String::from(\"c\"), String::from(\"Red\"), String::from(\"c\"), String::from(\"Green\"), String::from(\"c\"), String::from(\"Black\")]);\n    assert_eq!(candidate(vec![String::from(\"python\"), String::from(\"java\")], String::from(\"program\")), vec![String::from(\"program\"), String::from(\"python\"), String::from(\"program\"), String::from(\"java\")]);\n    assert_eq!(candidate(vec![String::from(\"happy\"), String::from(\"sad\")], String::from(\"laugh\")), vec![String::from(\"laugh\"), String::from(\"happy\"), String::from(\"laugh\"), String::from(\"sad\")]);\n}\n", "solution": "/// Write a function that takes in a vector and an element and inserts the element before each element in the vector, and returns the resulting vector.\nfn insert_element(list: Vec<String>, element: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for item in list {\n        result.push(element.clone());\n        result.push(item);\n    }\n    result\n}", "is_solved": true}
{"name": "mbpp_428_shell_sort", "language": "rs", "prompt": "/// Write a function to sort the given vector by using shell sort.\nfn shell_sort(my_list: Vec<isize>) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_428_shell_sort.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "shell_sort", "test": "\n\nfn main() {\n    let candidate = shell_sort;\n    assert_eq!(candidate(vec![12, 23, 4, 5, 3, 2, 12, 81, 56, 95]), vec![2, 3, 4, 5, 12, 12, 23, 56, 81, 95]);\n    assert_eq!(candidate(vec![24, 22, 39, 34, 87, 73, 68]), vec![22, 24, 34, 39, 68, 73, 87]);\n    assert_eq!(candidate(vec![32, 30, 16, 96, 82, 83, 74]), vec![16, 30, 32, 74, 82, 83, 96]);\n}\n", "solution": "/// Write a function to sort the given vector by using shell sort.\nfn shell_sort(my_list: Vec<isize>) -> Vec<isize> {\n    let mut my_list = my_list;\n    let n = my_list.len();\n    let mut gap = n / 2;\n\n    while gap > 0 {\n        for i in gap..n {\n            let temp = my_list[i];\n            let mut j = i;\n\n            while j >= gap && my_list[j - gap] > temp {\n                my_list[j] = my_list[j - gap];\n                j -= gap;\n            }\n\n            my_list[j] = temp;\n        }\n\n        gap /= 2;\n    }\n\n    my_list\n}", "is_solved": true}
{"name": "mbpp_476_big_sum", "language": "rs", "prompt": "/// Write a rsthon function to find the sum of the largest and smallest value in a given vector.\nfn big_sum(nums: Vec<isize>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_476_big_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "big_sum", "test": "\n\nfn main() {\n    let candidate = big_sum;\n    assert_eq!(candidate(vec![1, 2, 3]), 4);\n    assert_eq!(candidate(vec![-1, 2, 3, 4]), 3);\n    assert_eq!(candidate(vec![2, 3, 6]), 8);\n}\n", "solution": "/// Write a rsthon function to find the sum of the largest and smallest value in a given vector.\nfn big_sum(nums: Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\n    let mut min_num = nums[0];\n    let mut max_num = nums[0];\n\n    for num in nums {\n        if num < min_num {\n            min_num = num;\n        }\n        if num > max_num {\n            max_num = num;\n        }\n    }\n\n    max_num + min_num\n}", "is_solved": true}
{"name": "mbpp_454_text_match_wordz", "language": "rs", "prompt": "/// Write a function that matches a word containing 'z'.\nfn text_match_wordz(text: String) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_454_text_match_wordz.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "text_match_wordz", "test": "\n\nfn main() {\n    let candidate = text_match_wordz;\n    assert_eq!(candidate(String::from(\"pythonz.\")), true);\n    assert_eq!(candidate(String::from(\"xyz.\")), true);\n    assert_eq!(candidate(String::from(\"  lang  .\")), false);\n}\n", "solution": "/// Write a function that matches a word containing 'z'.\nfn text_match_wordz(text: String) -> bool {\n    let pattern = regex::Regex::new(r\"\\b\\w*z\\w*\\b\").unwrap();\n    pattern.is_match(&text)\n}", "is_solved": false}
{"name": "mbpp_605_prime_num", "language": "rs", "prompt": "/// Write a function to check if the given integer is a prime number.\nfn prime_num(num: isize) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_605_prime_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "prime_num", "test": "\n\nfn main() {\n    let candidate = prime_num;\n    assert_eq!(candidate(13), true);\n    assert_eq!(candidate(7), true);\n    assert_eq!(candidate(-1010), false);\n}\n", "solution": "/// Write a function to check if the given integer is a prime number.\nfn prime_num(num: isize) -> bool {\n    if num <= 1 {\n        return false;\n    }\n\n    for i in 2..((num as f64).sqrt() as isize + 1) {\n        if num % i == 0 {\n            return false;\n        }\n    }\n\n    true\n}", "is_solved": true}
{"name": "mbpp_108_merge_sorted_list", "language": "rs", "prompt": "/// Write a function to merge three vectors into a single sorted vector.\nfn merge_sorted_list(num1: Vec<isize>, num2: Vec<isize>, num3: Vec<isize>) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_108_merge_sorted_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "merge_sorted_list", "test": "\n\nfn main() {\n    let candidate = merge_sorted_list;\n    assert_eq!(candidate(vec![25, 24, 15, 4, 5, 29, 110], vec![19, 20, 11, 56, 25, 233, 154], vec![24, 26, 54, 48]), vec![4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]);\n    assert_eq!(candidate(vec![1, 3, 5, 6, 8, 9], vec![2, 5, 7, 11], vec![1, 4, 7, 8, 12]), vec![1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]);\n    assert_eq!(candidate(vec![18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], vec![25, 35, 22, 85, 14, 65, 75, 25, 58], vec![12, 74, 9, 50, 61, 41]), vec![1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]);\n}\n", "solution": "/// Write a function to merge three vectors into a single sorted vector.\nfn merge_sorted_list(num1: Vec<isize>, num2: Vec<isize>, num3: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n\n    while i < num1.len() || j < num2.len() || k < num3.len() {\n        let mut min_val = isize::MAX;\n\n        if i < num1.len() && num1[i] < min_val {\n            min_val = num1[i];\n        }\n        if j < num2.len() && num2[j] < min_val {\n            min_val = num2[j];\n        }\n        if k < num3.len() && num3[k] < min_val {\n            min_val = num3[k];\n        }\n\n        if i < num1.len() && num1[i] == min_val {\n            i += 1;\n        } else if j < num2.len() && num2[j] == min_val {\n            j += 1;\n        } else if k < num3.len() && num3[k] == min_val {\n            k += 1;\n        }\n\n        result.push(min_val);\n    }\n\n    result\n}", "is_solved": false}
{"name": "mbpp_639_sample_nam", "language": "rs", "prompt": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_639_sample_nam.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "sample_nam", "test": "\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n", "solution": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n    let mut sum = 0;\n\n    for name in sample_names {\n        if let Some(first_char) = name.chars().next() {\n            if first_char.is_uppercase() {\n                sum += name.len();\n            }\n        }\n    }\n\n    sum\n}", "is_solved": false}
{"name": "mbpp_409_min_product_tuple", "language": "rs", "prompt": "/// Write a function to find the minimum product from the pairs of tuples within a given vector.\nfn min_product_tuple(list1: Vec<(isize, isize)>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_409_min_product_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "min_product_tuple", "test": "\n\nfn main() {\n    let candidate = min_product_tuple;\n    assert_eq!(candidate(vec![(2, 7), (2, 6), (1, 8), (4, 9)]), 8);\n    assert_eq!(candidate(vec![(10, 20), (15, 2), (5, 10)]), 30);\n    assert_eq!(candidate(vec![(11, 44), (10, 15), (20, 5), (12, 9)]), 100);\n}\n", "solution": "/// Write a function to find the minimum product from the pairs of tuples within a given vector.\nfn min_product_tuple(list1: Vec<(isize, isize)>) -> isize {\n    let mut min_product = std::isize::MAX;\n\n    for &(a, b) in &list1 {\n        let product = a * b;\n        if product < min_product {\n            min_product = product;\n        }\n    }\n\n    min_product\n}", "is_solved": true}
{"name": "mbpp_591_swap_List", "language": "rs", "prompt": "/// Write a rsthon function to interchange the first and last elements in a vector.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_591_swap_List.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "swap_List", "test": "\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n", "solution": "/// Write a rsthon function to interchange the first and last elements in a vector.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    if newList.is_empty() {\n        return newList;\n    }\n\n    let mut swapped_list = newList.clone();\n    let first_element = swapped_list[0];\n    let last_element = swapped_list[swapped_list.len() - 1];\n\n    swapped_list[0] = last_element;\n    swapped_list[swapped_list.len() - 1] = first_element;\n\n    swapped_list\n}", "is_solved": false}
{"name": "mbpp_84_sequence", "language": "rs", "prompt": "/// Write a function to find the nth number in the newman conway sequence.\nfn sequence(n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_84_sequence.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "sequence", "test": "\n\nfn main() {\n    let candidate = sequence;\n    assert_eq!(candidate(10), 6);\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(3), 2);\n}\n", "solution": "/// Write a function to find the nth number in the newman conway sequence.\nfn sequence(n: isize) -> isize {\n    if n <= 0 {\n        panic!(\"n must be a positive integer\");\n    }\n\n    if n == 1 || n == 2 {\n        return 1;\n    }\n\n    let mut seq = vec![0; n as usize];\n    seq[0] = 1;\n    seq[1] = 1;\n\n    for i in 3..=n {\n        let idx = i as usize;\n        seq[idx - 1] = seq[(seq[idx - 2] - 1) as usize] + seq[(idx - seq[idx - 2]) as usize];\n    }\n\n    seq[n as usize - 1]\n}", "is_solved": false}
{"name": "mbpp_260_newman_prime", "language": "rs", "prompt": "/// Write a function to find the nth newman–shanks–williams prime number.\nfn newman_prime(n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_260_newman_prime.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "newman_prime", "test": "\n\nfn main() {\n    let candidate = newman_prime;\n    assert_eq!(candidate(3), 7);\n    assert_eq!(candidate(4), 17);\n    assert_eq!(candidate(5), 41);\n}\n", "solution": "/// Write a function to find the nth newman–shanks–williams prime number.\nfn newman_prime(n: isize) -> isize {\n    if n < 0 {\n        panic!(\"Invalid input: n must be a non-negative integer.\");\n    }\n\n    if n == 0 {\n        return 1;\n    } else if n == 1 {\n        return 1;\n    }\n\n    let mut prev = 1;\n    let mut current = 1;\n\n    for _ in 2..=n {\n        let next = 2 * current + prev;\n        prev = current;\n        current = next;\n    }\n\n    current\n}", "is_solved": true}
{"name": "mbpp_565_split", "language": "rs", "prompt": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_565_split.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "split", "test": "\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n", "solution": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n    let chars: Vec<String> = word.chars().map(|c| c.to_string()).collect();\n    chars\n}", "is_solved": true}
{"name": "mbpp_753_min_k", "language": "rs", "prompt": "/// Write a function to find minimum k records from tuple vector. https://www.geeksforgeeks.org/rsthon-find-minimum-k-records-from-tuple-vector/ - in this case a verbatim cors of test cases\nfn min_k(test_list: Vec<(String, isize)>, K: isize) -> Vec<(String, isize)> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "min_k", "test": "\n\nfn main() {\n    let candidate = min_k;\n    assert_eq!(candidate(vec![(String::from(\"Manjeet\"), 10), (String::from(\"Akshat\"), 4), (String::from(\"Akash\"), 2), (String::from(\"Nikhil\"), 8)], 2), vec![(String::from(\"Akash\"), 2), (String::from(\"Akshat\"), 4)]);\n    assert_eq!(candidate(vec![(String::from(\"Sanjeev\"), 11), (String::from(\"Angat\"), 5), (String::from(\"Akash\"), 3), (String::from(\"Nepin\"), 9)], 3), vec![(String::from(\"Akash\"), 3), (String::from(\"Angat\"), 5), (String::from(\"Nepin\"), 9)]);\n    assert_eq!(candidate(vec![(String::from(\"tanmay\"), 14), (String::from(\"Amer\"), 11), (String::from(\"Ayesha\"), 9), (String::from(\"SKD\"), 16)], 1), vec![(String::from(\"Ayesha\"), 9)]);\n}\n", "solution": "/// Write a function to find minimum k records from tuple vector. https://www.geeksforgeeks.org/rsthon-find-minimum-k-records-from-tuple-vector/ - in this case a verbatim cors of test cases\nfn min_k(test_list: Vec<(String, isize)>, K: isize) -> Vec<(String, isize)> {\n    test_list.into_iter()\n        .sorted_by(|a, b| a.1.cmp(&b.1))\n        .take(K as usize)\n        .collect()\n}", "is_solved": false}
{"name": "mbpp_113_check_integer", "language": "rs", "prompt": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_113_check_integer.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "check_integer", "test": "\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n", "solution": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    text.chars().all(|c| c.is_digit(10) || c == '-')\n}", "is_solved": true}
{"name": "mbpp_743_rotate_right", "language": "rs", "prompt": "/// Write a function to rotate a given vector by specified number of items to the right direction. https://www.geeksforgeeks.org/rsthon-program-right-rotate-vector-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "rotate_right", "test": "\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n", "solution": "/// Write a function to rotate a given vector by specified number of items to the right direction. https://www.geeksforgeeks.org/rsthon-program-right-rotate-vector-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let len = list.len();\n    let m = (m as usize) % len;\n    let mut result = Vec::with_capacity(len);\n\n    for i in 0..len {\n        let index = (i + len - m) % len;\n        result.push(list[index]);\n    }\n\n    result\n}", "is_solved": true}
{"name": "mbpp_598_armstrong_number", "language": "rs", "prompt": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_598_armstrong_number.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "armstrong_number", "test": "\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n", "solution": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n    let mut sum = 0;\n    let num_str = number.to_string();\n    let num_len = num_str.len() as u32;\n\n    for digit in num_str.chars() {\n        let digit_num = digit.to_digit(10).unwrap() as isize;\n        sum += digit_num.pow(num_len);\n    }\n\n    sum == number\n}", "is_solved": true}
{"name": "mbpp_229_re_arrange_array", "language": "rs", "prompt": "/// Write a function that takes in a vector and an integer n, and re-arranges the first n elements of the given vector so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfn re_arrange_array(arr: Vec<isize>, n: isize) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_229_re_arrange_array.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "re_arrange_array", "test": "\n\nfn main() {\n    let candidate = re_arrange_array;\n    assert_eq!(candidate(vec![-1, 2, -3, 4, 5, 6, -7, 8, 9], 9), vec![-1, -3, -7, 4, 5, 6, 2, 8, 9]);\n    assert_eq!(candidate(vec![12, -14, -26, 13, 15], 5), vec![-14, -26, 12, 13, 15]);\n    assert_eq!(candidate(vec![10, 24, 36, -42, -39, -78, 85], 7), vec![-42, -39, -78, 10, 24, 36, 85]);\n}\n", "solution": "/// Write a function that takes in a vector and an integer n, and re-arranges the first n elements of the given vector so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfn re_arrange_array(arr: Vec<isize>, n: isize) -> Vec<isize> {\n    let mut neg: Vec<isize> = Vec::new();\n    let mut pos: Vec<isize> = Vec::new();\n\n    for i in 0..n as usize {\n        if arr[i] < 0 {\n            neg.push(arr[i]);\n        } else {\n            pos.push(arr[i]);\n        }\n    }\n\n    neg.extend(pos);\n    neg.extend(&arr[n as usize..]);\n\n    neg\n}", "is_solved": false}
{"name": "mbpp_638_wind_chill", "language": "rs", "prompt": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_638_wind_chill.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "wind_chill", "test": "\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n", "solution": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let wind_chill_index = 13.12 + 0.6215 * t as f64 - 11.37 * v as f64 * 0.16 + 0.3965 * t as f64 * v as f64 * 0.16;\n    wind_chill_index.round() as isize\n}", "is_solved": false}
{"name": "mbpp_608_bell_Number", "language": "rs", "prompt": "/// Write a rsthon function to find nth bell number.\nfn bell_Number(n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_608_bell_Number.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "bell_Number", "test": "\n\nfn main() {\n    let candidate = bell_Number;\n    assert_eq!(candidate(2), 2);\n    assert_eq!(candidate(3), 5);\n    assert_eq!(candidate(4), 15);\n}\n", "solution": "/// Write a rsthon function to find nth bell number.\nfn bell_Number(n: isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n\n    let mut bell_matrix = vec![vec![0; n as usize + 1]; n as usize + 1];\n    bell_matrix[0][0] = 1;\n\n    for i in 1..=n as usize {\n        bell_matrix[i][0] = bell_matrix[i - 1][i - 1];\n\n        for j in 1..=i {\n            bell_matrix[i][j] = bell_matrix[i - 1][j - 1] + bell_matrix[i][j - 1];\n        }\n    }\n\n    bell_matrix[n as usize][0]\n}", "is_solved": true}
{"name": "mbpp_295_sum_div", "language": "rs", "prompt": "/// Write a function to return the sum of all divisors of a number.\nfn sum_div(number: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_295_sum_div.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "sum_div", "test": "\n\nfn main() {\n    let candidate = sum_div;\n    assert_eq!(candidate(8), 7);\n    assert_eq!(candidate(12), 16);\n    assert_eq!(candidate(7), 1);\n}\n", "solution": "/// Write a function to return the sum of all divisors of a number.\nfn sum_div(number: isize) -> isize {\n    let mut sum = 0;\n\n    for i in 1..=(number / 2) {\n        if number % i == 0 {\n            sum += i;\n        }\n    }\n\n    sum + number\n}", "is_solved": false}
{"name": "mbpp_630_get_coordinates", "language": "rs", "prompt": "/// Write a function to extract all the adjacent coordinates of the given coordinate tuple.\nfn get_coordinates(test_tup: (isize, isize)) -> Vec<Vec<isize>> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_630_get_coordinates.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "get_coordinates", "test": "\n\nfn main() {\n    let candidate = get_coordinates;\n    assert_eq!(candidate((3, 4)), vec![vec![2, 3], vec![2, 4], vec![2, 5], vec![3, 3], vec![3, 4], vec![3, 5], vec![4, 3], vec![4, 4], vec![4, 5]]);\n    assert_eq!(candidate((4, 5)), vec![vec![3, 4], vec![3, 5], vec![3, 6], vec![4, 4], vec![4, 5], vec![4, 6], vec![5, 4], vec![5, 5], vec![5, 6]]);\n    assert_eq!(candidate((5, 6)), vec![vec![4, 5], vec![4, 6], vec![4, 7], vec![5, 5], vec![5, 6], vec![5, 7], vec![6, 5], vec![6, 6], vec![6, 7]]);\n}\n", "solution": "/// Write a function to extract all the adjacent coordinates of the given coordinate tuple.\nfn get_coordinates(test_tup: (isize, isize)) -> Vec<Vec<isize>> {\n    let (x, y) = test_tup;\n    let mut coordinates = Vec::new();\n\n    coordinates.push(vec![x - 1, y]);\n    coordinates.push(vec![x + 1, y]);\n    coordinates.push(vec![x, y - 1]);\n    coordinates.push(vec![x, y + 1]);\n\n    coordinates\n}", "is_solved": false}
{"name": "mbpp_579_find_dissimilar", "language": "rs", "prompt": "/// Write a function to find the dissimilar elements in the given two tuples.\nfn find_dissimilar(test_tup1: (isize, isize, isize, isize), test_tup2: (isize, isize, isize, isize)) -> (isize, isize, isize, isize) {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_579_find_dissimilar.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "find_dissimilar", "test": "\n\nfn main() {\n    let candidate = find_dissimilar;\n    assert_eq!(candidate((3, 4, 5, 6), (5, 7, 4, 10)), (3, 6, 7, 10));\n    assert_eq!(candidate((1, 2, 3, 4), (7, 2, 3, 9)), (1, 4, 7, 9));\n    assert_eq!(candidate((21, 11, 25, 26), (26, 34, 21, 36)), (34, 36, 11, 25));\n}\n", "solution": "/// Write a function to find the dissimilar elements in the given two tuples.\nfn find_dissimilar(test_tup1: (isize, isize, isize, isize), test_tup2: (isize, isize, isize, isize)) -> (isize, isize, isize, isize) {\n    let mut dissimilar_elements = (0, 0, 0, 0);\n    let mut index = 0;\n\n    for (elem1, elem2) in test_tup1.into_iter().zip(test_tup2.into_iter()) {\n        if elem1 != elem2 {\n            dissimilar_elements = match index {\n                0 => (elem1, dissimilar_elements.1, dissimilar_elements.2, dissimilar_elements.3),\n                1 => (dissimilar_elements.0, elem1, dissimilar_elements.2, dissimilar_elements.3),\n                2 => (dissimilar_elements.0, dissimilar_elements.1, elem1, dissimilar_elements.3),\n                3 => (dissimilar_elements.0, dissimilar_elements.1, dissimilar_elements.2, elem1),\n                _ => dissimilar_elements,\n            };\n        }\n        index += 1;\n    }\n\n    dissimilar_elements\n}", "is_solved": false}
{"name": "mbpp_125_find_length", "language": "rs", "prompt": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "find_length", "test": "\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n", "solution": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut current_diff = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            current_diff += 1;\n        } else if c == '1' {\n            current_diff -= 1;\n        }\n\n        if current_diff < 0 {\n            current_diff = 0;\n        }\n\n        if current_diff > max_diff {\n            max_diff = current_diff;\n        }\n    }\n\n    max_diff\n}", "is_solved": true}
{"name": "mbpp_771_check_expression", "language": "rs", "prompt": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "check_expression", "test": "\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n", "solution": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n    let mut stack: Vec<char> = Vec::new();\n\n    for ch in exp.chars() {\n        match ch {\n            '(' | '[' | '{' => stack.push(ch),\n            ')' | ']' | '}' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, ch) {\n                    return false;\n                }\n            }\n            _ => continue,\n        }\n    }\n\n    stack.is_empty()\n}\n\nfn is_matching_pair(open: char, close: char) -> bool {\n    match (open, close) {\n        ('(', ')') | ('[', ']') | ('{', '}') => true,\n        _ => false,\n    }\n}", "is_solved": true}
{"name": "mbpp_801_test_three_equal", "language": "rs", "prompt": "/// Write a rsthon function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_801_test_three_equal.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "test_three_equal", "test": "\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n", "solution": "/// Write a rsthon function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n\n    count\n}", "is_solved": false}
{"name": "mbpp_389_find_lucas", "language": "rs", "prompt": "/// Write a function to find the n'th lucas number.\nfn find_lucas(n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_389_find_lucas.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "find_lucas", "test": "\n\nfn main() {\n    let candidate = find_lucas;\n    assert_eq!(candidate(9), 76);\n    assert_eq!(candidate(4), 7);\n    assert_eq!(candidate(3), 4);\n}\n", "solution": "/// Write a function to find the n'th lucas number.\nfn find_lucas(n: isize) -> isize {\n    if n == 0 {\n        return 2;\n    } else if n == 1 {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}", "is_solved": true}
{"name": "mbpp_102_snake_to_camel", "language": "rs", "prompt": "/// Write a function to convert a snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "snake_to_camel", "test": "\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"python_program\")), String::from(\"PythonProgram\"));\n    assert_eq!(candidate(String::from(\"python_language\")), String::from(\"PythonLanguage\"));\n    assert_eq!(candidate(String::from(\"programming_language\")), String::from(\"ProgrammingLanguage\"));\n}\n", "solution": "/// Write a function to convert a snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut camel_word = String::new();\n    let mut to_upper = false;\n\n    for c in word.chars() {\n        if c == '_' {\n            to_upper = true;\n        } else if to_upper {\n            camel_word.push(c.to_ascii_uppercase());\n            to_upper = false;\n        } else {\n            camel_word.push(c);\n        }\n    }\n\n    camel_word\n}", "is_solved": false}
{"name": "mbpp_604_reverse_words", "language": "rs", "prompt": "/// Write a function to reverse words seperated by spaces in a given string.\nfn reverse_words(s: String) -> String {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_604_reverse_words.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "reverse_words", "test": "\n\nfn main() {\n    let candidate = reverse_words;\n    assert_eq!(candidate(String::from(\"python program\")), String::from(\"program python\"));\n    assert_eq!(candidate(String::from(\"java language\")), String::from(\"language java\"));\n    assert_eq!(candidate(String::from(\"indian man\")), String::from(\"man indian\"));\n}\n", "solution": "/// Write a function to reverse words seperated by spaces in a given string.\nfn reverse_words(s: String) -> String {\n    s.split_whitespace()\n        .rev()\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}", "is_solved": true}
{"name": "mbpp_624_is_upper", "language": "rs", "prompt": "/// Write a rsthon function to convert a given string to uppercase.\nfn is_upper(string: String) -> String {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_624_is_upper.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "is_upper", "test": "\n\nfn main() {\n    let candidate = is_upper;\n    assert_eq!(candidate(String::from(\"person\")), String::from(\"PERSON\"));\n    assert_eq!(candidate(String::from(\"final\")), String::from(\"FINAL\"));\n    assert_eq!(candidate(String::from(\"Valid\")), String::from(\"VALID\"));\n}\n", "solution": "/// Write a rsthon function to convert a given string to uppercase.\nfn is_upper(string: String) -> String {\n    string.to_uppercase()\n}", "is_solved": true}
{"name": "mbpp_558_digit_distance_nums", "language": "rs", "prompt": "/// Write a rsthon function to find the sum of the per-digit difference between two integers.\nfn digit_distance_nums(n1: isize, n2: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "digit_distance_nums", "test": "\n\nfn main() {\n    let candidate = digit_distance_nums;\n    assert_eq!(candidate(1, 2), 1);\n    assert_eq!(candidate(23, 56), 6);\n    assert_eq!(candidate(123, 256), 7);\n}\n", "solution": "/// Write a rsthon function to find the sum of the per-digit difference between two integers.\nfn digit_distance_nums(n1: isize, n2: isize) -> isize {\n    let n1_digits: Vec<isize> = n1.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect();\n    let n2_digits: Vec<isize> = n2.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect();\n\n    let mut sum = 0;\n    for i in 0..n1_digits.len() {\n        sum += (n1_digits[i] - n2_digits[i]).abs();\n    }\n\n    sum\n}", "is_solved": true}
{"name": "mbpp_615_average_tuple", "language": "rs", "prompt": "/// Write a function which takes a vectors of vectors and returns the average value for each subvector as a vector.\nfn average_tuple(nums: Vec<Vec<isize>>) -> Vec<f64> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_615_average_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "average_tuple", "test": "\n\nfn main() {\n    let candidate = average_tuple;\n    assert_eq!(candidate(vec![vec![10, 10, 10, 12], vec![30, 45, 56, 45], vec![81, 80, 39, 32], vec![1, 2, 3, 4]]), vec![30.5, 34.25, 27.0, 23.25]);\n    assert_eq!(candidate(vec![vec![1, 1, -5], vec![30, -15, 56], vec![81, -60, -39], vec![-10, 2, 3]]), vec![25.5, -18.0, 3.75]);\n    assert_eq!(candidate(vec![vec![100, 100, 100, 120], vec![300, 450, 560, 450], vec![810, 800, 390, 320], vec![10, 20, 30, 40]]), vec![305.0, 342.5, 270.0, 232.5]);\n}\n", "solution": "/// Write a function which takes a vectors of vectors and returns the average value for each subvector as a vector.\nfn average_tuple(nums: Vec<Vec<isize>>) -> Vec<f64> {\n    let mut averages: Vec<f64> = Vec::new();\n\n    for subvector in nums {\n        let sum: isize = subvector.iter().sum();\n        let count = subvector.len() as f64;\n        let average = sum as f64 / count;\n        averages.push(average);\n    }\n\n    averages\n}", "is_solved": false}
{"name": "mbpp_166_find_even_pair", "language": "rs", "prompt": "/// Write a function that counts the number of pairs of integers in a vector that xor to an even number.\nfn find_even_pair(A: Vec<isize>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_166_find_even_pair.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "find_even_pair", "test": "\n\nfn main() {\n    let candidate = find_even_pair;\n    assert_eq!(candidate(vec![5, 4, 7, 2, 1]), 4);\n    assert_eq!(candidate(vec![7, 2, 8, 1, 0, 5, 11]), 9);\n    assert_eq!(candidate(vec![1, 2, 3]), 1);\n}\n", "solution": "/// Write a function that counts the number of pairs of integers in a vector that xor to an even number.\nfn find_even_pair(A: Vec<isize>) -> isize {\n    let mut count = 0;\n\n    for i in 0..A.len() {\n        for j in i + 1..A.len() {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count += 1;\n            }\n        }\n    }\n\n    count\n}", "is_solved": true}
{"name": "mbpp_58_opposite_Signs", "language": "rs", "prompt": "/// Write a rsthon function to check whether the given two integers have opposite sign or not.\nfn opposite_Signs(x: isize, y: isize) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_58_opposite_Signs.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "opposite_Signs", "test": "\n\nfn main() {\n    let candidate = opposite_Signs;\n    assert_eq!(candidate(1, -2), true);\n    assert_eq!(candidate(3, 2), false);\n    assert_eq!(candidate(-10, -10), false);\n    assert_eq!(candidate(-2, 2), true);\n}\n", "solution": "/// Write a rsthon function to check whether the given two integers have opposite sign or not.\nfn opposite_Signs(x: isize, y: isize) -> bool {\n    (x ^ y) < 0\n}", "is_solved": true}
{"name": "mbpp_569_sort_sublists", "language": "rs", "prompt": "/// Write a function to sort each subvector of strings in a given vector of vectors.\nfn sort_sublists(list1: Vec<Vec<String>>) -> Vec<Vec<String>> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_569_sort_sublists.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "sort_sublists", "test": "\n\nfn main() {\n    let candidate = sort_sublists;\n    assert_eq!(candidate(vec![vec![String::from(\"green\"), String::from(\"orange\")], vec![String::from(\"black\"), String::from(\"white\")], vec![String::from(\"white\"), String::from(\"black\"), String::from(\"orange\")]]), vec![vec![String::from(\"green\"), String::from(\"orange\")], vec![String::from(\"black\"), String::from(\"white\")], vec![String::from(\"black\"), String::from(\"orange\"), String::from(\"white\")]]);\n    assert_eq!(candidate(vec![vec![String::from(\"green\"), String::from(\"orange\")], vec![String::from(\"black\")], vec![String::from(\"green\"), String::from(\"orange\")], vec![String::from(\"white\")]]), vec![vec![String::from(\"green\"), String::from(\"orange\")], vec![String::from(\"black\")], vec![String::from(\"green\"), String::from(\"orange\")], vec![String::from(\"white\")]]);\n    assert_eq!(candidate(vec![vec![String::from(\"a\"), String::from(\"b\")], vec![String::from(\"d\"), String::from(\"c\")], vec![String::from(\"g\"), String::from(\"h\")], vec![String::from(\"f\"), String::from(\"e\")]]), vec![vec![String::from(\"a\"), String::from(\"b\")], vec![String::from(\"c\"), String::from(\"d\")], vec![String::from(\"g\"), String::from(\"h\")], vec![String::from(\"e\"), String::from(\"f\")]]);\n}\n", "solution": "/// Write a function to sort each subvector of strings in a given vector of vectors.\nfn sort_sublists(list1: Vec<Vec<String>>) -> Vec<Vec<String>> {\n    let mut sorted_list = list1.clone();\n    for sublist in sorted_list.iter_mut() {\n        sublist.sort();\n    }\n    sorted_list\n}", "is_solved": true}
{"name": "mbpp_255_combinations_colors", "language": "rs", "prompt": "/// Write a function that takes in a vector and length n, and generates all combinations (with repetition) of the elements of the vector and returns a vector with a vector for each combination.\nfn combinations_colors(l: Vec<String>, n: isize) -> Vec<Vec<String>> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_255_combinations_colors.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "combinations_colors", "test": "\n\nfn main() {\n    let candidate = combinations_colors;\n    assert_eq!(candidate(vec![String::from(\"Red\"), String::from(\"Green\"), String::from(\"Blue\")], 1), vec![vec![String::from(\"Red\")], vec![String::from(\"Green\")], vec![String::from(\"Blue\")]]);\n    assert_eq!(candidate(vec![String::from(\"Red\"), String::from(\"Green\"), String::from(\"Blue\")], 2), vec![vec![String::from(\"Red\"), String::from(\"Red\")], vec![String::from(\"Red\"), String::from(\"Green\")], vec![String::from(\"Red\"), String::from(\"Blue\")], vec![String::from(\"Green\"), String::from(\"Green\")], vec![String::from(\"Green\"), String::from(\"Blue\")], vec![String::from(\"Blue\"), String::from(\"Blue\")]]);\n    assert_eq!(candidate(vec![String::from(\"Red\"), String::from(\"Green\"), String::from(\"Blue\")], 3), vec![vec![String::from(\"Red\"), String::from(\"Red\"), String::from(\"Red\")], vec![String::from(\"Red\"), String::from(\"Red\"), String::from(\"Green\")], vec![String::from(\"Red\"), String::from(\"Red\"), String::from(\"Blue\")], vec![String::from(\"Red\"), String::from(\"Green\"), String::from(\"Green\")], vec![String::from(\"Red\"), String::from(\"Green\"), String::from(\"Blue\")], vec![String::from(\"Red\"), String::from(\"Blue\"), String::from(\"Blue\")], vec![String::from(\"Green\"), String::from(\"Green\"), String::from(\"Green\")], vec![String::from(\"Green\"), String::from(\"Green\"), String::from(\"Blue\")], vec![String::from(\"Green\"), String::from(\"Blue\"), String::from(\"Blue\")], vec![String::from(\"Blue\"), String::from(\"Blue\"), String::from(\"Blue\")]]);\n}\n", "solution": "/// Write a function that takes in a vector and length n, and generates all combinations (with repetition) of the elements of the vector and returns a vector with a vector for each combination.\nfn combinations_colors(l: Vec<String>, n: isize) -> Vec<Vec<String>> {\n    if n <= 0 {\n        return vec![vec![]];\n    }\n\n    let mut result = Vec::new();\n    let mut stack = vec![(0, vec![])];\n    while let Some((index, mut combination)) = stack.pop() {\n        if combination.len() == n as usize {\n            result.push(combination);\n        } else {\n            for i in index..l.len() {\n                let mut new_combination = combination.clone();\n                new_combination.push(l[i].clone());\n                stack.push((i, new_combination));\n            }\n        }\n    }\n\n    result\n}", "is_solved": false}
{"name": "mbpp_619_move_num", "language": "rs", "prompt": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "move_num", "test": "\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n", "solution": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_str = String::new();\n    let mut non_num_str = String::new();\n\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            non_num_str.push(c);\n        }\n    }\n\n    non_num_str.push_str(&num_str);\n    non_num_str\n}", "is_solved": true}
{"name": "mbpp_249_intersection_array", "language": "rs", "prompt": "/// Write a function to find the intersection of two vectors.\nfn intersection_array(array_nums1: Vec<isize>, array_nums2: Vec<isize>) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "intersection_array", "test": "\n\nfn main() {\n    let candidate = intersection_array;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 7, 8, 9, 10], vec![1, 2, 4, 8, 9]), vec![1, 2, 8, 9]);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 7, 8, 9, 10], vec![3, 5, 7, 9]), vec![3, 5, 7, 9]);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 7, 8, 9, 10], vec![10, 20, 30, 40]), vec![10]);\n}\n", "solution": "/// Write a function to find the intersection of two vectors.\nfn intersection_array(array_nums1: Vec<isize>, array_nums2: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let set1: HashSet<isize> = array_nums1.into_iter().collect();\n    let set2: HashSet<isize> = array_nums2.into_iter().collect();\n\n    for num in set1.intersection(&set2) {\n        result.push(*num);\n    }\n\n    result.sort();\n    result\n}", "is_solved": false}
{"name": "mbpp_250_count_X", "language": "rs", "prompt": "/// Write a rsthon function that takes in a tuple and an element and counts the occcurences of the element in the vector.\nfn count_X(tup: Vec<isize>, x: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_250_count_X.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "count_X", "test": "\n\nfn main() {\n    let candidate = count_X;\n    assert_eq!(candidate(vec![10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 4), 0);\n    assert_eq!(candidate(vec![10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 10), 3);\n    assert_eq!(candidate(vec![10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 8), 4);\n}\n", "solution": "/// Write a rsthon function that takes in a tuple and an element and counts the occcurences of the element in the vector.\nfn count_X(tup: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for item in tup.iter() {\n        if *item == x {\n            count += 1;\n        }\n    }\n    count\n}", "is_solved": true}
{"name": "mbpp_622_get_median", "language": "rs", "prompt": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "get_median", "test": "\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n", "solution": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    for count in 0..=(n as usize) {\n        if i == n as usize {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if j == n as usize {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n    }\n\n    return (m1 as f64 + m2 as f64) / 2.0;\n}", "is_solved": true}
{"name": "mbpp_80_tetrahedral_number", "language": "rs", "prompt": "/// Write a function to find the nth tetrahedral number.\nfn tetrahedral_number(n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_80_tetrahedral_number.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "tetrahedral_number", "test": "\n\nfn main() {\n    let candidate = tetrahedral_number;\n    assert_eq!(candidate(5), 35);\n    assert_eq!(candidate(6), 56);\n    assert_eq!(candidate(7), 84);\n}\n", "solution": "/// Write a function to find the nth tetrahedral number.\nfn tetrahedral_number(n: isize) -> isize {\n    if n <= 0 {\n        return 0;\n    }\n    n * (n + 1) * (n + 2) / 6\n}", "is_solved": true}
{"name": "mbpp_780_find_combinations", "language": "rs", "prompt": "/// Write a function to find the combinations of sums with tuples in the given tuple vector. https://www.geeksforgeeks.org/rsthon-combinations-of-sum-with-tuples-in-tuple-vector/\nfn find_combinations(test_list: Vec<(isize, isize)>) -> Vec<(isize, isize)> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_780_find_combinations.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "find_combinations", "test": "\n\nfn main() {\n    let candidate = find_combinations;\n    assert_eq!(candidate(vec![(2, 4), (6, 7), (5, 1), (6, 10)]), vec![(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]);\n    assert_eq!(candidate(vec![(3, 5), (7, 8), (6, 2), (7, 11)]), vec![(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]);\n    assert_eq!(candidate(vec![(4, 6), (8, 9), (7, 3), (8, 12)]), vec![(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]);\n}\n", "solution": "/// Write a function to find the combinations of sums with tuples in the given tuple vector. https://www.geeksforgeeks.org/rsthon-combinations-of-sum-with-tuples-in-tuple-vector/\nfn find_combinations(test_list: Vec<(isize, isize)>) -> Vec<(isize, isize)> {\n    let mut result: Vec<(isize, isize)> = Vec::new();\n\n    for i in 0..test_list.len() {\n        for j in i + 1..test_list.len() {\n            let sum1 = test_list[i].0 + test_list[j].0;\n            let sum2 = test_list[i].1 + test_list[j].1;\n            result.push((sum1, sum2));\n        }\n    }\n\n    result.sort();\n    result.dedup();\n    result\n}", "is_solved": false}
{"name": "mbpp_733_find_first_occurrence", "language": "rs", "prompt": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "find_first_occurrence", "test": "\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n", "solution": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    if A.is_empty() {\n        return -1;\n    }\n\n    let mut left = 0;\n    let mut right = A.len() - 1;\n    let mut result = -1;\n\n    while left <= right {\n        let mid = left + (right - left) / 2;\n\n        if A[mid] == x {\n            result = mid as isize;\n            right = mid - 1;\n        } else if A[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    result\n}", "is_solved": true}
{"name": "mbpp_6_differ_At_One_Bit_Pos", "language": "rs", "prompt": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_6_differ_At_One_Bit_Pos.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "differ_At_One_Bit_Pos", "test": "\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n", "solution": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let xor_result = a ^ b;\n    return xor_result.count_ones() == 1;\n}", "is_solved": true}
{"name": "mbpp_762_check_monthnumber_number", "language": "rs", "prompt": "/// Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nfn check_monthnumber_number(monthnum3: isize) -> bool {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_762_check_monthnumber_number.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "check_monthnumber_number", "test": "\n\nfn main() {\n    let candidate = check_monthnumber_number;\n    assert_eq!(candidate(6), true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(12), false);\n}\n", "solution": "/// Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nfn check_monthnumber_number(monthnum3: isize) -> bool {\n    match monthnum3 {\n        4 | 6 | 9 | 11 => true,\n        _ => false,\n    }\n}", "is_solved": true}
{"name": "mbpp_625_swap_List", "language": "rs", "prompt": "/// Write a rsthon function to interchange the first and last element in a given vector.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_625_swap_List.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "swap_List", "test": "\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 4]), vec![4, 2, 3, 4, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n", "solution": "/// Write a rsthon function to interchange the first and last element in a given vector.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    if newList.is_empty() {\n        return newList;\n    }\n\n    let mut swapped_list = newList.clone();\n    let first_element = swapped_list[0];\n    let last_element = swapped_list[swapped_list.len() - 1];\n\n    swapped_list[0] = last_element;\n    swapped_list[swapped_list.len() - 1] = first_element;\n\n    swapped_list\n}", "is_solved": false}
{"name": "mbpp_392_get_max_sum", "language": "rs", "prompt": "/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfn get_max_sum(n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "get_max_sum", "test": "\n\nfn main() {\n    let candidate = get_max_sum;\n    assert_eq!(candidate(60), 106);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(2), 2);\n}\n", "solution": "/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfn get_max_sum(n: isize) -> isize {\n    if n <= 0 {\n        return 0;\n    }\n\n    let n2 = get_max_sum(n / 2);\n    let n3 = get_max_sum(n / 3);\n    let n4 = get_max_sum(n / 4);\n    let n5 = get_max_sum(n / 5);\n\n    n.max(n2 + n3 + n4 + n5)\n}", "is_solved": true}
{"name": "mbpp_784_mul_even_odd", "language": "rs", "prompt": "/// Write a function to find the product of first even and odd number of a given vector.\nfn mul_even_odd(list1: Vec<isize>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_784_mul_even_odd.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "mul_even_odd", "test": "\n\nfn main() {\n    let candidate = mul_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 10);\n}\n", "solution": "/// Write a function to find the product of first even and odd number of a given vector.\nfn mul_even_odd(list1: Vec<isize>) -> isize {\n    let mut even: Option<isize> = None;\n    let mut odd: Option<isize> = None;\n\n    for num in list1 {\n        if num % 2 == 0 && even.is_none() {\n            even = Some(num);\n        } else if num % 2 != 0 && odd.is_none() {\n            odd = Some(num);\n        }\n\n        if even.is_some() && odd.is_some() {\n            break;\n        }\n    }\n\n    match (even, odd) {\n        (Some(e), Some(o)) => e * o,\n        _ => 0,\n    }\n}", "is_solved": true}
{"name": "mbpp_109_odd_Equivalent", "language": "rs", "prompt": "/// Write a rsthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nfn odd_Equivalent(s: String, n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_109_odd_Equivalent.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "odd_Equivalent", "test": "\n\nfn main() {\n    let candidate = odd_Equivalent;\n    assert_eq!(candidate(String::from(\"011001\"), 6), 3);\n    assert_eq!(candidate(String::from(\"11011\"), 5), 4);\n    assert_eq!(candidate(String::from(\"1010\"), 4), 2);\n}\n", "solution": "/// Write a rsthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nfn odd_Equivalent(s: String, n: isize) -> isize {\n    let mut count = 0;\n    let mut s = s.chars().collect::<Vec<char>>();\n\n    for _ in 0..n {\n        s.rotate_left(1);\n        let rotated_string = s.iter().collect::<String>();\n        let num = isize::from_str_radix(&rotated_string, 2).unwrap();\n\n        if num % 2 != 0 {\n            count += 1;\n        }\n    }\n\n    count\n}", "is_solved": true}
{"name": "mbpp_95_Find_Min_Length", "language": "rs", "prompt": "/// Write a rsthon function to find the length of the smallest vector in a vector of vectors.\nfn Find_Min_Length(lst: Vec<Vec<isize>>) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_95_Find_Min_Length.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "Find_Min_Length", "test": "\n\nfn main() {\n    let candidate = Find_Min_Length;\n    assert_eq!(candidate(vec![vec![1], vec![1, 2]]), 1);\n    assert_eq!(candidate(vec![vec![1, 2], vec![1, 2, 3], vec![1, 2, 3, 4]]), 2);\n    assert_eq!(candidate(vec![vec![3, 3, 3], vec![4, 4, 4, 4]]), 3);\n}\n", "solution": "/// Write a rsthon function to find the length of the smallest vector in a vector of vectors.\nfn Find_Min_Length(lst: Vec<Vec<isize>>) -> isize {\n    let mut min_length = std::isize::MAX;\n\n    for vec in lst {\n        let length = vec.len() as isize;\n        if length < min_length {\n            min_length = length;\n        }\n    }\n\n    min_length\n}", "is_solved": true}
{"name": "mbpp_399_bitwise_xor", "language": "rs", "prompt": "/// Write a function to perform the mathematical bitwise xor operation across the given tuples.\nfn bitwise_xor(test_tup1: (isize, isize, isize, isize), test_tup2: (isize, isize, isize, isize)) -> (isize, isize, isize, isize) {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_399_bitwise_xor.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "bitwise_xor", "test": "\n\nfn main() {\n    let candidate = bitwise_xor;\n    assert_eq!(candidate((10, 4, 6, 9), (5, 2, 3, 3)), (15, 6, 5, 10));\n    assert_eq!(candidate((11, 5, 7, 10), (6, 3, 4, 4)), (13, 6, 3, 14));\n    assert_eq!(candidate((12, 6, 8, 11), (7, 4, 5, 6)), (11, 2, 13, 13));\n}\n", "solution": "/// Write a function to perform the mathematical bitwise xor operation across the given tuples.\nfn bitwise_xor(test_tup1: (isize, isize, isize, isize), test_tup2: (isize, isize, isize, isize)) -> (isize, isize, isize, isize) {\n    let xor_tup1 = test_tup1.0 ^ test_tup2.0;\n    let xor_tup2 = test_tup1.1 ^ test_tup2.1;\n    let xor_tup3 = test_tup1.2 ^ test_tup2.2;\n    let xor_tup4 = test_tup1.3 ^ test_tup2.3;\n\n    (xor_tup1, xor_tup2, xor_tup3, xor_tup4)\n}", "is_solved": true}
{"name": "mbpp_641_is_nonagonal", "language": "rs", "prompt": "/// Write a function to find the nth nonagonal number.\nfn is_nonagonal(n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "is_nonagonal", "test": "\n\nfn main() {\n    let candidate = is_nonagonal;\n    assert_eq!(candidate(10), 325);\n    assert_eq!(candidate(15), 750);\n    assert_eq!(candidate(18), 1089);\n}\n", "solution": "/// Write a function to find the nth nonagonal number.\nfn is_nonagonal(n: isize) -> isize {\n    if n <= 0 {\n        return 0;\n    }\n    n * (7 * n - 5) / 2\n}", "is_solved": true}
{"name": "mbpp_59_is_octagonal", "language": "rs", "prompt": "/// Write a function to find the nth octagonal number.\nfn is_octagonal(n: isize) -> isize {\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py", "prompt_terminology": "reworded", "stop_tokens": ["\n}"], "entry_point": "is_octagonal", "test": "\n\nfn main() {\n    let candidate = is_octagonal;\n    assert_eq!(candidate(5), 65);\n    assert_eq!(candidate(10), 280);\n    assert_eq!(candidate(15), 645);\n}\n", "solution": "/// Write a function to find the nth octagonal number.\nfn is_octagonal(n: isize) -> isize {\n    if n <= 0 {\n        return 0;\n    }\n    n * (3 * n - 2)\n}", "is_solved": true}
