{"code": "\nclass Solution():\n\n    def findShortestCycle(self, n: int, edges: List[List[int]]) -> int:\n        '\\n    There is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1. The edges in the graph are represented by a given 2D integer array edges, where edges[i] = [ui, vi] denotes an edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself.\\n    Return the length of the shortest cycle in the graph. If no cycle exists, return -1.\\n    A cycle is a path that starts and ends at the same node, and each edge in the path is used only once.\\n    '\n        from collections import defaultdict\n        graph = defaultdict(list)\n        for (u, v) in edges:\n            graph[u].append(v)\n            graph[v].append(u)\n\n        def dfs(node, parent, visited, depth):\n            visited[node] = True\n            for neighbor in graph[node]:\n                if (neighbor == parent):\n                    continue\n                if visited[neighbor]:\n                    return depth\n                cycle_depth = dfs(neighbor, node, visited, (depth + 1))\n                if (cycle_depth != (- 1)):\n                    return cycle_depth\n            return (- 1)\n        shortest_cycle = float('inf')\n        for node in range(n):\n            visited = ([False] * n)\n            cycle_depth = dfs(node, (- 1), visited, 0)\n            if (cycle_depth != (- 1)):\n                shortest_cycle = min(shortest_cycle, cycle_depth)\n        return (shortest_cycle if (shortest_cycle != float('inf')) else (- 1))\n", "status": "Wrong Answer", "reward": false, "info": {"status_code": 11, "lang": "python3", "run_success": true, "status_runtime": "N/A", "memory": 15608000, "question_id": "2671", "elapsed_time": 1656, "compare_result": "0100000000001100100100100100100010001000100000000000000000000100000001011001001110001001", "code_output": "2", "std_output": "", "last_testcase": "7\n[[0,1],[1,2],[2,0],[3,4],[4,5],[5,6],[6,3]]", "expected_output": "3", "task_finish_time": 1681356176540, "total_correct": 21, "total_testcases": 88, "runtime_percentile": null, "status_memory": "N/A", "memory_percentile": null, "pretty_lang": "Python3", "submission_id": "932837427", "input_formatted": "7, [[0,1],[1,2],[2,0],[3,4],[4,5],[5,6],[6,3]]", "input": "7\n[[0,1],[1,2],[2,0],[3,4],[4,5],[5,6],[6,3]]", "status_msg": "Wrong Answer", "state": "SUCCESS"}}
{"code": "\nclass Solution():\n\n    def findMinimumTime(self, tasks: List[List[int]]) -> int:\n        '\\n    There is a computer that can run an unlimited number of tasks at the same time. You are given a 2D integer array tasks where tasks[i] = [starti, endi, durationi] indicates that the ith task should run for a total of durationi seconds (not necessarily continuous) within the inclusive time range [starti, endi].\\n    You may turn on the computer only when it needs to run a task. You can also turn it off if it is idle.\\n    Return the minimum time during which the computer should be turned on to complete all tasks.\\n    '\n        from typing import List\n        start_times = [task[0] for task in tasks]\n        end_times = [task[1] for task in tasks]\n        max_end_time = max(end_times)\n        time_intervals = ([0] * (max_end_time + 1))\n        for task in tasks:\n            (start, end, duration) = task\n            for i in range(start, (end + 1)):\n                time_intervals[i] += duration\n        return max(time_intervals)\n", "status": "Wrong Answer", "reward": false, "info": {"status_code": 11, "lang": "python3", "run_success": true, "status_runtime": "N/A", "memory": 15248000, "question_id": "2657", "elapsed_time": 1396, "compare_resultcode_output": "3", "std_output": "", "last_testcase": "[[2,3,1],[4,5,1],[1,5,2]]", "expected_output": "2", "task_finish_time": 1681356201123, "total_correct": 254, "total_testcases": 1059, "runtime_percentile": null, "status_memory": "N/A", "memory_percentile": null, "pretty_lang": "Python3", "submission_id": "932837598", "input_formatted": "[[2,3,1],[4,5,1],[1,5,2]]", "input": "[[2,3,1],[4,5,1],[1,5,2]]", "status_msg": "Wrong Answer", "state": "SUCCESS"}}
{"code": "\nclass Solution():\n\n    def rootCount(self, edges: List[List[int]], guesses: List[List[int]], k: int) -> int:\n        \"\\n    Alice has an undirected tree with n nodes labeled from 0 to n - 1. The tree is represented as a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\\n    Alice wants Bob to find the root of the tree. She allows Bob to make several guesses about her tree. In one guess, he does the following:\\n    Chooses two distinct integers u and v such that there exists an edge [u, v] in the tree.\\n    He tells Alice that u is the parent of v in the tree.\\n    Bob's guesses are represented by a 2D integer array guesses where guesses[j] = [uj, vj] indicates Bob guessed uj to be the parent of vj.\\n    Alice being lazy, does not reply to each of Bob's guesses, but just says that at least k of his guesses are true.\\n    Given the 2D integer arrays edges, guesses and the integer k, return the number of possible nodes that can be the root of Alice's tree. If there is no such tree, return 0.\\n    \"\n        from typing import List\n        n = (len(edges) + 1)\n        adj = [[] for _ in range(n)]\n        for (u, v) in edges:\n            adj[u].append(v)\n            adj[v].append(u)\n        parent = ([(- 1)] * n)\n        for (u, v) in guesses:\n            parent[v] = u\n        cnt = ([0] * n)\n        for v in range(n):\n            if (parent[v] != (- 1)):\n                cnt[parent[v]] += 1\n        leaves = [u for u in range(n) if (not adj[u])]\n        q = [u for u in range(n) if (cnt[u] < k)]\n        while q:\n            u = q.pop()\n            for v in adj[u]:\n                cnt[v] += 1\n                if (cnt[v] == k):\n                    q.append(v)\n        res = [u for u in range(n) if (cnt[u] >= k)]\n        for u in leaves:\n            if (cnt[u] >= k):\n                res.append(u)\n        return (len(res) if res else 0)\n", "status": "Wrong Answer", "reward": false, "info": {"status_code": 11, "lang": "python3", "run_success": true, "status_runtime": "N/A", "memory": 84664000, "question_id": "2652", "elapsed_time": 1887, "compare_result": "100010011110001101011110010011110000100110111110101", "code_output": "3", "std_output": "", "last_testcase": "[[0,1],[1,2],[2,3],[3,4]]\n[[1,0],[3,4],[2,1],[3,2]]\n1", "expected_output": "5", "task_finish_time": 1681356232035, "total_correct": 28, "total_testcases": 51, "runtime_percentile": null, "status_memory": "N/A", "memory_percentile": null, "pretty_lang": "Python3", "submission_id": "932837771", "input_formatted": "[[0,1],[1,2],[2,3],[3,4]], [[1,0],[3,4],[2,1],[3,2]], 1", "input": "[[0,1],[1,2],[2,3],[3,4]]\n[[1,0],[3,4],[2,1],[3,2]]\n1", "status_msg": "Wrong Answer", "state": "SUCCESS"}}
{"code": "\nclass Solution():\n\n    def waysToReachTarget(self, target: int, types: List[List[int]]) -> int:\n        '\\n    There is a test that has n types of questions. You are given an integer target and a 0-indexed 2D integer array types where types[i] = [counti, marksi] indicates that there are counti questions of the ith type, and each one of them is worth marksi points.\\n    Return the number of ways you can earn exactly target points in the exam. Since the answer may be too large, return it modulo 109 + 7.\\n    Note that questions of the same type are indistinguishable.\\n    For example, if there are 3 questions of the same type, then solving the 1st and 2nd questions is the same as solving the 1st and 3rd questions, or the 2nd and 3rd questions.\\n    '\n        from typing import List\n        MOD = ((10 ** 9) + 7)\n        dp = ([0] * (target + 1))\n        dp[0] = 1\n        for (count, marks) in types:\n            for i in range(target, (marks - 1), (- 1)):\n                for j in range(1, (count + 1)):\n                    if ((i - (j * marks)) >= 0):\n                        dp[i] = ((dp[i] + dp[(i - (j * marks))]) % MOD)\n        return dp[target]\n", "status": "Accepted", "reward": true, "info": {"status_code": 10, "lang": "python3", "run_success": true, "status_runtime": "3331 ms", "memory": 13792000, "question_id": "2648", "elapsed_time": 3352, "compare_result": "111111111111111111111111111111111111111111111111111111111111111", "code_output": "", "std_output": "", "last_testcase": "", "expected_output": "", "task_finish_time": 1681356259730, "total_correct": 63, "total_testcases": 63, "runtime_percentile": 52.059799999999726, "status_memory": "13.8 MB", "memory_percentile": 98.9985, "pretty_lang": "Python3", "submission_id": "932837912", "status_msg": "Accepted", "state": "SUCCESS"}}
{"code": "\nclass Solution():\n\n    def findValidSplit(self, nums: List[int]) -> int:\n        '\\n    You are given a 0-indexed integer array nums of length n.\\n    A split at an index i where 0 <= i <= n - 2 is called valid if the product of the first i + 1 elements and the product of the remaining elements are coprime.\\n    For example, if nums = [2, 3, 3], then a split at the index i = 0 is valid because 2 and 9 are coprime, while a split at the index i = 1 is not valid because 6 and 3 are not coprime. A split at the index i = 2 is not valid because i == n - 1.\\n    Return the smallest index i at which the array can be split validly or -1 if there is no such split.\\n    Two values val1 and val2 are coprime if gcd(val1, val2) == 1 where gcd(val1, val2) is the greatest common divisor of val1 and val2.\\n    '\n        from math import gcd\n        from typing import List\n        n = len(nums)\n        prefix_product = [nums[0]]\n        for i in range(1, n):\n            prefix_product.append((prefix_product[(- 1)] * nums[i]))\n        suffix_product = [nums[(- 1)]]\n        for i in range((n - 2), (- 1), (- 1)):\n            suffix_product.append((suffix_product[(- 1)] * nums[i]))\n        suffix_product.reverse()\n        for i in range((n - 1)):\n            if (gcd(prefix_product[i], suffix_product[(i + 1)]) == 1):\n                return i\n        return (- 1)\n", "status": "Time Limit Exceeded", "reward": false, "info": {"status_code": 14, "lang": "python3", "run_success": false, "status_runtime": "N/A", "memory": 0, "question_id": "2647", "elapsed_time": 11019, "compare_result": "111111111111111111111111111111100000000000000000000000000000000000000000000", "code_output": "", "std_output": "", "last_testcase": "[707929,37957,266117,186761,612511,238657,294461,627481,79393,100549,64793,718703,934121,240007,447569,997583,282377,95231,791663,882451,496511,428353,550997,605639,907471,221623,656063,658247,72019,842173,966209,198641,381631,608863,519107,71143,63659,704833,623303,851239,272341,480169,399913,939019,911231,475327,746873,901111,570403,75167,94397,593863,797309,315569,898147,515377,77969,431863,185789,503453,924757,716033,216743,369731,350423,116411,171529,739847,783721,107687,556261,339121,91813,513353,641437,218629,614417,276293,233969,183259,661459,32423,550181,241051,768563,133831,648199,79867,694087,42923,664273,200779,842351,131297,658417,553037,739931,98563,836747,319817,298343,669167,232549,459671,284591,319427,412771,642931,106087,94441,617119,484129,410687,33301,598189,273283,583733,647527,333107,93703,978157,118843,661343,293659,154181,890993,909071,446597,200401,513311,684419,230149,365257,90239,272477,741541,216289,740599,658123,609751,1381,741469,677167,882199,183487,232891,251561,366419,355127,268819,123049,457609,775919,171793,969809,881953,741509,903709,469321,56509,385081,614041,839563,366841,299113,406423,302759,658943,133583,619669,937331,230507,874271,284311,560531,66919,744137,84559,51907,706679,252017,532027,904861,235447,725749,292157,540367,738373,361973,791489,491737,71327,17401,94573,681971,162359,680299,381523,868121,115061,839957,528163,812939,992281,78157,532403,284191,639391,638719,628841,768629,986729,304561,269177,693523,231827,291721,911227,649283,662261,385537,497041,740671,512657,382847,986191,259619,407369,463313,531299,34703,383171,718051,776977,136573,363577,869339,962909,330857,657539,989803,579673,68683,371417,91463,19543,616597,885721,276011,878851,444623,435401,363439,291103,702067,126317,145931,27697,549257,154321,650291,109469,385783,112603,813601,377371,108107,961747,753001,153953,273521,426611,819493,702113,24709,680377,119183,143629,689599,91823,620461,767827,189479,267643,326687,566347,904483,709153,311659,731531,661237,458929,38431,529327,746899,671029,373963,974269,904789,384889,542533,858713,558113,974437,832399,842041,985007,79241,678401,75391,965087,516199,442109,131149,409063,453851,822329,53323,190807,371213,478631,776551,978457,364103,584599,530429,140443,184969,947743,5087,761183,622639,586493,297623,92177,661849,340429,508327,26879,925409,68279,873403,385153,403553,660349,423749,668407,709649,48337,773603,87251,728771,165083,473203,482971,968299,643949,73673,226637,39791,230767,46807,629609,706547,109159,286703,272003,42467,129917,229751,410257,937823,482683,120749,209837,184949,564307,405473,294731,28547,171029,431867,336317,262567,463031,230719,971899,752293,339589,715621,446983,866713,943273,908813,236771,767551,979159,533989,93337,758573,671893,501209,357883,631889,647161,438521,840331,432869,63149,593903,135589,617689,688867,909833,164839,617471,930337,435283,112397,647963,844601,680263,315967,685337,126733,377843,463649,707929,4229,478129,511909,732461,932779,940259,987797,603131,218279,27611,85021,392827,907073,118907,664459,840703,243917,652787,15581,584963,529819,102611,195413,147163,288751,913433,60757,185539,435847,228617,3637,475301,173977,323243,963701,582209,860779,710851,245411,849733,201167,704507,761897,999199,18869,764969,773273,30047,358681,728293,12043,626063,595117,80863,113173,461359,141221,44537,151651,777781,768347,636071,575579,420803,306503,502499,454991,352579,969239,714851,85147,181193,89653,869131,818887,936401,110587,957161,29327,225821,833747,424961,566723,214691,227459,633967,949649,487051,924617,389791,648719,436343,673073,500861,292717,857741,847163,700963,136043,25523,645599,926411,495713,453461,768571,51971,792277,996257,924031,441587,733697,433607,820441,603209,542693,503611,556981,356243,845219,867011,552001,946607,712199,540041,232381,882953,744661,348209,26953,430873,28057,765539,443153,304813,258031,135209,816077,996431,374741,96661,71699,41959,868111,976453,569137,143333,785167,147083,420551,233777,414061,489871,433847,317971,102077,44497,701497,461053,22769,337031,308927,57727,630523,815587,780179,691553,640853,566737,138407,939361,751297,992843,276467,226547,732971,473533,316699,326449,81919,875519,710683,876871,162527,590243,747521,419597,873571,506683,114067,150077,684647,718717,254659,231961,271409,338119,697387,708517,770579,260999,54371,312089,536447,432983,936587,20611,579883,349079,458719,261301,817321,63587,439567,79697,642557,409153,356077,121633,647909,92669,497719,853427,759617,681001,289063,743251,683807,605051,667861,298087,530609,196337,75011,946507,99397,446447,354581,263927,385471,702323,177743,16979,501121,145577,807731,206779,192229,920729,680417,15391,466283,94613,245789,396247,951791,537743,215737,386131,748633,503123,486589,560281,170579,81071,810319,622333,485059,548579,104021,728701,505601,279413,599023,906293,49123,546937,822821,145219,645979,453659,152819,246203,423791,425387,712717,534629,1723,341687,11617,928619,392807,433673,489803,557801,648997,871463,290233,542539,480047,122011,50777,572927,729569,619373,639007,167677,826151,373981,260753,623671,324689,761213,131321,72379,838631,833477,848213,95717,214177,866623,157669,821479,41897,291077,343769,205957,859223,915911,253987,289669,587053,134989,599387,727201,644549,762211,462557,696611,801791,879341,805153,558937,781069,579277,253763,689921,426193,721363,800557,99191,390113,559631,466649,68543,323149,147503,448879,857569,7309,475823,305521,343933,784583,828431,359987,228281,367541,922261,318793,664711,261983,654149,805073,407843,884423,930977,977057,269887,123169,134507,882253,414031,314569,410143,857027,194911,239087,224303,205759,257711,34487,5039,221807,905083,176369,169199,419,67943,240959,260539,599759,766067,402307,894329,938713,941669,524057,769987,676297,248797,217339,832757,160723,229703,811387,131477,724121,799471,793939,505117,376933,542293,885793,572059,181513,952669,762277,587863,435181,583169,629903,548543,927191,588743,220399,92041,414571,728687,794491,526763,850261,222403,884341,637543,833251,649573,340591,253633,908041,985921,786937,862909,36433,543671,776759,73477,845371,964981,70423,253823,391217,44683,364423,634519,725159,956341,848843,117991,266369,77867,513473,566719,310049,341141,825961,222367,471997,175081,419701,336929,540863,18013,617,765329,853667,188483,780389,914219,620437,112663,461693,375709,239017,647617,196831,380459,285599,105449,458039,623923,915157,836573,623261,102433,721597,893059,739301,954497,636241,691151,221603,795539,358159,562537,248593,205657,419183,889873,95189,831559,804613,862957,774791,752053,242171,328897,138241,214939,583447,666541,939773,649567,65063,96737,563809,776159,635363,367687,536311,955697,108709,357563,217121,909299,774833,95873,345133,465161,211349,429083,665123,306727,792637,74761,699733,143113,295429,870497,217559,157951,8311,988459,635989,430093,317197,435893,711041,546977,262651,440669,230959,466171,374729,447779,374359,134359,428177,420419,889631,292819,188303,869807,820093,259967,654221,498361,31849,110083,672883,517073,564197,961243,498527,55103,935699,461819,760567,55903,482371,767131,20749,320431,727451,56041,677387,667507,485941,892817,207563,439991,715063,305749,494783,88471,902053,528091,249439,813217,92269,164821,822739,918787,779003,398267,873659,604861,117889,383659,684379,971063,655601,728131,573757,532663,999611,52433,833719,785549,393989,182431,788419,550379,349121,745741,271501,474307,823183,886031,517589,750059,329083,654623,348949,834781,111049,684949,256337,369851,978511,723859,20261,755707,982493,940543,416281,625811,266633,497957,23687,992317,686339,993341,680989,732877,771499,218761,520213,52747,423779,143953,73727,654739,405997,778667,751787,300343,736039,394577,484769,960137,916973,12713,574597,874987,295517,355031,600961,252983,109609,470651,94351,187163,702329,278489,715289,967951,105971,851507,98899,681493,963629,737279,890821,217387,404489,895003,878011,406117,773603,141863,362051,471841,275299,523877,723031,540511,968437,981439,656221,493457,145391,147031,822067,922303,747223,74297,85571,252013,103867,76039,153877,873139,75721,168127,381323,92387,52177,678833,872237,767167,427421,824911,301177,842293,33773,540383,385013,37357,745141,624199,138107,642223,834523,705559,750829,422111,325517,80657,55871,366077,761153,100987,10831,649273,545239,100103,683687,818287,247553,45337,528053,907163,992857,667691,765257,688297,8563,894059,840451,590809,331871,432161,542131,831893,253423,60133,66431,301601,721733,872077,789961,459593,628811,669607,138581,75511,638767,845833,750419,220771,447439,143977,793621,642281,217489,516359,406177,662917,108127,825439,768199,19259,613469,490663,407993,346331,792229,948487,773779,913589,794137,165877,115499,383587,516539,465841,168211,364349,609253,209039,509837,44839,842519,517991,709409,737351,897709,152899,63727,108463,234161,823663,902789,352661,242731,245477,630677,79823,362293,371873,925997,632353,986819,504817,645713,333497,819499,125707,10399,116539,762871,379177,623591,305119,138461,522439,764111,27427,950227,671647,514747,682063,26693,952279,870329,669301,163117,320057,432343,439279,816113,278561,709799,965399,195457,692333,19373,224047,984119,717323,209381,898477,457979,808343,248719,138883,159871,580913,344567,75181,997247,916571,834059,16267,631817,594929,790063,666527,305101,781511,343193,169693,297169,899321,42677,269987,190243,949811,365039,838963,576889,566431,527159,16633,91867,315467,743591,339707,26189,406093,742891,526637,599629,222841,430741,163871,190829,272807,11527,861121,670577,840139,138797,662357,295847,593987,552113,795829,740951,794887,119297,122861,808579,360049,487507,235307,542371,93911,275389,154991,607667,346043,1567,567389,150041,12071,701593,356023,841307,48491,357989,179167,577831,597419,689761,232823,299027,58151,782231,471907,743221,886793,921749,641287,537679,195427,112481,79181,11321,39839,115849,139661,29399,711287,164701,897983,433351,825857,909529,789739,536513,361903,508577,420341,449227,400871,737263,81181,279029,50023,691183,77317,11251,816353,218717,378593,792821,135427,868271,459233,652609,569983,367049,680651,351803,58579,234863,504901,225263,129403,493733,12037,782149,472837,903143,173561,209233,121501,45869,109141,801569,668243,183577,98251,26267,551909,948019,340297,852463,177949,744451,701117,946091,372409,503621,218843,642457,366013,522919,206083,993397,153137,524231,706253,96263,759053,64123,535547,652991,116719,294277,429851,11933,7151,341269,675739,183377,873113,807371,550489,418009,591469,145661,921887,266867,788383,417419,515153,676009,694081,692513,955601,851569,660277,310727,314107,911039,170347,794201,630067,615679,389713,825527,599537,640967,749993,807203,793337,794327,199211,129581,142979,351097,283093,516911,338309,188801,405437,639679,108233,263063,51199,6827,289033,180287,471389,290033,765707,289171,847247,654257,153941,272549,849383,844771,448859,398339,212671,271429,393947,272201,282239,185959,263023,671851,368717,973631,175211,763123,866909,698021,7919,832801,134951,489493,653941,810737,92831,133493,49367,863641,624133,845237,708361,125303,822713,247693,47543,614147,160739,358301,195359,519521,797933,895079,636469,432589,590833,842407,84731,878987,745973,530333,840757,738403,809729,132667,756923,323359,81547,456767,85517,32569,99431,295787,459749,542923,576299,287437,538829,664661,519647,907213,386719,475679,694649,838069,418867,150107,927233,760891,254047,774119,594961,220513,757819,23671,357613,867653,50777,193859,845099,803449,306193,975691,750487,774733,538249,375059,602501,507103,703819,702349,208493,753947,443939,134207,55949,248267,890063,9467,60919,672079,419687,139361,247073,302227,931943,366467,625187,868331,580357,131129,735733,972197,867463,629743,767729,454777,495133,343829,784897,279127,660901,908221,254959,533189,255859,326609,497351,487387,641833,461407,108961,8089,140639,719203,544883,851471,175723,523669,488161,958543,962413,237619,761393,628799,784153,483389,85259,481997,631681,228593,305047,930991,97813,31253,6101,582971,22613,900869,536189,527851,268997,200003,950473,418939,99719,272093,28579,239233,771569,928157,63863,628049,847601,137321,811337,985951,399277,706523,380881,15439,598789,581149,423389,23669,70379,191669,383113,15619,420851,794477,222029,722153,617587,201497,423931,326153,92311,842203,692651,627667,746479,953443,337741,759179,513257,137537,182653,213029,659783,306139,848713,521789,495221,948317,195761,61613,912631,194527,902987,515917,960691,70991,125791,86539,642623,994991,808789,283181,206627,312451,421339,245747,2341,372311,138239,500501,875617,2797,507557,92767,590137,470593,433117,172351,89627,157051,674263,505663,535013,850781,551569,817723,697733,981067,463921,970421,80777,389287,116507,36683,457279,241691,246919,803849,898691,335719,5153,110359,368021,308641,503663,2677,199853,234499,121843,954097,902501,152909,537611,875183,928427,557093,339187,768793,544759,24859,818837,736927,813623,257863,939551,663037,811379,482423,364447,582961,195353,134171,388813,238841,467783,402037,542599,118709,230891,522191,54449,831373,422291,958289,170851,97301,972313,624443,223921,900917,265399,336307,622927,41893,28403,742981,70999,197063,16001,652999,872567,730973,594823,458197,528709,711701,677213,476633,491299,796619,679153,114269,503267,636137,406271,202733,970493,473647,605167,33023,494873,438517,453923,635249,601397,720151,348163,67567,790519,313933,805061,566441,16759,210853,904663,694207,91961,126421,54673,955777,126019,25793,75997,872017,798569,646403,121357,813383,531611,360223,845969,804889,712961,839441,290837,101537,157013,870577,394987,584099,661879,100523,932803,241867,253909,533713,423667,877117,587833,231709,304021,672869,610721,147919,516421,612407,103091,318203,501563,184043,139393,642149,654421,925081,377477,928799,74507,440311,411809,243101,450343,604313,574159,214663,682361,862487,54091,799921,191707,621083,805471,753547,484171,370613,617341,263869,833179,971939,122207,81349,12211,286243,438899,83773,877181,804493,364393,789491,415141,262657,773497,100049,561961,768431,72493,909409,347201,554969,908153,145193,71287,61991,948947,677953,84407,441877,186103,551219,509783,832253,40693,644977,55079,455681,112559,846437,605443,639599,35291,170293,764563,707543,46853,784411,641327,364499,374173,485959,353699,422083,943249,311737,127973,795023,163403,830017,61331,952481,976621,760619,274103,785923,193891,573007,231677,178571,324557,745343,324673,218069,996563,882367,765619,694277,88789,290057,414871,703243,77471,593081,862919,97687,294859,719681,742697,990293,813401,910627,471509,687083,14549,383923,908749,561947,575647,20369,861797,801551,836161,88771,170327,608369,20897,179981,517207,958973,620363,150847,399557,284093,715339,44987,240733,630701,450839,990043,211747,658079,667769,547387,989671,341743,519997,461309,729293,357109,145069,78877,744941,2927,974387,765497,40597,63617,38669,408263,796699,179581,9433,438913,688451,597497,181387,173087,96431,602087,575591,55631,448241,473419,578497,248879,894193,984307,346373,53773,135461,574051,184559,518747,154681,486053,331099,578701,300673,842627,705137,642739,305933,948349,740329,531229,107101,947833,591841,395377,489557,8161,263257,436993,285283,765461,745273,435307,823337,208591,686671,585023,463663,617537,672473,448139,173773,133673,77023,169369,607939,6229,966817,384619,38317,998909,416531,505073,488303,508513,156007,663539,230861,541129,918019,472067,371479,636719,27407,71353,342341,540101,354463,572599,96851,161047,396997,489673,214559,101483,669377,998969,480049,517919,986257,750119,58763,553433,784379,309223,241511,55501,323879,366869,286619,308621,839651,987929,758411,149579,369263,592429,980893,168197,776029,82219,481651,657089,195919,348919,95143,272183,577639,607417,135197,430571,88241,726601,530533,858223,979529,336983,647399,597803,691121,918857,974557,101141,856721,953237,184351,617791,692327,303617,452983,574261,517303,71719,248641,167021,457307,447067,71983,797201,948293,464999,115127,997327,50033,186107,286751,131701,386249,8737,122939,536017,42257,520073,162287,758363,343163,622103,10391,428551,164743,472907,355951,956113,310021,158341,940739,561839,76603,899177,217573,465947,781427,17203,258527,909973,626117,843841,875969,656129,59779,450649,3083,798097,142873,613181,105361,373657,64013,490463,142019,644869,150743,519923,648211,106963,123527,723553,857419,550859,199457,874543,128837,124213,139201,432727,26813,929843,268297,857287,118739,850121,818189,545791,154871,771427,815231,991883,940549,215447,981221,896369,376237,868937,793253,626443,977521,672317,441079,177091,166781,484577,102293,46523,452611,48647,725909,568193,398033,479903,947927,879667,596623,255137,571867,53993,560929,728561,185711,971561,292459,486223,259099,566551,788527,875269,821053,476887,884921,65371,475621,925523,360287,641419,110059,695881,973439,159193,495923,620531,843379,76159,35407,403901,43711,795329,504121,544097,33967,290489,409781,64301,530693,201499,321569,324517,274711,233327,904643,127037,5449,457057,154933,195389,332749,397589,68669,471593,105359,667631,765673,946697,18181,353641,189757,160243,731249,934079,186601,698261,783829,934067,45307,265987,34841,884293,906497,336503,324949,24329,265493,603553,199721,596941,995341,287887,910219,337097,575987,172217,791927,422749,515539,164789,505301,450473,306359,180799,573289,23971,859091,751217,113017,332881,213977,153191,625969,224603,634817,581773,49117,337669,789181,963841,67153,993703,790957,78179,389839,476233,747919,43649,295909,993323,366397,745529,954209,908459,634483,172987,508919,15877,149371,327511,602321,281381,632747,769081,347183,354301,100669,86297,667171,731681,978851,592337,320471,113161,12791,592451,340393,767293,170827,845137,142049,664421,155891,930689,626609,617873,563881,894431,331543,526853,428851,156733,38183,437401,446353,81097,706787,679111,773933,669311,32191,59053,648607,412277,118061,738421,466033,246689,216647,840661,777769,655927,762547,54193,455227,132661,803687,786251,949957,912287,676883,365419,157229,560159,29947,414053,525493,111317,977183,122953,765031,431693,541631,769799,491873,304501,87557,900139,54799,437509,766907,934763,183067,205883,164707,190793,828701,557057,253751,378353,623387,395657,774023,29221,512543,788761,296563,434479,658277,257783,800621,766937,547823,994811,342527,611939,258691,84047,299447,489989,246773,937459,445769,57829,566833,348287,329947,225961,392629,3001,26113,939997,83813,634871,697399,374047,718379,248257,349183,538823,991651,727247,41221,98929,566999,904219,720257,450227,979327,990961,616171,12421,114031,218857,602867,236111,783791,5653,76471,285709,770311,970813,262783,904997,456461,577331,552649,243233,905759,727261,309577,135131,23117,230369,419449,228913,850229,929333,128861,277813,185491,869779,431099,178127,496051,778777,532853,492757,551933,3779,792037,486509,941489,895823,67759,991957,198073,59273,376837,385859,576341,151169,83903,559777,317831,683129,17681,36263,256723,775037,578777,291647,159227,84389,812587,815533,581909,907583,231443,505823,313567,926389,252589,142151,278111,478913,968147,957499,496669,25171,806791,211403,66541,949243,136453,59617,672803,409891,126151,579539,869321,99787,713927,598687,154571,192173,883087,255589,731369,209647,390391,23071,989381,647891,498881,131797,161569,495559,893701,46229,409271,145283,633473,570043,514399,98473,41953,783793,104537,65053,339751,304099,928273,536773,980687,411167,211949,990259,799031,586609,542093,170641,804523,144539,320027,230107,368369,338581,423289,511703,152293,374039,229003,72823,187513,474163,854423,334759,307253,616367,989293,551281,838909,762001,624329,260951,90547,351397,733753,265007,623171,910421,859181,904637,551387,375527,37889,656291,363563,777433,114827,770611,319747,270937,280001,932947,331391,78583,367127,236323,981283,119057,176537,35437,720481,590383,965233,609233,50549,65699,880069,372833,671353,680353,647209,478069,873913,855277,333131,122167,595571,707261,150401,883409,31859,581137,988937,752287,450127,695743,533543,786349,956929,705533,738953,57149,215681,687829,147661,536699,241061,618929,516907,134867,9187,732239,222499,562967,646159,667229,110951,868943,902347,798751,233599,822223,130069,299029,594751,892777,273517,77893,961547,23893,928337,668747,111497,436811,160031,944777,677119,417187,754157,74929,759181,228301,485041,493607,324089,707027,278071,576727,739027,749773,17981,715301,749083,791969,935653,568163,962993,216317,292231,699379,781559,645571,934561,245131,992941,441169,274349,919591,313289,210359,913279,861439,328397,537787,322229,14561,768353,292517,718691,898327,804317,201743,485689,57943,209063,955709,492641,866519,723563,545473,840473,900217,38039,53507,163027,897671,681979,76387,864503,160751,470791,213131,761879,986767,385109,518311,478637,308423,263533,554209,23599,53881,89563,294887,143593,339679,361637,583753,779971,654011,947773,211643,715249,682489,288649,322319,868793,350453,392233,229081,561389,80789,572179,53611,42221,204587,16901,54581,89399,275987,917843,483229,809383,285377,880819,200731,836351,15193,801341,922667,822317,459113,789557,693757,439273,406573,910279,533857,208003,44123,321143,104551,590797,995663,479131,46723,241441,355753,670627,824147,567401,511039,834913,324889,184489,881833,459209,255743,594521,245909,827767,441403,68489,328921,350429,77563,593707,452269,952997,909917,462131,214243,93911,608393,645257,327917,487313,115571,918751,41611,259123,759223,499127,67391,20507,136189,339943,585341,415319,149971,26573,71917,497047,518509,594211,586723,183611,788479,92957,596573,379501,156577,324743,746023,419563,249133,284957,490921,263951,313571,57839,993107,189437,348731,845989,347041,451411,6451,867619,923603,350137,708937,195203,701383,982633,367789,33107,496703,906107,639689,797077,220447,267551,418871,659761,86017,162683,43499,965749,625663,190097,774997,911959,749011,502771,119611,670223,694367,490577,524071,837611,837533,508811,965507,465133,936451,62119,228511,700871,283,415957,492769,488633,619027,831301,350377,828349,858631,754279,463579,260489,463627,412253,995329,354877,114859,810659,183871,580693,426427,742213,226123,605117,920791,616141,73693,974803,285871,107077,823759,229561,631753,249103,537347,139439,918733,587417,159311,676147,40949,467813,26849,933047,433429,631061,282599,411101,245039,627787,38851,962131,378757,961871,728129,109423,40429,235699,599999,114167,483167,587731,282391,688531,859297,81331,418811,79333,843833,550241,25867,938857,799003,552127,991889,983347,507163,212923,809309,378533,886493,692161,978233,253901,710867,661439,9109,509737,639167,186397,183397,521281,135497,312701,419791,88069,29599,810239,12119,866053,938017,187373,783247,803669,423781,783421,8681,15551,974747,822517,634687,384701,585413,757201,415787,546467,700597,806111,21031,125063,37117,509867,779899,493231,82141,816887,688393,831539,787817,476647,125813,855901,174067,185971,852751,841457,710089,297359,77659,134581,599779,17923,647821,868123,718433,753859,931783,136327,794587,198929,890717,363659,346079,41281,576227,610867,20731,89107,579503,5407,935303,757181,236087,741491,398227,635317,677441,408553,904847,526423,847901,469747,746309,549121,664793,300691,607127,516877,793129,828379,798923,85087,843103,795233,250451,304457,78737,718807,175327,591317,278503,14321,316583,532951,784837,881393,781171,454079,561313,661939,638081,449263,971339,341423,705403,916291,556229,48497,784919,30557,975313,233279,413207,280223,94009,441251,75989,595709,46679,571877,217717,580631,873359,614693,660601,230807,449353,402527,64433,51829,204871,382541,373363,597349,834367,916033,524413,138053,691399,30937,484787,752603,154747,846233,141157,896123,624007,247613,585847,901399,320219,147853,610219,68863,761623,28541,865357,830827,374989,832157,860809,827443,427151,10181,101111,852323,67829,320923,398347,584081,590171,352333,746723,144773,423001,607043,180263,488381,443273,219223,325691,911749,226379,91957,189713,290869,508223,383219,556327,197423,226913,127079,772459,583621,188407,207169,942043,49807,124493,911969,780469,938681,630017,231779,982393,64849,726809,228461,988489,455123,219917,555857,90847,782669,797389,706003,186071,974143,500587,354037,128203,140983,499423,544517,968879,355057,111767,590077,968801,38393,378941,952979,375281,387089,423299,493133,989557,820657,230597,702529,916913,232571,732449,146519,504983,752303,452687,200699,162791,324301,882877,835817,330557,444739,481123,168851,305597,797561,266051,248827,598981,64403,977927,8429,164173,234467,683939,850049,304933,326497,814007,675559,203909,631013,419483,73471,562699,331277,107441,795007,306587,128461,888163,281249,880483,318407,231563,757709,996361,619139,921919,492659,800903,422249,796451,593767,68111,435349,987473,722479,633599,349801,820537,606961,760723,279571,746171,291367,195739,577559,418657,693619,22447,851273,766091,328651,756607,494927,175601,763649,408857,162601,167077,243437,1181,931883,422911,983173,134081,115153,585721,418357,934343,52543,28759,488207,116491,721621,571633,541991,39671,211507,848173,594637,647417,847283,916367,63079,90917,285613,747407,620911,641387,46099,367879,815831,900253,334661,750517,943769,362569,419693,530897,559849,270547,493931,754399,622513,671471,685471,649403,901643,32909,859601,726811,296981,842957,418031,850853,232709,516673,629861,455537,275357,17749,280339,723607,701009,8831,439063,265841,572827,933313,32297,70061,177929,994997,260213,997511,844523,961123,684869,108023,80557,681047,746363,318701,650563,712133,853949,5261,318179,465901,634853,479509,603731,749257,714361,883621,397633,313711,861703,505201,26701,677021,480383,756323,957031,121571,81671,853693,547681,224473,12527,205171,711223,868177,248309,780061,80191,950921,379721,348149,126097,891521,7331,141209,447677,214771,136471,411679,736721,576533,670597,568963,94597,935771,223103,223331,188719,186707,885041,17911,618031,547643,914117,739111,634757,202757,486991,636761,121711,95987,584917,505027,596291,21227,175447,582181,198529,461891,51383,297607,60913,617327,132439,895889,624509,502819,462073,877313,898663,396533,394063,778247,220879,262621,56737,673427,524387,995611,572521,933479,389023,604729,506903,959969,369293,541087,405893,548213,131839,569003,484229,427513,880871,578317,241049,765823,784327,741373,149021,22003,53887,652331,715817,227797,126943,500723,260791,521137,155663,23753,509797,6379,249881,252607,654127,341993,231631,540139,635333,125053,816091,272423,908807,674371,72647,832639,308519,187423,542447,271939,562271,291569,113437,111781,641909,635279,448667,757259,553253,788261,957241,881249,780719,39233,217003,32009,371719,942317,4327,126023,454453,885967,941263,960251,535193,741163,189613,564059,253733,187027,149497,357571,35069,58049,617053,631391,791099,31963,105563,203057,866123,499391,810209,176951,581227,354271,819773,439183,488717,574859,898889,207199,763787,445631,303803,45953,203023,409831,311123,287557,627329,248707,270307,89443,511793,107903,430193,463219,405553,20143,5233,439759,522827,935677,276767,623767,723467,385877,68227,798221,61687,848123,663823,218363,934607,8171,242279,350443,242479,742381,462577,976727,475457,448027,30697,556027,95131,400417,192757,945733,932609,818687,109943,737501,192383,684239,611137,625199,207269,49523,383633,720877,449879,950039,631187,365489,792223,553279,92297,282167,862067,166603,849427,400187,444151,389699,535487,349187,47581,271129,608659,700229,294169,691991,380461,416389,206303,31771,327193,251639,13313,361279,110777,515861,894449,861857,499801,34897,902141,127807,971419,177953,226487,517639,770863,886867,919427,344483,192587,516973,563263,168037,402023,390737,154291,995593,104869,234979,761681,123407,18119,576001,246241,259531,342647,380977,434111,10459,660167,722669,916411,797611,707911,309583,807871,857743,350179,206477,196159,999563,245897,916417,463297,930569,978689,72907,392761,326203,735901,152681,964861,564713,561797,362749,517733,821803,863743,137251,41467,836701,968501,298943,756373,422369,719959,976177,712819,687949,990397,358103,398969,404693,329629,434117,612841,959351,163853,687121,245291,32381,333647,520889,219467,794383,433003,291899,468019,229589,734759,147793,517277,560243,750719,253417,270799,397673,248701,371339,439303,739957,831431,469009,540689,482021,613153,234103,285827,3373,157733,108883,504181,119659,413879,936401,405407,312839,658279,644653,217001,184031,187129,899051,758819,871657,891577,64081,813097,633571,938233,604433,691147,150797,301183,451279,278501,634901,380837,90271,667817,672493,902089,325697,228233,947299,984497,461297,338339,173531,991931,622337,144073,349759,350771,604031,259411,162413,431911,708011,612751,841661,965227,599003,283007,666697,234799,53281,173023,189421,941653,926671,224491,385597,602137,236783,418199,83833,457517,664589,72461,644377,229637,159779,196139,453209,486949,779159,368293,391627,874807,309037,624479,92503,264731,246613,940127,224909,355937,599341,153641,448727,556321,13099,706921,989533,281933,38453,998927,943153,154753,458747,178639,975017,423977,624997,327967,720661,45767,4523,185593,223549,565319,664441,267791,267341,494539,161563,81199,862261,554303,534943,227189,854587,480101,676703,317783,912871,681011,55339,34721,930847,443543,876581,610501,172097,852851,12923,151201,938437,918347,643121,389381,290473,706709,235877,288361,372523,217027,10193,609979,535229,190783,145897,426401,501409,170767,155773,890999,681409,825739,808097,96821,688087,359419,161339,491371,289843,27701,449,658211,670399,418771,367889,846667,263957,238423,458483,111143,763391,864613,951151,936469,772003,743209,707627,302941,709817,108211,511013,161459,351217,595159,825611,468577,388373,416629,764903,530807,715157,506347,959927,477847,647771,324983,176977,221071,595093,341311,551179,247811,994709,951407,710257,96013,486329,800677,266159,862259,470161,319097,216107,245591,819913,981587,505709,293863,396887,20719,768461,754037,132103,366881,842323,697937,552341,442879,883969,307481,658751,221303,833453,766277,557269,285023,105269,412303,29021,795449,512531,141689,817549,164443,670249,86573,981419,197347,814067,627799,842623,817127,376291,169789,310333,874103,487381,578441,640669,348097,534661,211741,425441,334667,115211,888319,612011,152311,825733,447983,626921,434689,654293,122099,320483,196523,112687,45587,781051,546587,835469,617473,590609,700027,97729,475283,202381,505613,631847,578789,671189,362309,401347,203789,967501,533213,767381,521671,131447,140071,126107,547747,360317,102859,654191,893041,332921,513767,254833,169093,58111,17477,288247,155327,893881,637447,486323,235111,691193,632773,254413,830173,308093,654541,133097,577193,424709,500233,6917,546683,855059,291677,187003,660251,426197,941557,107717,983771,968537,745727,27541,711019,102197,135559,186583,570781,72337,389479,778507,127711,666277,690367,19403,418381,289103,353687,369997,216761,620033,790589,644089,393487,593141,50651,878443,275773,144253,977861,225143,610957,572629,597671,469219,597853,542183,221411,504337,963973,549979,138371,713941,261451,313949,378667,404497,112339,862343,897571,586951,222109,572843,277897,293717,518699,999863,259691,865661,74287,407699,993997,771971,114199,96769,137477,991873,861947,726137,653621,527741,7369,696719,565177,680861,504011,879707,952859,709871,61637,960031,602489,186727,759547,241141,142369,133633,142607,482803,983299,515687,539113,929083,323251,685271,507401,7213,939469,34649,644153,964153,208721,133349,827987,276671,41203,663857,322901,538297,751277,538801,502781,897263,273289,362419,984037,31883,603937,457213,208409,632327,67211,115777,871531,532601,827633,975263,76283,494237,578167,613049,152083,980773,127481,944609,104711,53731,103567,811147,942313,529033,919951,586667,983153,495851,51659,898439,584587,25819,633427,588037,232741,738173,456037,671581,458651,181283,436087,867773,439511,867001,411739,281549,400523,579119,149531,246971,147401,352489,496229,287501,47,524119,971521,979567,405667,172181,173669,182773,107057,530659,162713,559907,113159,540061,405991,933217,454303,603907,180797,95801,719143,432121,937927,736511,436963,482437,269953,89273,841283,146617,203341,338909,494903,434383,497899,937031,516361,896347,439811,21211,22031,147743,956513,148793,503351,224563,440393,95443,650813,472741,302873,116849,875731,144061,12721,931873,445537,501031,465929,508643,307267,234281,969911,720283,452957,697703,319541,110573,710837,400321,608011,622603,365213,438001,88129,960059,224197,761773,999749,444487,973373,512047,225721,341963,601021,779657,56813,10501,193463,90353,675781,507149,867151,941989,537637,616153,970789,129719,589207,665053,460973,146381,685541,318271,468973,866399,203579,789977,689383,392281,343141,380147,324497,637817,141023,604859,126323,871513,29063,113327,916649,829561,524497,130343,713357,244877,104053,441697,535967,311027,599899,166189,989581,668929,388693,439787,663587,146239,853823,338959,831899,611483,330859,352237,528799,312517,470461,20399,37549,73859,573341,985151,1163,732299,126739,197207,415949,577351,567013,597761,383107,60889,564701,90511,308857,403607,96827,70867,938827,844621,633337,969743,556931,816899,476849,790277,76079,664687,1229,752513,802583,309433,862811,788213,467671,275729,901249,380641,486671,473219,317587,821663,962417,327689,236641,411709,182587,46817,296221,365527,643213,335681,850303,180463,426889,735067,46933,788993,97397,62701,258971,352543,56003,837071,297881,627091,655033,919351,622277,572801,269779,936223,169151,441257,245561,11923,570991,21569,880421,357079,927961,269981,924523,367819,9473,705259,748039,523729,650519,154373,277003,586631,260363,7607,917251,519119,929557,309109,512741,876191,912349,120167,136247,193601,450277,541447,871639,912521,687581,838441,379723,519089,745231,150221,799657,99793,790021,681899,259219,513697,553193,84053,16547,295601,88903,468869,30211,86249,214009,707653,312743,232003,175873,562409,182867,339257,589471,135389,884167,511669,675841,63647,697303,992249,29453,22973,708137,474629,369319,336857,444271,167971,282881,257989,348401,830233,305267,456151,95089,785269,337853,245513,550661,286061,783599,199483,540877,840289,808919,427883,10369,582691,80107,949789,38149,488003,32999,438223,100151,56957,811193,443533,304153,590741,286711,201451,184957,170197,184291,773117,513137,552091,303119,522881,384247,781283,666889,102217,6841,274831,326773,229519,797057,938023,830111,150901,22093,659231,868051,708221,810427,1433,446657,280957,775517,174407,507313,696889,154097,930071,722467,296557,723967,953333,228049,905959,974147,968729,932177,571231,466183,86561,716279,297893,649361,816239,393541,466091,886993,881173,467833,658633,228929,816971,806783,989419,958669,540517,946123,393847,676421,756629,432557,907183,629011,152077,196561,353629,192497,856147,455033,390107,954763,881327,212981,528707,316567,261563,236339,483953,765353,994069,654089,251291,245521,361943,708119,580691,82483,85523,19,688907,881171,906649,861743,896447,270619,842077,490631,32797,377593,318007,426541,807809,137363,307609,481141,749701,518389,223099,693743,56929,801337,821143,879581,436013,746227,57349,94421,644327,462361,710261,711023,94063,875983,42407,98491,613177,882907,30133,560689,188653,51407,315851,922087,238859,420521,890317,803819,925579,111919,274301,19333,897157,750667,520291,625343,661417,256219,172603,148483,138403,276091,282589,409043,115067,951299,118249,512467,523333,223051,992549,129097,339799,209597,717581,990851,794009,110269,969637,3911,66923,442319,309899,957563,97453,208253,847129,393929,417227,121081,810671,360827,855269,425533,741493,83933,78929,83423,416497,43201,107599,832889,519947,6197,520957,955607,405011,379283,191047,907811,487561,952813,460063,115151,486977,930859,787333,265403,858931,321427,702179,975439,546781,213461,999169,780823,189307,21169,477163,448741,111109,803207,108949,941509,760807,438671,204371,814493,604001,381019,805867,517549,636023,898199,422879,177013,474583,889769,874889,28909,544879,902963,71597,388319,763967,511163,956881,401329,326593,409733,249089,250753,431803,217739,699697,206299,75541,992591,26903,790331,47807,38557,755393,461239,676727,23557,101611,409007,499349,409813,757067,847103,315481,456791,203117,809903,403439,487427,127219,352883,893917,581491,472421,216577,581071,455831,687809,114113,24527,121469,495119,11549,831911,171043,265037,445583,147547,205433,652279,521903,120563,873209,808019,529979,954007,115603,712883,211723,969359,16349,110597,950933,821411,965317,8689,106859,889501,495611,273569,403363,887233,598501,16421,680873,220279,222493,348989,469969,872563,10993,62971,654167,934669,810377,262303,178951,60611,116387,994913,895901,460589,742409,65609,534647,917771,34267,229693,682789,300749,530197,196307,974293,401311,376709,639091,81971,678731,821063,798397,915143,650701,669649,696077,463717,639307,822407,40847,598489,772921,887569,643421,570959,713149,451337,197927,370661,137653,336653,238031,705827,500057,176509,243031,712169,144583,120551,384317,868487,565207,128669,166157,505867,934721,552053,868799,998287,513977,296713,563021,298687,510247,605809,221497,990289,549221,624331,635977,247339,111637,42863,955061,659713,855721,656939,102337,753139,685907,303293,947423,924659,283489,279679,211193,557087,267719,24197,938219,330943,908419,917573,188249,816559,355643,188017,126653,449609,989441,732863,875209,368227,12239,447133,787981,116579,169307,486757,932333,87211,485371,989929,236449,410783,177467,173137,93329,186187,847969,170351,912539,380533,676597,538303,804611,442327,452191,839837,448379,949621,277883,499519,918089,909343,608653,777167,994393,680749,31183,356749,467657,998623,878099,579893,430883,446759,521923,544021,876529,23011,218819,113783,113153,965147,77929,651647,604369,469993,777857,505283,301463,874847,940201,436979,156139,941093,832339,854807,663163,852191,949019,196993,645179,24659,826849,832123,116141,41143,155047,369827,844999,410171,891749,273901,769423,7639,945883,8353,184211,49393,943357,120079,582157,187633,146681,852139,847169,579563,836623,199151,227519,284003,302171,87317,794779,88607,178603,201557,282487,925741,558541,673247,785963,467977,865313,625507,452009,375443,187123,772847,598729,340183,807949,715739,150209,28027,331301,1889,626033,319483,97001,833201,613427,44771,533459,291691,133717,903269,196003,700781,22307,633013,227671,579869,756919,247241,727409,300973,723293,104971,188707,639959,644197,854263,672901,344917,689459,570047,777353,793327,325673,965611,661091,537037,82699,775531,907481,939349,570389,396107,948173,337339,151049,335689,628477,526909,402691,302329,141653,516233,243829,793439,117413,255049,809741,325709,650933,582973,59387,237911,172871,31469,520549,797051,617467,122251,56909,384737,259151,64633,995909,221587,850063,860929,619159,848599,281291,245417,214433,157513,282089,819001,20593,661777,270833,771299,123833,399079,187367,785777,483709,293173,496339,307939,941221,350191,925087,218003,272011,82531,165833,763067,792377,532183,82037,464983,850973,403591,902449,75773,396079,166409,340211,798067,29753,978277,136303,53101,624047,360953,526997,909037,271499,590437,944387,746791,351457,724079,863153,758633,78803,961069,823351,786983,235013,428083,128213,151253,965953,502217,344681,584971,405143,149563,985487,563933,831683,193451,795343,18541,325889,566851,59921,676007,597407,378893,156601,792443,569813,417737,743377,885733,602513,231479,335459,19777,612133,954377,81899,891223,961099,137771,90703,9811,77587,977369,680189,785093,460373,636547,36739,618173,966923,712927,203953,395749,503501,510031,914477,405341,395429,516623,530773,682811,474137,115987,16057,12689,27901,450727,684007,483883,8233,108139,74411,931727,27817,496609,718427,258329,826811,321289,395851,342821,699793,752821,901841,684221,718381,417457,874537,834593,645131,427787,329059,328421,714223,726707,821497,300347,871993,553919,263423,681451,16741,513683,744083,506459,306541,20117,852589,986981,700627,377393,771553,403001,387371,238691,409289,41543,686197,372223,829967,305581,277703,159793,341659,38747,614701,622241,42397,582067,673921,69557,701357,270593,7187,949129,689621,748133,903919,682427,385519,257627,230309,374093,758029,282143,597239,873293,431267,295837,986333,753437,530843,592919,788863,309937,715019,723413,538799,312757,968267,554797,610553,775507,527803,901133,184879,983329,968909,344173,119627,402379,295871,9397,783259,232081,420779,820411,844127,192743,248543,564643,950507,556823,953111,598363,459031,649769,665069,405001,639757,192883,148091,59957,108877,700211,104659,679603,560023,325463,521309,918581,49253,88547,650609,263737,313129,375029,230089,4691,451933,133387,883921,239171,447829,424727,859853,973001,956429,160231,259537,468557,387203,265427,500393,373459,752299,9059,516323,219977,50821,786859,385403,955951,190639,906601,255239,75979,832159,157037,888761,299179,24677,299329,377173,429409,425417,790087,623023,313219,357727,843449,597049,865003,54521,74731,960889,73643,289937,119747,612173,445363,35363,394729,90803,333227,765881,90527,410659,859987,522469,364027,492551,25373,532733,166151,43991,975181,186041,862607,129671,630451,519427,15319,332767,698641,378361,14627,912463,946079,548957,117979,541547,7793,555277,550811,89329,455393,147557,725891,931267,335381,649457,410401,406183,351391,415271,665507,410387,861977,647951,586603,158563,96293,256163,723829,522719,547453,169649,854527,952583,309571,891743,179779,5009,476759,339653,615887,33769,979717,324199,657187,277301,746939,813559,997681,668303,590399,885589,865637,262583,735529,124231,349039,290761,444113,351383,990137,491951,528779,122021,983443,30869,397373,426871,493211,892603,316037,175781,127541,154229,254791,632843,187073,481043,875447,211811,404309,129853,813511,75787,18743,156539,327707,565171,201709,193573,29581,205399,425329,157081,336029,796409,33889,626539,130987,740171,424397,801707,189913,26321,286513,857069,302273,275207,130307,986533,121531,179441,419141,807383,103591,9227,777589,590819,525727,170189,439903,561529,768631,23497,706039,37633,130523,465169,746903,813301,348463,974969,221311,973253,678463,778163,715031,820723,564937,598967,454709,638117,281989,958051,667021,325747,682439,726007,460793,154127,475639,53591,355609,683567,390097,123737,752911,587201,809443,442571,139943,757151,491149,12101,453559,778717,368539,713059,348643,210499,481433,16787,763771,34231,432073,362291,599869,769903,282973,785803,540391,56873,562997,91631,883241,999931,97169,301927,388259,27431,535751,584417,5309,830887,491137,823481,409823,362363,443603,821857,68567,688661,752351,808187,688357,111271,939713,899477,180779,857321,121621,49069,780601,867733,500317,791993,101117,250583,780583,924719,634841,282241,556477,254699,125687,424577,163771,89003,290963,389761,830279,376183,349373,273797,451051,967583,552481,329257,796373,971153,94151,538567,30727,452597,731209,915041,517577,106373,585857,915919,957097,335449,712889,553471,167621,558287,284747,139939,676469,370021,502973,574219,133379,744019,511177,36913,474337,17957,380869,967111,294869,417953,395069,574801,27617,860971,14851,491279,12373,984959,790093,90053,518123,32687,759037,858301,210631,913337,608693,345487,110921,993589,95731,325861,954391,567751,154409,363523,880981,585199,442033,133069,708599,61843,428693,506647,602411,57713,360823,691891,987097,545063,103669,738391,906839,188261,89189,66373,34843,376171,271703,995567,605609,221797,229171,188767,20249,877267,5581,565979,523093,112241,816839,98639,920333,443437,579107,188401,1571,714139,504289,313,598891,67307,505669,575429,241781,412637,160313,465551,510889,754373,983579,527633,470167,631229,947719,731183,606313,739087,502807,818509,348323,864251,278041,435641,153281,948877,334777,672521,410801,133543,907031,751027,355109,37189,160009,131777,758237,26251,157793,245339,383521,837887,381817,28099,399131,207551,51599,514453,9781,581729,984421,389579,611833,620297,679363,649843,701047,900671,944899,737657,949043,290039,282157,963019,124771,72277,142697,446123,762583,530713,752413,867443,836753,254389,514499,20959,992429,330767,690127,843779,286813,236407,582419,480881,471467,76919,835937,588881,91183,353807,492421,267901,681631,622607,647839,480937,438701,906473,8623,809143,431857,950813,480427,895471,762053,25321,12413,432227,935903,776819,904693,897607,476279,345463,173699,687977,530539,336239,766609,475693,311807,712319,45281,583619,694867,192631,247957,127453,337999,664061,718661,28283,209917,132403,917689,906881,633991,248179,668851,253133,17159,414899,671257,376003,683377,783533,88379,806503,161411,164447,6271,358993,292849,474443,526913,556289,309121,594551,830833,373171,5651,844709,822743,835421,297509,178621,909047,753679,173861,801677,100853,840743,247069,34351,511477,689467,34303,445199,774797,246209,861013,457099,857959,182921,525937,330149,688741,795581,788321,947851,141277,671161,987299,991733,11701,722737,285451,341603,816763,312101,158581,508349,980677,390289,50767,872747,91309,657431,993407,912581,578117,236807,637139,812597,84869,634531,657983,283979,957337,416503,957953,962807,602453,783317,19427,686879,590839,90931,463207,704269,86263,993103,349007,95651,529259,308153,116531,73943,660599,112921,652361,446909,142601,651097,164911,355193,708497,334549,443059,799313,211177,134437,914237,282847,784219,75553,28001,158047,959473,726533,422077,984859,959809,267523,151339,443263,828127,239521,423803,547999,133709,210319,826717,91873,712357,580633,751463,971851,976489,75577,687839,252817,587021,612317,757331,441703,369877,389923,370213,550267,922069,428801,182261,392159,700759,50441,113171,383393,656923,9281,629023,430343,213491,906613,872159,179173,275573,906403,97463,111443,903677,79687,425861,53401,281777,712507,830099,72767,788999,611887,312551,386549,821089,876653,651143,231107,556441,169753,266081,219437,874109,537023,951061,907567,986933,753091,768479,726589,150439,981011,927841,24847,16651,817331,261757,366227,750553,55691,977629,527507,422311,743321,18899,800801,867401,615343,769687,165673,759401,379777,10069,244589,339103,879493,761561,483233,404557,489851,901423,626623,640229,485029,165317,524309,160033,529871,28517,897751,951089,292709,952657,207409,449303,150767,916621,570221,685513,759113,613447,694391,943009,417821,107641,152419,456241,719419,674677,579263,844289,403301,99487,664319,207293,74353,346217,163307,818327,72901,505139,690689,749779,813811,504197,965467,969869,519787,730253,127691,950837,177979,280939,303139,752503,768613,740711,402511,446753,51721,802357,528329,703013,297233,524243,659137,281357,125383,63521,778333,567991,943031,735719,882067,195277,715823,878929,982843,162293,257591,871687,272299,634807,91367,353021,25763,332851,21493,793957,101323,3229,818621,261077,156041,440101,98017,242603,920219,626341,680387,399151,908879,130633,309769,379397,134857,539303,362381,498259,20549,781387,40277,331319,324329,527591,426077,416623,395089,923347,124277,280069,438877,136163,668527,783647,539339,56531,557567,539663,559841,935537,556841,385261,918793,308939,893093,782147,502687,608131,416887,293603,60457,247651,139033,787537,89269,998329,270133,248851,969083,375647,477769,428473,725041,987851,50971,830339,301583,65789,75193,97931,943301,46861,365089,122867,225503,367201,476513,980137,571873,270563,337291,838751,3847,959323,124693,248351,802777,844187,898787,407879,821911,816779,726611,382589,139397,754891,454921,469153,231547,925949,726559,615497,320239,358999,788387,885769,343423,578609,350029,223273,392069,673573,565549,425197,226199,379451,693601,407059,12743,482897,516223,914629,347227,233693,734411,215123,858083,848101,563501,879089,212669,151379,58169,99611,572609,42649,256661,199321,434719,236297,609571,212593,730447,347509,451691,205339,18433,341357,372121,823399,699059,190901,935393,172321,862553,995713,994337,220243,735169,981949,581293,665201,394357,25561,1301,143111,527843,824269,661883,335347,788659,771209,712493,820643,79187,5507,848593,505111,526777,499819,658453,351047,111829,575441,729637,173917,767203,935531,974867,70981,721739,330383,139339,145349,828007,707813,568069,778699,890797,45833,726527,665303,909577,698311,299617,457903,695491,642533,248033,392599,471769,464171,273857,318503,146989,296183,365159,386471,798101,686177,11287,415447,187597,296509,17863,518327,108761,180949,208889,123031,57283,969671,631667,102497,79433,678599,607147,682673,440441,161281,167191,538649,70099,905497,128311,529241,484153,893429,566963,105683,703537,982273,737593,506689,995513,617359,343771,227251,140717,660923,41017,182617,862997,880423,654701,349387,67531,686773,696323,419623,741869,742333,45341,86201,670049,79493,539881,95401,16451,245129,109169,465587,750641,433241,145643,886591,918679,393103,877543,92657,844253,465173,299807,771439,149027,478039,441281,644383,426787,859381,345937,163487,70753,630607,605789,36847,657653,117917,229583,937,169249,269219,201139,963731,781817,13297,280811,122041,672181,130199,320141,789623,55049,771289,917173,708943,422893,10163,260671,822007,742999,774863,245627,704111,549569,949673,245209,551581,446333,294991,698417,318601,834991,341477,768169,209317,601451,85607,377231,693421,952559,765151,606323,327209,821879,255973,856831,298513,677,498931,189251,185923,284917,352463,997369,399173,354533,82939,90499,916679,29383,24247,41333,814799,532267,637421,395431,498791,188791,701159,683047,749711,893489,166099,386537,906923,920357,166297,659279,234511,91099,672323,35327,482501,719723,133711,884669,756043,645367,258847,445427,878107,972221,548893,148139,625351,513937,514867,45121,293311,122693,999953,255989,37003,442823,151423,598093,162499,967321,336727,322523,287851,117773,568493,686027,88813,818561,223129,578503,234259,511559,424549,282697,452027,415391,862061,987101,127679,988417,628427,487457,917993,547577,36523,403267,201953,104233,127289,722933,672293,48787,925217,289603,527581,321911,463823,92003,435397,52721,201211,991541,858397,497999,379013,165569,195677,304013,386143,747287,618593,324419,430279,390199,360989,660299,177211,589021,5851,225499,85847,280607,201247,695099,57781,132263,546149,674603,840547,364937,950557,100363,934543,880961,281887,775627,365513,816121,12907,300427,715801,128509,25799,555301,205019,236729,612349,631723,96907,127217,991531,869899,470663,117763,256967,250123,71039,656483,446293,754427,917887,320911,234007,431729,415111,860533,193513,574703,204557,263323,518533,941503,478963,72497,131171,76847,561251,701863,786553,472349,48947,274361,31081,130693,132001,88117,203461,163129,371321,270913,84701,333269,39631,261641,115309,123203,246097,986411,17333,338197,279779,227537,708667,894203,309931,12281,690491,372797,293639,412903,809407,57047,37537,545117,959597,102701,882461,645023,328519,355099,335131,367273,5209,989999,809201,991603,843883,539711,999763,976271,132499,244639,319591,774149,186671,130649,696343,709663,209623,411923,919111,431021,928547,803893,843539,572461,495071,911063,720007,11783,825067,521537,736399,842063,449821,497557,432833,313879,441041,824699,898717,183191,857539,936709,479561,45827,657403,443777,140779,29863,825709,853387,140759,3709,657947,692297,22259,320449,122663,613099,778759,492587,946021,803623,259277,851251,885607,662339,617879,527377,450563,303859,858259,434873,155413,711463,62929,665983,933613,201881,124633,446473,679699,38671,841697,223507,605237,55313,808981,236707,857903,292133,116731,728723,620933,292393,467081,961739,934693,317923,117331,778763,348637,971723,827473,793979,945589,436651,742201,598537,899719,633307,86239,411707,23027,104369,257311,500119,109937,990529,606449,257837,679607,264323,660509,478321,574439,441607,702101,166613,378379,845909,529183,82633,440903,77047,318629,12979,359767,916733,926087,389981,375569,316801,636277,360649,868613,793123,425501,785287,389167,238709,644563,382267,245471,721661,772949,109507,796933,992179,456949,262681,77569,365611,180391,939287,574489,740923,811651,384961,206551,747737,381637,40879,531043,125509,138959,241249,122389,402817,233477,654047,70177,870283,323371,282713,942569,178531,431,13009,187909,970469,456023,953671,487757,423601,178447,637001,742193,46199,259397,499969,786223,157007,377809,35267,984349,14197,429679,44623,535727,670261,837943,348617,275339,56209,957403,553789,148891,546071,891251,214891,189151,16477,783379,772333,313333,941609,501299,596779,604319,381541,482539,225341,178039,284651,423091,516293,793853,729173,383099,202981,692239,933671,358279,84163,736871,657127,828169,696373,444463,881017,231299,285977,498689,676211,990893,604249,374879,662443,98981,429673,317489,596341,617191,845893,6763,887903,445507,564229,386149,407233,241973,478259,312413,818011,237163,485101,961567,282679,181063,109583,870929,533089,246707,361511,727613,372313,205967,186763,780803,640933,637283,91757,743849,413849,1297,792691,766763,710449,69677,32233,9007,644057,583511,814447,605707,499481,629417,969559,784097,340649,980801,186889,427181,55381,18503,487093,241037,482099,400087,727079,913421,17299,174049,27631,108161,685019,971479,642853,986759,569831,650759,393859,287159,293123,654803,36857,369079,380557,872479,131059,748379,598379,630023,469919,858497,436549,40507,356887,915223,433421,648731,97379,25253,784117,93053,41399,630863,582299,129461,530603,910457,991643,158231,965533,446603,345511,692647,601889,849931,667127,51817,717551,503381,432143,594959,555487,586909,499183,641897,106213,105199,607921,212827,515237,40813,607843,620827,4421,240701,459467,34589,247601,787747,777421,740461,443689,507113,180137,856213,64853,7027,284149,606091,264559,504619,438611,905291,393611,804043,919381,373757,824017,458173,938099,176489,33013,452873,906329,431441,252541,802183,34213,500891,661603,682547,976147,876569,215851,975797,262151,150611,51059,846953,57383,452671,11311,522787,482407,766939,648079,529681,585391,995783,199261,966113,74609,203209,20323,96199,3907,646181,148861,583801,4261,11657,183119,185621,392209,353329,819619,43117,255523,151477,726911,8741,43261,780499,930437,652567,124303,145549,758393,112657,93719,434927,944467,354253,2683,539321,196927,79283,29027,101987,856057,754577,788317,80341,877,775777,530731,943139,848591,830561,754463,48131,804893,855229,891049,465581,808217,712279,929161,383527,451621,127493,750943,742283,986213,321311,541529,124199,628699,897103,687523,45433,232433,732041,463889,948551,659371,362237,604559,437881,740237,221087,54287,825059,241793,43913,366287,895039,995023,599303,971051,468527,419999,94169,885923,544139,898819,709349,386299,98369,778663,9173,171077,792359,10337,533719,124001,566161,915049,961927,304609,265471,284159,106727,70003,268937,354257,557449,765439,512059,804449,677531,892387,972263,362753,51827,372817,830143,568201,958439,225839,577531,222361,218479,768059,313679,493979,197831,410519,523903,991,638431,211061,31847,635207,845983,202679,292093,544601,221677,367673,241343,522289,903311,27779,966547,352073,62563,942091,148381,581743,105863,851393,655229,377329,17293,565909,851197,130547,847537,668141,913573,584447,226087,947171,403951,432097,304391,676051,416989,25873,866231,810553,648029,728261,881147,79621,834527,612113,823651,119557,887921,498163,490313,188197,848611,65101,66809,198109,243343,806453,43321,971263,764521,87623,615971,200341,644261,855079,145037,539351,610879,335897,875033,438707,47251,868039,502277,40763,921737,21881,344177,785809,15467,256873,64937,489679,453317,22303,589873,863867,157351,926899,925097,616783,983441,892169,296027,785579,963863,956003,312643,294167,854129,140381,358829,405487,619189,781217,276337,527563,183823,555829,727877,353627,644747,671233,764977,871147,567947,935621,801503,475759,500363,979273,670991,837797,852199,864029,646259,106721,65983,408719,255977,415861,830981,982571,354317,679373,39679,826349,289841,854257,40823,290119,900593,892189,985097,11383,79999,878191,603641,609997,84913,76963,868561,393143,690059,407791,90997,667531,316051,747493,2689,697087,764017,45317,936731,16067,698083,151163,21481,299197,53129,783119,41603,252163,223259,569461,494743,923617,609821,809869,614177,454541,238417,339239,244781,22229,320843,693409,300137,183349,813277,521119,363161,488723,693167,177839,569431,371869,552059,184829,426421,497597,39821,317077,1867,436621,290107,950953,347771,469631,997973,543997,680441,704279,351437,163249,191969,95929,906383,326309,375247,871393,175333,578299,614183,980081,236143,699511,23431,568153,674501,678229,845347,208111,444937,2843,22283,27043,969343,404021,336463,421741,23813,428047,511463,790291,547513,135211,271261,868313,264007,528289,416399,266411,369407,502121,986497,170711,613189,387727,149,968503,79589,603529,476719,139747,418597,158597,488407,979651,525247,343799,417337,912397,996049,643187,964969,721177,296683,716929,448351,575251,66083,857009,154799,350593,765659,969877,34019,409579,915203,335747,568577,949381,416011,855143,850753,305033,534307,45841,406481,489299,190787,94693,608519,384611,570113,934399,38237,65731,115321,952247,57731,683381,724553,513427,658997,809087,105983,589481,555109,771691,629819,738547,909863,746989,281971,113383,409471,567529,363199,451921,630169,595951,943799,133183,491851,277643,656519,833713,474911,299743,893509,953497,934909,684799,57457,150151,185957,380207,366923,70019,835951,117989,256801,827693,363269,470837,586679,732911,619273,975509,485701,119633,373453,135329,421501,541141,502321,355573,545827,616463,399023,968917,943777,133117,63281,430411,410093,666301,584737,257987,396541,959093,276229,283601,414703,669763,9787,897443,250963,726521,43487,481693,74357,205211,725009,275027,522757,198959,570827,481847,959227,860843,101833,794557,235541,736159,784859,717091,910199,438143,570839,933781,586147,497303,944329,661513,455933,268547,39103,314813,824821,157813,773693,724111,478843,976559,740737,112279,457403,819289,488909,28277,255383,195023,107453,429139,4391,652283,573101,595411,508229,857851,840761,123457,88321,199411,277177,558583,24181,513943,159617,704567,940019,800537,360509,478589,549403,333769,891287,364961,374069,628801,356039,328481,530063,1699,664633,82787,283687,31393,420857,498391,452533,617369,126631,199193,914429,458047,143827,588437,121591,33317,307693,723391,199873,574061,587827,780961,44657,62129,619621,8807,851153,257689,316193,540619,665993,907727,429817,392911,172313,867623,400441,341777,5479,100829,874193,791411,928457,873317,728003,431147,233251,656147,152519,317371,71059,845027,130447,197077,985463,380503,96779,5189,204803,322519,908771,675463,507827,226409,136217,514247,250543,551653,980107,898873,95971,176507,23917,794879,122203,870967,926707,144163,484327,444343,241393,490741,112031,257273,842183,30203,50359,519301,429581,471641,825779,617731,139871,536087,904619,323927,753937,738523,12613,471283,142453,321983,528197,82031,140761,507571,190891,649487,467141,354973,2399,275581,872453,853429,416419,535489,273367,143257,45817,137399,10957,793633,431029,23041,905659,50207,289733,316241,702817,375743,996409,389663,172721,909329,949961,283909,412609,857873,121349,141731,760549,803461,86257,383281,359701,534631,899057,706151,205463,526307,89939,358079,520019,664669,400601,889001,122039,106627,401957,272203,838133,441631,407579,52567,791047,486407,374441,192553,836233,250361,179687,527203,823421,78259,833717,222323,67957,80407,83561,280927,480989,318863,842791,704023,446129,818683,748829,232459,462589,849353,818473,585587,24373,898241,756293,180281,532849,234139,999907,70223,912647,492413,107053,283957,646831,619753,489343,627227,951281,502841,31033,156491,45179,155383,921517,411361,395261,59419,21773,72707,565381,70793,547321,452519,656609,9157,469099,362953,941159,730679,761713,889657,277889,598303,962683,411193,600823,139021,804017,319681,784367,769961,71881,188137,79967,263591,26839,608087,724567,188311,993217,275087,117043,157219,72643,930379,91249,582931,286547,372629,841597,784243,736051,463511,676289,758753,918583,537331,547271,125471,376841,531481,879721,376531,690163,728941,646199,979333,469141,310693,634541,961943,678907,507109,79579,267451,235159,95911,247829,896561,683437,321239,416459,371587,745117,549481,724267,439763,936127,119831,266999,367391,422203,326353,780193,172307,191353,281023,873979,158359,22901,706183,617189,580291,453707,511333,276347,258763,185167,888143,693283,934291,223903,945809,196837,589811,972271,490057,51977,213281,670777,344221,498583,526837,929459,581369,49639,305663,31259,12659,239999,234131,120223,312349,835399,798823,979519,191231,89513,53899,593323,908741,898259,907561,520763,351851,985597,185893,157321,223759,105883,350869,531163,646301,46703,161947,340337,551651,36307,716449,123983,679999,687161,541391,898867,337343,70297,250889,722881,6263,229763,549169,937007,920477,228637,971713,344363,751853,506899,248779,74573,640411,330061,894221,589187,593231,993479,260317,250727,191911,378629,885821,214063,232079,342373,836267,471721,57667,68507,691661,579851,118681,759961,685039,512713,481939,26153,589453,156089,705787,37963,262147,219871,382883,569747,869717,886751,811649,300589,732521,181439,384277,503053,198637,660659,529349,125029,670379,17977,124673,985471,447527,66383,106949,410281,533009,57977,525157,923653,499253,569011,783733,909437,418763,585443,612259,822229,697157,883489,29789,746659,984617,163243,933151,733751,856073,921353,284467,580513,906377,120163,395111,364069,305209,286367,190409,114743,388369,711811,147197,369331,707869,472063,45553,996403,206047,143653,260387,237689,812221,627491,776969,344693,344887,426007,497269,244561,790421,176321,652451,826381,276527,5279,164149,823373,704569,507743,265891,115319,931751,649279,727673,394529,323549,470599,482101,389149,809737,118399,148387,190667,562759,201401,319127,385223,497491,80491,875341,819719,66523,605629,720847,91801,495787,982769,20269,166207,20641,269543,141707,869039,45691,589609,381629,11833,692717,96149,553921,71789,209813,499133,705833,755483,223361,340577,180883,291359,785017,560561,533879,387613,249427,893873,351059,354313,776497,819017,932231,545093,135937,5927,183581,102407,256483,866693,126491,205307,246577,967937,991229,35023,528929,668713,280337,960467,704287,131783,10597,211,803513,369791,813443,261089,74449,231131,906119,269617,183247,801701,189493,644593,336631,419443,434611,799651,112297,116447,778633,720997,907019,787573,855089,543287,398731,308489,939739,750209,670931,870517,205607,268291,953077,75967,926033,22073,461507,281,468889,714443,650623,290327,646909,951259,392321,792769,997147,302009,943603,487391,162641,700279,900551,288853,850631,128941,100379,645187,835739,230471,838547,60107,837017,746981,381943,142327,164621,446273,301487,667477,178393,472369,438887,54563,861979,827041,983243,385793,857273,578917,847109,229283,97847,948091,2707,758071,830743,72307,963497,615661,811277,50147,994571,839809,421123,819029,440567,898987,451109,862369,396437,104827,163861,771019,892351,967441,234869,69401,789941,520529,471179,997793,629263,275449,746743,584429,819031,970909,652241,505031,915191,268153,792793,974711,56453,489011,276587,175039,929627,446387,801077,26729,535861,46681,123973,928429,52183,994447,101399,273821,446549,122849,923581,218551,423061,169951,306871,432659,456329,664123,884831,157411,838141,541777,945817,338341,964357,198409,380917,271367,459037,643,183479,385621,971921,964081,574627,735181,12343,966197,710383,682247,12457,418511,468029,537877,371249,935507,733133,310111,171707,202127,966389,614741,402763,523427,766471,523417,341063,604589,779267,997151,944687,511109,327499,480749,639439,21589,651103,934943,627721,302921,404507,920137,729607,440303,928819,13327,645737,629803,283121,275323,796151,60539,173263,285953,799619,229601,209581,888359,188941,823643,2381,587437,390157,236609,619739,757829,817697,738071,666427,312397,556939,101081,760997,889597,403103,165161,601507,651821,82193,335747,164299,216919,888133,67723,938611,992539,185599,733879,355339,567319,517739,575119,180179,396581,588073,236329,516499,384253,717533,105397,669091,645503,43597,942143,587287,591137,925921,699649,274867,253661,327583,749909,208261,288907,487049,27191,273643,74713,421147,705437,895927,543637,792067,663937,377617,983119,661931,55127,535387,324799,268211,380563,366973,470887,426061,564607,741847,370199,983327,450071,101921,80233,331423,392383,291661,971653,566233,612869,993907,765043,270701,218681,239167,511723,159337,94483,507071,952883,358811,378571,594511,452807,537919,734819,361663,535673,197269,688813,34919,988571,180337,648649,500791,77747,705493,100747,844439,202289,700361,128879,561923,218149,821651,351469,228847,690929,345647,798461,839473,527069,410461,268759,231431,601589,514793,141283,25219,638179,235661,920519,656377,981173,173573,706907,82457,576151,636353,631531,929029,135353,666067,270539,743143,564899,246641,354031,678563,366631,382961,796517,652739,274951,251857,804943,995363,217849,130699,658573,792643,626963,992609,213553,832291,860077,807259,856111,625483,994249,187507,988067,58711,546323,948901,839669,976013,530797,144139,504061,210019,719903,85597,585743,229399,399643,661121,7879,243239,722311,270131,518153,797033,676069,706703,613163,28477,62773,193393,291877,336533,146023,221261,882881,970213,261127,349409,810071,834277,327023,572659,160483,921001,15091,317263,136963,531673,628877,269351,109453,532417,50587,307639,75217,923579,306121,856393,250343,311371,47609,206263,206351,288427,329053,823961,162419,8969,527869,179497,505049,745133,347989,131611,481447,502171,61547,690407,187111,412487,647651,596119,872621,942979,810853,227743,145753,700831,433249,122827,876677,828011,424313,349109,268343,995381,150089,313147,184633,621259,900689,862241,354677,629537,936619,383041,651331,417931,820349,289039,363691,404177,813049,182473,141851,523207,947963,895987,376127,448843,150011,346943,180221,622781,909043,477313,207127,506339,297391,804161,263849,663581,982151,282299,337907,115853,653713,785671,700331,267593,903827,528107,325921,480367,51241,403243,497963,509123,60899,189823,251359,559739,39971,13577,951589,548291,286789,456149,623723,180679,3533,794113,187471,27997,201517,989977,458629,173687,611081,439339,976933,71663,747841,665233,844511,706757,44777,489479,690541,554677,32369,230081,547397,382163,59107,634003,634307,96167,70487,186743,212057,601819,884269,452279,341191,968381,774779,208309,227497,231031,135859,827549,659951,927643,51787,745951,123269,7669,751183,434431,653537,3803,804211,943589,902201,394007,775601,220897,914513,340937,1291,2741,508159,987533,170111,483751,575791,237737,406969,245899,387433,187009,60127,836611,987143,589583,384067,112067,736847,299363,529723,429349,258317,567187,808229,116791,288283,721219,284813,752699,615379,320861,595139,12583,97007,54037,158749,803287,95707,142183,384691,11467,820273,80051,148303,939317,790199,159361,697141,457981,4111,270841,467003,322951,932663,636301,129539,298369,961733,722363,439541,549313,856693,328619,259177,129803,762329,678451,459317,809101,920741,221999,886913,90187,383419,169957,997267,888247,947621,451663,764399,255349,925399,260339,489823,856519,286927,634681,50383,564533,755903,490267,835841,564617,531103,102673,470711,47629,233341,760961,597361,848251,413143,481571,889039,134293,421397,426527,460087,903037,5867,756023,484727,915839,640151,360511,295073,789829,795203,231571,607249,61031,308027,250057,599477,362213,310481,302609,400943,344893,408809,554089,836699,424121,617447,125407,583909,258637,385397,758503,153701,465433,280103,767747,134947,932003,614477,159853,879673,158209,668069,429127,577033,895813,450287,726953,211873,505159,248909,228611,550049,825101,300583,8543,222527,758579,974359,722611,220939,775237,575203,124897,696653,495617,847139,754739,579011,171293,642049,537143,932419,234967,411577,238009,377369,283583,818101,769231,372413,89363,245683,136811,363491,170761,668089,613297,438131,798871,795149,5641,679309,837451,239527,657779,476107,594227,738713,351517,371069,641519,133571,156151,646577,730363,779873,410239,91499,431621,504379,40739,774601,495967,431881,375707,465739,300683,890501,84349,701579,651617,794659,824741,999233,725119,530183,223999,687517,81517,526193,599959,105533,622159,565597,775603,651841,471089,243421,760537,297641,83609,294923,181157,805451,499063,893479,320699,110261,886999,996689,844733,367457,21499,503969,90371,182029,961637,834611,900719,882719,830591,710371,729041,692371,209801,294383,26759,576287,286469,625939,289763,772159,232487,23887,462481,700129,993431,962783,765623,156679,420421,49037,599693,564061,614609,4493,700127,767423,205589,675859,812257,636403,222043,930707,106279,528313,836317,119533,369211,228353,585997,866933,138143,490309,325769,929261,151561,804073,672283,242057,838003,309313,615187,151381,248167,799543,259507,66889,314213,454063,251567,316681,798911,539129,890177,990281,60289,522199,4937,900397,664357,561599,725327,984047,391009,188701,107747,877997,787621,759799,214141,965773,548843,530249,957659,242329,955309,390193,184087,269749,855887,397357,563077,968573,638303,384973,374389,278051,304849,458009,578923,23251,484117,319967,554137,617051,550427,295873,278611,100129,698591,26317,465529,321509,180077,527623,765229,651437,110477,176459,7253,69031,580843,42509,468151,788651,948449,77543,819319,324733,39841,363217,647359,326257,44543,220757,345271,295039,947449,603091,327923,744077,29917,556769,338579,677959,521023,324143,698251,993781,3739,780037,230383,245257,919811]", "expected_output": "4090", "task_finish_time": 1681356294397, "total_correct": 31, "total_testcases": 75, "runtime_percentile": null, "status_memory": "N/A", "memory_percentile": null, "pretty_lang": "Python3", "submission_id": "932838086", "status_msg": "Time Limit Exceeded", "state": "SUCCESS"}}
{"code": "\n    # Initialize variables\n    \n    # Helper function to check if a worker can cross the bridge\n    \n    # Helper function to move workers across the bridge\n    \n    # Calculate efficiencies of workers\n    \n    # Main loop\n        # Check if any workers can cross from left to right\n        \n        # Check if any workers can cross from right to left\n        \n        # Move workers across the bridge\n        \n        # Add new workers to waiting lists\n        \n        # Check if all boxes have been moved\nclass Solution():\n\n    def findCrossingTime(self, n: int, k: int, time: List[List[int]]) -> int:\n        '\\n    There are k workers who want to move n boxes from an old warehouse to a new one. You are given the two integers n and k, and a 2D integer array time of size k x 4 where time[i] = [leftToRighti, pickOldi, rightToLefti, putNewi].\\n    The warehouses are separated by a river and connected by a bridge. The old warehouse is on the right bank of the river, and the new warehouse is on the left bank of the river. Initially, all k workers are waiting on the left side of the bridge. To move the boxes, the ith worker (0-indexed) can :\\n    Cross the bridge from the left bank (new warehouse) to the right bank (old warehouse) in leftToRighti minutes.\\n    Pick a box from the old warehouse and return to the bridge in pickOldi minutes. Different workers can pick up their boxes simultaneously.\\n    Cross the bridge from the right bank (old warehouse) to the left bank (new warehouse) in rightToLefti minutes.\\n    Put the box in the new warehouse and return to the bridge in putNewi minutes. Different workers can put their boxes simultaneously.\\n    A worker i is less efficient than a worker j if either condition is met:\\n    leftToRighti + rightToLefti > leftToRightj + rightToLeftj\\n    leftToRighti + rightToLefti == leftToRightj + rightToLeftj and i > j\\n    The following rules regulate the movement of the workers through the bridge :\\n    If a worker x reaches the bridge while another worker y is crossing the bridge, x waits at their side of the bridge.\\n    If the bridge is free, the worker waiting on the right side of the bridge gets to cross the bridge. If more than one worker is waiting on the right side, the one with the lowest efficiency crosses first.\\n    If the bridge is free and no worker is waiting on the right side, and at least one box remains at the old warehouse, the worker on the left side of the river gets to cross the bridge. If more than one worker is waiting on the left side, the one with the lowest efficiency crosses first.\\n    Return the instance of time at which the last worker reaches the left bank of the river after all n boxes have been put in the new warehouse.\\n    '\n        from typing import List\n        workers = [(0, i) for i in range(k)]\n        bridge = []\n        right_waiting = []\n        left_waiting = []\n        boxes_left = n\n\n        def can_cross(worker):\n            if (not bridge):\n                return True\n            else:\n                return (bridge[0][0] <= worker[0])\n\n        def move_workers():\n            nonlocal boxes_left\n            while bridge:\n                (time, index) = bridge.pop(0)\n                if (index == (- 1)):\n                    continue\n                if (index < k):\n                    right_waiting.remove((efficiencies[index], index))\n                    bridge.append(((time + time[index][1]), (- 1)))\n                else:\n                    boxes_left -= 1\n                    left_waiting.remove((efficiencies[(index - k)], (index - k)))\n                    if (boxes_left == 0):\n                        return (time + time[index][2])\n                    bridge.append(((time + time[index][3]), (- 1)))\n        efficiencies = [((time[i][0] + time[i][2]), i) for i in range(k)]\n        efficiencies.sort()\n        while True:\n            for i in range(len(left_waiting)):\n                if can_cross(workers[left_waiting[i][1]]):\n                    bridge.append((workers[left_waiting[i][1]][0], left_waiting[i][1]))\n                    left_waiting.pop(i)\n                    break\n            if ((not bridge) and right_waiting and (boxes_left > 0)):\n                index = right_waiting[0][1]\n                bridge.append(((workers[index][0] + time[index][0]), index))\n                right_waiting.pop(0)\n            bridge.sort()\n            time = move_workers()\n            for i in range(len(workers)):\n                if (workers[i][0] <= time):\n                    if (i < k):\n                        left_waiting.append((efficiencies[i][0], i))\n                    else:\n                        right_waiting.append((efficiencies[(i - k)][0], i))\n            if (boxes_left == 0):\n                return time\n", "status": "Runtime Error", "reward": false, "info": {"status_code": 15, "lang": "python3", "run_success": false, "runtime_error": "Line 67: TypeError: '<=' not supported between instances of 'int' and 'NoneType'", "full_runtime_error": "TypeError: '<=' not supported between instances of 'int' and 'NoneType'\n    if (workers[i][0] <= time):\nLine 67 in findCrossingTime (Solution.py)\n    ret = Solution().findCrossingTime(param_1, param_2, param_3)\nLine 103 in _driver (Solution.py)\n    _driver()\nLine 114 in <module> (Solution.py)", "status_runtime": "N/A", "memory": 13972000, "question_id": "2642", "elapsed_time": 42, "compare_result": "00000000000000000000000000000000000000000000000000000000000000000", "code_output": "", "std_output": "", "last_testcase": "1\n3\n[[1,1,2,1],[1,1,3,1],[1,1,4,1]]", "expected_output": "6", "task_finish_time": 1681356327465, "total_correct": 0, "total_testcases": 65, "runtime_percentile": null, "status_memory": "N/A", "memory_percentile": null, "pretty_lang": "Python3", "submission_id": "932838310", "status_msg": "Runtime Error", "state": "SUCCESS"}}
{"code": "\nclass Solution():\n\n    def isReachable(self, targetX: int, targetY: int) -> bool:\n        '\\n    There exists an infinitely large grid. You are currently at point (1, 1), and you need to reach the point (targetX, targetY) using a finite number of steps.\\n    In one step, you can move from point (x, y) to any one of the following points:\\n    (x, y - x)\\n    (x - y, y)\\n    (2 * x, y)\\n    (x, 2 * y)\\n    Given two integers targetX and targetY representing the X-coordinate and Y-coordinate of your final position, return true if you can reach the point from (1, 1) using some number of steps, and false otherwise.\\n    '\n\n        def dfs(x, y):\n            if ((x > targetX) or (y > targetY)):\n                return False\n            if ((x == targetX) and (y == targetY)):\n                return True\n            return (dfs((x + y), y) or dfs(x, (x + y)) or dfs((2 * x), y) or dfs(x, (2 * y)))\n        return dfs(1, 1)\n", "status": "Runtime Error", "reward": false, "info": {"status_code": 15, "lang": "python3", "run_success": false, "runtime_error": "Line 8: RecursionError: maximum recursion depth exceeded in comparison", "full_runtime_error": "RecursionError: maximum recursion depth exceeded in comparison\n    if ((x > targetX) or (y > targetY)):\nLine 8 in dfs (Solution.py)\n  [Previous line repeated 996 more times]\n    return (dfs((x + y), y) or dfs(x, (x + y)) or dfs((2 * x), y) or dfs(x, (2 * y)))\nLine 12 in dfs (Solution.py)\n    return (dfs((x + y), y) or dfs(x, (x + y)) or dfs((2 * x), y) or dfs(x, (2 * y)))\nLine 12 in dfs (Solution.py)\n    return (dfs((x + y), y) or dfs(x, (x + y)) or dfs((2 * x), y) or dfs(x, (2 * y)))\nLine 12 in dfs (Solution.py)", "status_runtime": "N/A", "memory": 618892000, "question_id": "2635", "elapsed_time": 1960, "compare_result": "111110000000000000000000000000000000000000000000000000000000", "code_output": "", "std_output": "", "last_testcase": "536870912\n536870912", "expected_output": "true", "task_finish_time": 1681356354701, "total_correct": 5, "total_testcases": 60, "runtime_percentile": null, "status_memory": "N/A", "memory_percentile": null, "pretty_lang": "Python3", "submission_id": "932838462", "status_msg": "Runtime Error", "state": "SUCCESS"}}
{"code": "\nclass Solution():\n\n    def minCost(self, nums: List[int], k: int) -> int:\n        '\\n    You are given an integer array nums and an integer k.\\n    Split the array into some number of non-empty subarrays. The cost of a split is the sum of the importance value of each subarray in the split.\\n    Let trimmed(subarray) be the version of the subarray where all numbers which appear only once are removed.\\n    For example, trimmed([3,1,2,4,3,4]) = [3,4,3,4].\\n    The importance value of a subarray is k + trimmed(subarray).length.\\n    For example, if a subarray is [1,2,3,3,3,4,4], then trimmed([1,2,3,3,3,4,4]) = [3,3,3,4,4].The importance value of this subarray will be k + 5.\\n    Return the minimum possible cost of a split of nums.\\n    A subarray is a contiguous non-empty sequence of elements within an array.\\n    '\n        from collections import Counter\n\n        def trimmed(arr):\n            return [num for num in arr if (count[num] > 1)]\n        count = Counter(nums)\n        n = len(nums)\n        dp = ([float('inf')] * (n + 1))\n        dp[0] = 0\n        for i in range(1, (n + 1)):\n            for j in range(i):\n                subarray = nums[j:i]\n                imp_val = (k + len(trimmed(subarray)))\n                dp[i] = min(dp[i], (dp[j] + imp_val))\n        return dp[n]\n", "status": "Wrong Answer", "reward": false, "info": {"status_code": 11, "lang": "python3", "run_success": true, "status_runtime": "N/A", "memory": 0, "question_id": "2633", "elapsed_time": 11005, "compare_result": "00100000001011111110000000000000011000000000000000000000000", "code_output": "9", "std_output": "", "last_testcase": "[1,2,1,2,1,3,3]\n2", "expected_output": "8", "task_finish_time": 1681356389655, "total_correct": 11, "total_testcases": 59, "runtime_percentile": null, "status_memory": "N/A", "memory_percentile": null, "pretty_lang": "Python3", "submission_id": "932838619", "input_formatted": "[1,2,1,2,1,3,3], 2", "input": "[1,2,1,2,1,3,3]\n2", "status_msg": "Wrong Answer", "state": "SUCCESS"}}
{"code": "\nclass Solution():\n\n    def maxOutput(self, n: int, edges: List[List[int]], price: List[int]) -> int:\n        '\\n    There exists an undirected and initially unrooted tree with n nodes indexed from 0 to n - 1. You are given the integer n and a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\\n    Each node has an associated price. You are given an integer array price, where price[i] is the price of the ith node.\\n    The price sum of a given path is the sum of the prices of all nodes lying on that path.\\n    The tree can be rooted at any node root of your choice. The incurred cost after choosing root is the difference between the maximum and minimum price sum amongst all paths starting at root.\\n    Return the maximum possible cost amongst all possible root choices.\\n    '\n        from typing import List\n        graph = [[] for _ in range(n)]\n        for (u, v) in edges:\n            graph[u].append(v)\n            graph[v].append(u)\n\n        def dfs(node):\n            nonlocal ans\n            (min_price, max_price) = (float('inf'), float('-inf'))\n            for nei in graph[node]:\n                if (nei == parent[node]):\n                    continue\n                parent[nei] = node\n                dfs(nei)\n                min_price = min(min_price, min_val[nei])\n                max_price = max(max_price, max_val[nei])\n            if (min_price == float('inf')):\n                min_price = price[node]\n            if (max_price == float('-inf')):\n                max_price = price[node]\n            min_val[node] = min_price\n            max_val[node] = max_price\n            ans = max(ans, ((max_price - min_price) + price[node]))\n        ans = float('-inf')\n        parent = ([(- 1)] * n)\n        min_val = ([0] * n)\n        max_val = ([0] * n)\n        dfs(0)\n        return ans\n", "status": "Wrong Answer", "reward": false, "info": {"status_code": 11, "lang": "python3", "run_success": true, "status_runtime": "N/A", "memory": 56548000, "question_id": "2627", "elapsed_time": 2328, "compare_result": "0011000000000000000000000000000000000000000000000000000000", "code_output": "14", "std_output": "", "last_testcase": "6\n[[0,1],[1,2],[1,3],[3,4],[3,5]]\n[9,8,7,6,10,5]", "expected_output": "24", "task_finish_time": 1681356413111, "total_correct": 2, "total_testcases": 58, "runtime_percentile": null, "status_memory": "N/A", "memory_percentile": null, "pretty_lang": "Python3", "submission_id": "932838770", "input_formatted": "6, [[0,1],[1,2],[1,3],[3,4],[3,5]], [9,8,7,6,10,5]", "input": "6\n[[0,1],[1,2],[1,3],[3,4],[3,5]]\n[9,8,7,6,10,5]", "status_msg": "Wrong Answer", "state": "SUCCESS"}}
{"code": "\nclass Solution():\n\n    def maxPower(self, stations: List[int], r: int, k: int) -> int:\n        '\\n    You are given a 0-indexed integer array stations of length n, where stations[i] represents the number of power stations in the ith city.\\n    Each power station can provide power to every city in a fixed range. In other words, if the range is denoted by r, then a power station at city i can provide power to all cities j such that |i - j| <= r and 0 <= i, j <= n - 1.\\n    Note that |x| denotes absolute value. For example, |7 - 5| = 2 and |3 - 10| = 7.\\n    The power of a city is the total number of power stations it is being provided power from.\\n    The government has sanctioned building k more power stations, each of which can be built in any city, and have the same range as the pre-existing ones.\\n    Given the two integers r and k, return the maximum possible minimum power of a city, if the additional power stations are built optimally.\\n    Note that you can build the k power stations in multiple cities.\\n    '\n        from typing import List\n        n = len(stations)\n        prefix_sum = ([0] * (n + 1))\n        for i in range(n):\n            prefix_sum[(i + 1)] = (prefix_sum[i] + stations[i])\n        max_power = 0\n        for i in range(n):\n            left = max(0, (i - r))\n            right = min((n - 1), (i + r))\n            power = (prefix_sum[(right + 1)] - prefix_sum[left])\n            if (power > max_power):\n                max_power = power\n        if (k == 0):\n            return max_power\n        dp = [([0] * (k + 1)) for _ in range(n)]\n        for i in range(n):\n            dp[i][0] = max_power\n        for j in range(1, (k + 1)):\n            for i in range(n):\n                left = max(0, (i - r))\n                right = min((n - 1), (i + r))\n                power = (prefix_sum[(right + 1)] - prefix_sum[left])\n                for p in range(left, i):\n                    left_p = max(0, (p - r))\n                    right_p = min((n - 1), (p + r))\n                    power_p = (prefix_sum[(right_p + 1)] - prefix_sum[left_p])\n                    dp[i][j] = max(dp[i][j], min(dp[p][(j - 1)], (power - power_p)))\n                for p in range((i + 1), (right + 1)):\n                    left_p = max(0, (p - r))\n                    right_p = min((n - 1), (p + r))\n                    power_p = (prefix_sum[(right_p + 1)] - prefix_sum[left_p])\n                    dp[i][j] = max(dp[i][j], min(dp[p][(j - 1)], (power - power_p)))\n        return dp[(n - 1)][k]\n", "status": "Wrong Answer", "reward": false, "info": {"status_code": 11, "lang": "python3", "run_success": true, "status_runtime": "N/A", "memory": 0, "question_id": "2618", "elapsed_time": 11007, "compare_result": "001000000000000000000000000000", "code_output": "0", "std_output": "", "last_testcase": "[1,2,4,5,0]\n1\n2", "expected_output": "5", "task_finish_time": 1681356457886, "total_correct": 1, "total_testcases": 30, "runtime_percentile": null, "status_memory": "N/A", "memory_percentile": null, "pretty_lang": "Python3", "submission_id": "932838968", "input_formatted": "[1,2,4,5,0], 1, 2", "input": "[1,2,4,5,0]\n1\n2", "status_msg": "Wrong Answer", "state": "SUCCESS"}}
{"code": "\nclass Solution():\n\n    def countAnagrams(self, s: str) -> int:\n        '\\n    You are given a string s containing one or more words. Every consecutive pair of words is separated by a single space \\' \\'.\\n    A string t is an anagram of string s if the ith word of t is a permutation of the ith word of s.\\n    For example, \"acb dfe\" is an anagram of \"abc def\", but \"def cab\"\\xa0and \"adc bef\" are not.\\n    Return the number of distinct anagrams of s. Since the answer may be very large, return it modulo 109 + 7.\\n    '\n        MOD = ((10 ** 9) + 7)\n        words = s.split()\n        freq = {}\n        for word in words:\n            key = ''.join(sorted(word))\n            freq[key] = (freq.get(key, 0) + 1)\n        ans = 1\n        for key in freq:\n            ans = ((ans * freq[key]) % MOD)\n        return ans\n", "status": "Wrong Answer", "reward": false, "info": {"status_code": 11, "lang": "python3", "run_success": true, "status_runtime": "N/A", "memory": 15664000, "question_id": "2605", "elapsed_time": 91, "compare_result": "01000000000001000000000000000000001111100", "code_output": "1", "std_output": "", "last_testcase": "\"too hot\"", "expected_output": "18", "task_finish_time": 1681356471948, "total_correct": 7, "total_testcases": 41, "runtime_percentile": null, "status_memory": "N/A", "memory_percentile": null, "pretty_lang": "Python3", "submission_id": "932839101", "input_formatted": "\"too hot\"", "input": "\"too hot\"", "status_msg": "Wrong Answer", "state": "SUCCESS"}}
{"code": "\nclass Solution():\n\n    def countPartitions(self, nums: List[int], k: int) -> int:\n        '\\n    You are given an array nums consisting of positive integers and an integer k.\\n    Partition the array into two ordered groups such that each element is in exactly one group. A partition is called great if the sum of elements of each group is greater than or equal to k.\\n    Return the number of distinct great partitions. Since the answer may be too large, return it modulo 109 + 7.\\n    Two partitions are considered distinct if some element nums[i] is in different groups in the two partitions.\\n    '\n        from typing import List\n        MOD = ((10 ** 9) + 7)\n        n = len(nums)\n        dp = [([0] * (k + 1)) for _ in range((n + 1))]\n        dp[0][0] = 1\n        for i in range(1, (n + 1)):\n            for j in range((k + 1)):\n                dp[i][j] = ((dp[(i - 1)][j] * 2) % MOD)\n                if ((j - nums[(i - 1)]) >= 0):\n                    dp[i][j] = ((dp[i][j] + dp[(i - 1)][(j - nums[(i - 1)])]) % MOD)\n        return dp[n][k]\n", "status": "Wrong Answer", "reward": false, "info": {"status_code": 11, "lang": "python3", "run_success": true, "status_runtime": "N/A", "memory": 52288000, "question_id": "2601", "elapsed_time": 1540, "compare_result": "010000000000000000000001111000000000000000000", "code_output": "12", "std_output": "", "last_testcase": "[1,2,3,4]\n4", "expected_output": "6", "task_finish_time": 1681356500217, "total_correct": 5, "total_testcases": 45, "runtime_percentile": null, "status_memory": "N/A", "memory_percentile": null, "pretty_lang": "Python3", "submission_id": "932839247", "input_formatted": "[1,2,3,4], 4", "input": "[1,2,3,4]\n4", "status_msg": "Wrong Answer", "state": "SUCCESS"}}
{"code": "\n    # Initialize the parent array\n    \n    # Find function to find the parent of a node\n    \n    # Union function to merge two nodes\n    \n    # Function to check if two nodes are in the same set\n    \n    # Function to get the length of the cycle\n        # If the nodes are already in the same set, then there is a cycle\n        \n        # Otherwise, merge the sets and check again\n    \n    # Initialize the answer array\n    \n    # Iterate through the queries\n        \n        # Get the length of the cycle\n        \n        # Remove the edge between the nodes\n        \n        # Append the length to the answer array\n    \n    # Return the answer array\nclass Solution():\n\n    def cycleLengthQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        '\\n    You are given an integer n. There is a complete binary tree with 2n - 1 nodes. The root of that tree is the node with the value 1, and every node with a value val in the range [1, 2n - 1 - 1] has two children where:\\n    The left node has the value 2 * val, and\\n    The right node has the value 2 * val + 1.\\n    You are also given a 2D integer array queries of length m, where queries[i] = [ai, bi]. For each query, solve the following problem:\\n    Add an edge between the nodes with values ai and bi.\\n    Find the length of the cycle in the graph.\\n    Remove the added edge between nodes with values ai and bi.\\n    Note that:\\n    A cycle is a path that starts and ends at the same node, and each edge in the path is visited only once.\\n    The length of a cycle is the number of edges visited in the cycle.\\n    There could be multiple edges between two nodes in the tree after adding the edge of the query.\\n    Return an array answer of length m where answer[i] is the answer to the ith query.\\n    '\n        from typing import List\n        parent = [i for i in range((2 * n))]\n\n        def find(x):\n            if (parent[x] == x):\n                return x\n            parent[x] = find(parent[x])\n            return parent[x]\n\n        def union(x, y):\n            parent[find(x)] = find(y)\n\n        def same(x, y):\n            return (find(x) == find(y))\n\n        def get_cycle_length(x, y):\n            if same(x, y):\n                return 1\n            union(x, y)\n            length = 1\n            while (x != y):\n                if (x > y):\n                    x //= 2\n                else:\n                    y //= 2\n                length += 1\n            return length\n        answer = []\n        for query in queries:\n            (x, y) = query\n            length = get_cycle_length(x, y)\n            parent[find(x)] = find(x)\n            parent[find(y)] = find(y)\n            answer.append(length)\n        return answer\n", "status": "Runtime Error", "reward": false, "info": {"status_code": 15, "lang": "python3", "run_success": false, "runtime_error": "Line 34: IndexError: list index out of range", "full_runtime_error": "IndexError: list index out of range\n    if (parent[x] == x):\nLine 34 in find (Solution.py)\n    return (find(x) == find(y))\nLine 43 in same (Solution.py)\n    if same(x, y):\nLine 46 in get_cycle_length (Solution.py)\n    length = get_cycle_length(x, y)\nLine 60 in cycleLengthQueries (Solution.py)\n    ret = Solution().cycleLengthQueries(param_1, param_2)\nLine 89 in _driver (Solution.py)\n    _driver()\nLine 100 in <module> (Solution.py)", "status_runtime": "N/A", "memory": 13880000, "question_id": "2597", "elapsed_time": 43, "compare_result": "000000000000000000000000000", "code_output": "", "std_output": "", "last_testcase": "3\n[[5,3],[4,7],[2,3]]", "expected_output": "[4,5,3]", "task_finish_time": 1681356534438, "total_correct": 0, "total_testcases": 27, "runtime_percentile": null, "status_memory": "N/A", "memory_percentile": null, "pretty_lang": "Python3", "submission_id": "932839448", "status_msg": "Runtime Error", "state": "SUCCESS"}}
{"code": "\nclass Solution():\n\n    def isPossible(self, n: int, edges: List[List[int]]) -> bool:\n        '\\n    There is an undirected graph consisting of n nodes numbered from 1 to n. You are given the integer n and a 2D array edges where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi. The graph can be disconnected.\\n    You can add at most two additional edges (possibly none) to this graph so that there are no repeated edges and no self-loops.\\n    Return true if it is possible to make the degree of each node in the graph even, otherwise return false.\\n    The degree of a node is the number of edges connected to it.\\n    '\n        from typing import List\n        degree = ([0] * (n + 1))\n        for edge in edges:\n            degree[edge[0]] += 1\n            degree[edge[1]] += 1\n        odd_degrees = sum((1 for d in degree if ((d % 2) != 0)))\n        if (odd_degrees == 0):\n            return True\n        elif (odd_degrees == 2):\n            return True\n        else:\n            return False\n", "status": "Wrong Answer", "reward": false, "info": {"status_code": 11, "lang": "python3", "run_success": true, "status_runtime": "N/A", "memory": 55732000, "question_id": "2596", "elapsed_time": 1486, "compare_result": "1010110111111011101111000110001111111111110011000110", "code_output": "false", "std_output": "", "last_testcase": "4\n[[1,2],[3,4]]", "expected_output": "true", "task_finish_time": 1681356561664, "total_correct": 35, "total_testcases": 52, "runtime_percentile": null, "status_memory": "N/A", "memory_percentile": null, "pretty_lang": "Python3", "submission_id": "932839610", "input_formatted": "4, [[1,2],[3,4]]", "input": "4\n[[1,2],[3,4]]", "status_msg": "Wrong Answer", "state": "SUCCESS"}}
{"code": "\nclass Solution():\n\n    def minimumTotalCost(self, nums1: List[int], nums2: List[int]) -> int:\n        '\\n    You are given two 0-indexed integer arrays nums1 and nums2, of equal length n.\\n    In one operation, you can swap the values of any two indices of nums1. The cost of this operation is the sum of the indices.\\n    Find the minimum total cost of performing the given operation any number of times such that nums1[i] != nums2[i] for all 0 <= i <= n - 1 after performing all the operations.\\n    Return the minimum total cost such that nums1 and nums2 satisfy the above condition. In case it is not possible, return -1.\\n    '\n        from typing import List\n        if (sorted(nums1) != sorted(nums2)):\n            return (- 1)\n        n = len(nums1)\n        cost = 0\n        for i in range(n):\n            if (nums1[i] != nums2[i]):\n                cost += i\n        return cost\n", "status": "Wrong Answer", "reward": false, "info": {"status_code": 11, "lang": "python3", "run_success": true, "status_runtime": "N/A", "memory": 28636000, "question_id": "2592", "elapsed_time": 1090, "compare_result": "00000000000000000000000000000000000000000000000000000000000000000000000000100000010000001001100000010000", "code_output": "0", "std_output": "", "last_testcase": "[1,2,3,4,5]\n[1,2,3,4,5]", "expected_output": "10", "task_finish_time": 1681356585694, "total_correct": 6, "total_testcases": 104, "runtime_percentile": null, "status_memory": "N/A", "memory_percentile": null, "pretty_lang": "Python3", "submission_id": "932839741", "input_formatted": "[1,2,3,4,5], [1,2,3,4,5]", "input": "[1,2,3,4,5]\n[1,2,3,4,5]", "status_msg": "Wrong Answer", "state": "SUCCESS"}}
{"code": "\nclass Solution():\n\n    def maxPoints(self, grid: List[List[int]], queries: List[int]) -> List[int]:\n        '\\n    You are given an m x n integer matrix grid and an array queries of size k.\\n    Find an array answer of size k such that for each integer queries[i] you start in the top left cell of the matrix and repeat the following process:\\n    If queries[i] is strictly greater than the value of the current cell that you are in, then you get one point if it is your first time visiting this cell, and you can move to any adjacent cell in all 4 directions: up, down, left, and right.\\n    Otherwise, you do not get any points, and you end this process.\\n    After the process, answer[i] is the maximum number of points you can get. Note that for each query you are allowed to visit the same cell multiple times.\\n    Return the resulting array answer.\\n    '\n        from typing import List\n\n        def dfs(i, j, val):\n            if ((i < 0) or (i >= m) or (j < 0) or (j >= n) or visited[i][j] or (grid[i][j] <= val)):\n                return 0\n            visited[i][j] = True\n            res = 1\n            for (dx, dy) in [(0, 1), (0, (- 1)), (1, 0), ((- 1), 0)]:\n                res += dfs((i + dx), (j + dy), grid[i][j])\n            return res\n        (m, n) = (len(grid), len(grid[0]))\n        res = []\n        for q in queries:\n            visited = [([False] * n) for _ in range(m)]\n            ans = 0\n            for i in range(m):\n                for j in range(n):\n                    if (grid[i][j] > q):\n                        ans += dfs(i, j, (- 1))\n            res.append(ans)\n        return res\n", "status": "Wrong Answer", "reward": false, "info": {"status_code": 11, "lang": "python3", "run_success": true, "status_runtime": "N/A", "memory": 0, "question_id": "2588", "elapsed_time": 11005, "compare_result": "000000000000000000000", "code_output": "[1,1,5]", "std_output": "", "last_testcase": "[[1,2,3],[2,5,7],[3,5,1]]\n[5,6,2]", "expected_output": "[5,8,1]", "task_finish_time": 1681356625647, "total_correct": 0, "total_testcases": 21, "runtime_percentile": null, "status_memory": "N/A", "memory_percentile": null, "pretty_lang": "Python3", "submission_id": "932839912", "input_formatted": "[[1,2,3],[2,5,7],[3,5,1]], [5,6,2]", "input": "[[1,2,3],[2,5,7],[3,5,1]]\n[5,6,2]", "status_msg": "Wrong Answer", "state": "SUCCESS"}}
{"code": "\nclass Solution():\n\n    def magnificentSets(self, n: int, edges: List[List[int]]) -> int:\n        '\\n    You are given a positive integer n representing the number of nodes in an undirected graph. The nodes are labeled from 1 to n.\\n    You are also given a 2D integer array edges, where edges[i] = [ai, bi] indicates that there is a bidirectional edge between nodes ai and bi. Notice that the given graph may be disconnected.\\n    Divide the nodes of the graph into m groups (1-indexed) such that:\\n    Each node in the graph belongs to exactly one group.\\n    For every pair of nodes in the graph that are connected by an edge [ai, bi], if ai belongs to the group with index x, and bi belongs to the group with index y, then |y - x| = 1.\\n    Return the maximum number of groups (i.e., maximum m) into which you can divide the nodes. Return -1 if it is impossible to group the nodes with the given conditions.\\n    '\n        from typing import List\n        graph = [[] for _ in range(n)]\n        for (a, b) in edges:\n            graph[(a - 1)].append((b - 1))\n            graph[(b - 1)].append((a - 1))\n        colors = ([(- 1)] * n)\n\n        def dfs(node, color):\n            colors[node] = color\n            for neighbor in graph[node]:\n                if (colors[neighbor] == color):\n                    return False\n                if ((colors[neighbor] == (- 1)) and (not dfs(neighbor, (color ^ 1)))):\n                    return False\n            return True\n        for i in range(n):\n            if ((colors[i] == (- 1)) and (not dfs(i, 0))):\n                return (- 1)\n        return (max(colors) + 1)\n", "status": "Wrong Answer", "reward": false, "info": {"status_code": 11, "lang": "python3", "run_success": true, "status_runtime": "N/A", "memory": 17856000, "question_id": "2583", "elapsed_time": 254, "compare_result": "0100000000001000000000000000000000000101010100110001000", "code_output": "2", "std_output": "", "last_testcase": "6\n[[1,2],[1,4],[1,5],[2,6],[2,3],[4,6]]", "expected_output": "4", "task_finish_time": 1681356642465, "total_correct": 9, "total_testcases": 55, "runtime_percentile": null, "status_memory": "N/A", "memory_percentile": null, "pretty_lang": "Python3", "submission_id": "932840081", "input_formatted": "6, [[1,2],[1,4],[1,5],[2,6],[2,3],[4,6]]", "input": "6\n[[1,2],[1,4],[1,5],[2,6],[2,3],[4,6]]", "status_msg": "Wrong Answer", "state": "SUCCESS"}}
{"code": "\nclass Solution():\n\n    def countPalindromes(self, s: str) -> int:\n        '\\n    Given a string of digits s, return the number of palindromic subsequences of s having length 5. Since the answer may be very large, return it modulo 109 + 7.\\n    Note:\\n    A string is palindromic if it reads the same forward and backward.\\n    A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\\n    '\n        MOD = ((10 ** 9) + 7)\n        n = len(s)\n        dp = [([0] * n) for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n        for l in range(2, 6):\n            for i in range(((n - l) + 1)):\n                j = ((i + l) - 1)\n                if (s[i] == s[j]):\n                    dp[i][j] = dp[(i + 1)][(j - 1)]\n                    if (l == 5):\n                        dp[i][j] += 1\n                else:\n                    dp[i][j] = ((dp[(i + 1)][j] + dp[i][(j - 1)]) - dp[(i + 1)][(j - 1)])\n                dp[i][j] %= MOD\n        return dp[0][(n - 1)]\n", "status": "Wrong Answer", "reward": false, "info": {"status_code": 11, "lang": "python3", "run_success": true, "status_runtime": "N/A", "memory": 783160000, "question_id": "2577", "elapsed_time": 1029, "compare_result": "000000001111110000000000000000000000000000000000000000000000000", "code_output": "0", "std_output": "", "last_testcase": "\"103301\"", "expected_output": "2", "task_finish_time": 1681356672595, "total_correct": 6, "total_testcases": 63, "runtime_percentile": null, "status_memory": "N/A", "memory_percentile": null, "pretty_lang": "Python3", "submission_id": "932840255", "input_formatted": "\"103301\"", "input": "\"103301\"", "status_msg": "Wrong Answer", "state": "SUCCESS"}}
{"code": "\nclass Solution():\n\n    def countSubarrays(self, nums: List[int], k: int) -> int:\n        '\\n    You are given an array nums of size n consisting of distinct integers from 1 to n and a positive integer k.\\n    Return the number of non-empty subarrays in nums that have a median equal to k.\\n    Note:\\n    The median of an array is the middle element after sorting the array in ascending order. If the array is of even length, the median is the left middle element.\\n    For example, the median of [2,3,1,4] is 2, and the median of [8,4,3,5,1] is 4.\\n    A subarray is a contiguous part of an array.\\n    '\n        count = 0\n        for i in range(len(nums)):\n            for j in range(i, len(nums)):\n                subarray = nums[i:(j + 1)]\n                subarray.sort()\n                if ((len(subarray) % 2) == 0):\n                    median = subarray[((len(subarray) // 2) - 1)]\n                else:\n                    median = subarray[(len(subarray) // 2)]\n                if (median == k):\n                    count += 1\n        return count\n", "status": "Time Limit Exceeded", "reward": false, "info": {"status_code": 14, "lang": "python3", "run_success": false, "status_runtime": "N/A", "memory": 0, "question_id": "2574", "elapsed_time": 11005, "compare_result": "111111111111111111111111111111111111111000000", "code_output": "", "std_output": "", "last_testcase": "[3104,7802,5508,8150,1680,5188,4613,3878,2267,604,7494,6314,7609,810,3726,5990,3634,1588,3961,2371,1316,5300,7988,5239,42,245,5504,4561,6550,3478,3059,4820,7766,2141,7526,7502,2990,3095,2843,2428,5351,5044,351,1079,2219,7716,1761,6646,2161,3977,3354,4260,5229,2480,5771,79,199,1578,687,3864,4062,7705,6030,7054,1700,6918,3663,4740,8071,3517,7534,8841,7005,4269,1415,5086,7746,4373,5872,476,8870,5751,8530,4336,995,3527,7804,1373,2139,7751,3209,2359,5452,168,8201,8295,3198,1003,5256,5425,6022,7143,6527,2473,7550,5230,647,2560,4877,616,5523,8420,8231,4838,3678,110,394,6179,64,8579,2207,8218,6031,3459,5307,7459,488,6602,1788,5556,4774,6259,1561,5848,6306,5747,4242,5324,528,866,6002,1648,6791,4486,617,6768,8607,5798,6186,7284,974,4357,1821,701,6449,8008,7504,820,2635,5278,1218,3825,1617,3703,5015,4901,1084,8322,8206,7106,2040,2126,902,1818,4104,7422,1382,6395,8445,7654,3345,387,6829,4747,2881,12,5017,4811,5881,6069,7132,7563,2619,7589,830,4730,2568,6415,4879,4086,5525,7875,1370,2140,1581,1973,5905,8601,6457,6152,2877,5033,6772,2006,7803,7932,8383,7706,4111,5199,8316,2511,7820,8913,1619,5294,4738,3931,336,7664,6897,5545,1133,6625,282,4379,934,5944,1595,7355,6581,6234,5136,7296,8627,3722,3213,4537,2643,2404,6535,2892,809,7652,4197,7510,4299,2245,6155,554,7028,3040,7650,8544,491,6997,4092,4396,3021,3621,920,1195,3513,3725,1706,5973,3034,1018,6104,3288,3731,5557,8370,52,748,3069,2939,1313,3901,5724,937,669,3831,1371,3176,6705,2259,5437,7850,3415,6295,1602,3347,7428,8273,8207,5334,4106,7612,8808,8137,5982,7155,1132,4783,7535,2506,4951,7195,1374,6661,5491,6645,510,8702,4017,1660,857,1202,582,6081,6755,4139,3717,2169,323,6456,288,460,5555,6544,5819,4110,3968,1263,446,3989,54,2765,7419,3687,2849,1552,7572,1473,1964,2058,6328,4320,8792,8461,109,8514,6327,163,5212,661,62,3748,2290,7385,3266,5146,3564,1309,6980,4391,8478,8891,2786,6965,7441,7825,4978,7437,2111,5736,8052,8603,2102,761,3720,114,2166,6497,625,1004,3039,7769,8670,3890,355,1932,3558,5101,1526,6378,1542,3423,8115,963,7235,2069,6746,3635,5841,4050,7253,5461,7547,8806,5419,4883,5181,5859,7876,74,2941,962,6363,624,3280,2432,5719,4626,5035,2196,1425,2216,7081,3490,3042,8754,818,536,8564,3836,7305,4728,5732,5553,4866,5367,6663,255,1408,8805,8794,489,5967,8476,3549,4374,7791,4324,4662,4193,3925,4682,256,5211,2982,25,6297,2380,2301,5301,4097,790,5526,2289,1207,1059,6822,2077,887,6844,1831,45,3755,3310,8411,7949,7637,2103,1970,5193,1890,6040,4518,8777,3202,2739,444,1052,1882,6658,4812,2367,5007,7684,3603,1358,5456,3786,6585,5092,1465,7357,2041,8277,3908,7905,2477,3072,2095,7427,4881,8593,7810,2050,2244,3945,8790,7950,798,5154,2278,8237,7407,5913,1876,7924,3589,6304,6912,7973,5998,6309,8296,196,6483,8470,4963,1652,7631,4370,2358,524,2317,1131,8372,8427,37,1531,229,6990,1272,429,6184,117,3567,8705,4302,3628,5224,5410,2164,896,1299,2233,3876,841,584,4908,1836,2988,1734,7976,8161,4412,7491,982,2617,511,5527,4735,8297,5843,3075,4928,3579,5306,4563,4213,477,5599,480,3297,8308,2926,5535,3043,2089,8243,7217,5813,2453,428,6028,33,1989,3322,346,8659,7114,3941,6235,6024,7086,4375,3248,1636,3205,4778,8030,3111,7047,2189,8379,8354,1868,4984,1320,3939,1710,2308,8652,1251,3036,6300,7451,3317,7855,4938,5376,713,1010,2247,2220,2735,1419,6803,7968,3996,1955,8204,8904,2572,6143,2583,2179,3608,3473,5058,1194,1499,2,4101,1171,768,7164,6718,4642,4204,3387,7546,698,205,8123,7530,6917,8489,4259,2907,8450,834,2273,2192,1656,2023,7621,1393,1325,6512,8212,7373,1321,26,5840,4138,6119,6516,1905,3884,1624,8751,4254,8078,5177,3521,4479,8440,1807,5197,6681,6098,8819,3719,4457,3895,6190,2499,6105,7288,5054,805,3631,8893,5728,5168,1654,2484,147,3842,5629,5496,6089,4090,313,4876,1780,5203,7368,6046,2921,6228,8726,6009,3232,5983,867,8715,6289,6185,6248,6170,4037,5059,1902,8910,8342,4925,2387,5266,4785,8259,3744,5127,2771,1924,5295,1564,7434,8105,3806,3397,758,6611,8594,2882,865,3150,4533,5707,263,4346,2280,8830,4454,6223,5021,3440,3700,7576,3918,7173,338,1643,1470,5762,1472,1665,4645,6218,979,6895,8561,6556,8716,5317,767,3846,5078,7679,6041,88,4475,827,8809,1873,2410,5221,1842,306,290,7213,6647,8552,5315,2867,7206,7720,1035,3976,8191,2637,2895,775,4317,8817,4911,2149,8281,4489,1694,6541,3234,8788,7068,751,6001,450,5823,51,5937,4556,1442,2369,1334,4121,8892,6369,4430,3289,2551,8317,998,1033,5832,933,2962,5273,6425,6298,2703,4496,4044,459,5318,2672,976,3670,6102,5378,6987,6273,4399,1062,8091,2155,8026,4294,3749,1844,1769,3105,7294,6435,7351,6546,3304,4802,8418,5811,8677,1596,5950,1096,7934,736,3277,2360,4807,602,1149,6167,7540,2056,8288,5886,8884,2699,6586,5484,5243,5695,5433,8244,7341,1977,6959,5914,7264,5247,2899,2823,7232,4243,3365,6608,8789,1410,8377,1164,4567,6942,5571,796,2363,7846,791,396,4036,7209,3758,6447,7849,5436,8275,626,4440,1642,2934,8429,8747,5446,2487,6944,3582,1650,5257,6247,4692,4853,4742,3318,672,1897,8645,3834,5039,4536,6967,6567,3204,6034,6894,4212,1508,7826,1496,6361,5144,6472,2457,2002,4099,1222,1928,7424,342,7813,184,471,6276,451,6506,8668,4889,4743,4760,5614,2174,2889,7191,344,3696,6055,4787,5081,5658,3275,8915,3379,8621,4308,8783,6038,4493,4073,8780,8732,2483,939,4404,1395,6836,1422,6108,1103,3409,1580,5105,7484,5955,5045,1192,6846,977,2335,4752,6241,1268,639,1045,938,1728,7851,4266,592,8012,4265,8605,7311,7811,4319,5708,3708,5959,1582,1915,1754,1609,6396,2309,1249,3633,3896,378,8927,4979,289,6521,5673,5443,2638,2411,2227,1872,4700,7853,6957,7854,3227,301,4915,5930,3366,5575,7933,1276,5134,1413,5219,5641,4494,6136,502,6712,310,800,8404,7163,6633,6338,7680,4599,7198,6374,8241,3245,7959,832,303,281,7479,8340,2874,6409,1972,300,8604,7444,4309,8013,7124,3922,5123,495,7227,8822,84,3044,6216,1677,3192,5460,6422,6282,5596,1497,5398,1606,533,2814,5594,6686,8707,5354,8193,5680,7922,4130,612,5938,4506,542,3326,19,2919,882,587,581,6020,1102,8484,8591,3090,3263,5824,2100,2996,5386,3942,1384,8749,3629,1772,8480,2294,5588,8701,8235,1525,1722,831,363,7873,5383,6277,31,3507,6165,623,4993,8596,743,2532,3691,7458,4544,7129,4063,4035,354,1685,3153,551,729,4485,6405,3367,1184,5100,7817,108,1759,6062,5632,4188,2465,3879,3524,3141,3274,5879,1707,7921,7770,2129,1352,6036,6740,7228,4224,2718,794,144,5250,7360,6580,7485,1790,7836,6536,6299,4192,2119,2658,8721,765,997,5319,7674,8729,4171,8309,5492,8443,2239,1273,6515,8054,6783,4887,8242,274,4163,2181,1459,7795,5989,2238,3343,4654,3615,6416,5876,7653,2474,2888,1857,1909,8303,6893,4539,2563,5176,854,5729,6029,7561,3747,4996,6976,2958,8793,1501,7361,8522,2137,4183,3491,158,8293,4151,8136,3254,1392,6797,2616,6823,3400,7076,6643,1505,4960,6313,6609,6838,5468,1197,43,2298,700,2746,5048,7067,7453,4624,206,886,7210,8338,779,5627,3157,5541,192,1711,1170,6397,5416,8589,5635,3998,4234,1952,5544,189,777,1971,2815,2312,462,2157,3772,7157,6419,8345,3684,4827,7009,6142,7472,1039,1361,8393,4666,5340,2456,2755,2501,50,3462,3002,5258,6088,112,3782,6931,6735,2752,1811,2104,4085,2709,3161,6559,2110,6319,3674,2018,3675,4867,850,5302,1147,8853,967,1151,4408,4482,2065,4021,2352,3371,8835,6952,6935,7918,7247,1986,8118,2928,2949,578,6819,8818,4869,4238,6771,2271,7915,7872,7293,1714,4900,6386,8447,3488,7892,5358,5097,7570,5263,4208,4768,3642,2416,2530,7845,4054,4231,5788,8395,1289,8232,5254,2257,6578,3005,2691,2668,1295,8738,7672,8855,6388,7356,6620,7270,3222,3282,6356,8767,2835,4473,3328,7073,5533,4939,4272,1349,4508,5102,7894,8339,5929,6372,3958,6302,172,5587,7555,3383,1047,7557,46,4162,2351,331,4198,7835,6864,4150,2591,4131,4538,8680,8856,2448,1360,1215,98,1302,2214,1946,1248,1318,4656,4471,690,3068,7994,5639,7632,8366,2221,1691,3143,6999,903,4415,6077,6655,1969,7447,1388,2341,4313,5231,6093,2750,5259,4240,7630,2344,7477,4637,3253,1995,1163,5860,8577,4823,2520,6804,7177,4965,102,8517,5479,5272,7602,8791,472,4712,1301,8667,94,6612,2054,4472,1100,7085,7443,6537,5439,6366,8584,7179,6954,1219,7461,7745,1264,5299,7065,4203,2840,839,8616,2747,5507,3292,678,6855,848,5337,7985,717,8495,4781,8208,1500,5469,7840,6762,7401,7837,2073,1912,6840,2916,5118,2870,5499,6149,6220,5000,6212,3179,7469,2350,517,6354,4919,3088,1278,7721,8849,2606,1240,6389,6850,2026,4950,3867,3947,3498,2293,908,6181,3855,8194,3116,2235,5421,3441,3183,6350,7105,8882,4361,2200,1498,1454,486,2642,6610,134,3298,7249,8454,7268,6217,4933,16,972,2897,876,1749,3300,6591,8047,8365,8755,3969,4628,1153,2913,8669,1293,3868,8762,149,567,4143,2150,7613,4704,6941,6438,6116,6279,4020,8184,3154,1383,8797,5651,8364,4724,8085,2394,4405,5414,8195,4914,5442,3225,6799,2067,1211,296,7884,7780,5025,239,2651,6109,2618,7730,5010,6843,2712,658,4852,824,515,6337,8306,5653,4566,3464,7035,6922,1113,6773,5700,4834,5722,829,3763,694,5560,3338,3546,4419,5391,1252,5619,7844,7141,1474,2766,2177,3847,1730,1099,412,3872,5279,731,7104,2444,5776,1136,2142,6786,7970,7223,2291,7087,5428,4033,2158,5636,3759,7979,3013,6928,4610,7096,5046,430,3258,7574,6617,3303,3943,5995,5489,4987,6321,2408,5209,8199,7133,927,4860,1341,4484,7310,6991,5440,2847,7091,1815,5965,5909,6032,6014,5871,1903,6209,5119,5366,7756,1586,1087,97,2492,7059,8619,8815,1720,583,5244,3031,8048,6741,383,3777,1172,691,3121,4892,5202,273,5253,4298,3237,1739,7207,179,3689,1027,7421,6491,1275,332,8763,2807,2165,4959,1481,3807,7122,4115,2272,2828,8798,4955,5835,7992,1120,6115,5328,5741,7753,8062,3020,3775,3656,7562,5417,3083,8009,3536,1353,1778,5953,8779,1748,243,7768,8926,6307,8595,3826,2688,3869,7900,5870,3014,3142,4170,8144,470,3612,2838,4970,8135,8175,268,1978,2372,7615,40,2805,497,6938,4629,5023,6600,4791,7319,6528,6759,8171,271,6480,1488,663,5004,5980,645,520,989,5233,5702,8355,5379,5062,461,3504,5875,5873,7189,2927,3760,5591,4699,1440,7045,4615,73,2529,7858,2879,8082,4281,8177,5565,6834,4568,180,6492,250,7808,8223,2977,5821,6678,3892,6502,4014,1879,4053,494,5477,1993,5285,2347,5812,5074,3492,3844,7260,7947,3801,5018,2342,7665,6452,3735,6174,2872,4698,2601,8122,169,6699,8069,5283,1208,138,5031,485,7704,6439,2660,2880,8848,5028,3028,3783,3967,4436,4989,2327,657,7049,5495,3966,7527,7936,5936,1339,365,1930,5339,8389,8181,5505,5072,5480,8649,3299,8557,371,3463,513,1049,6885,5895,2538,6905,7564,7008,7255,3995,2553,5782,6816,2590,3211,3030,3201,8083,224,6016,8746,6673,7001,6801,4015,1245,7110,5269,5241,844,670,2605,3138,6208,2252,8234,8010,2419,8599,562,6401,5037,6815,2398,223,8585,5404,7365,443,3940,8691,5251,6906,124,4868,1193,5207,8369,6896,4093,7038,2831,3123,3810,5381,5926,7635,6628,5481,3795,7796,3508,6915,269,5474,6511,4453,6050,7027,280,7750,1963,6603,6054,6411,3257,2299,1861,408,545,4439,7923,7396,2873,3449,6444,2612,359,4333,6398,8210,483,3963,7412,4686,3841,1926,1998,7119,1265,571,2114,2175,5689,8810,3915,6667,5674,6256,3311,4450,8921,1034,2025,1538,8588,8057,4490,4854,4595,2232,8067,8575,5093,1037,4824,1620,6927,1054,4362,3208,4714,4819,744,4627,3660,3525,7156,3904,3956,5994,3373,261,925,4424,1753,8397,1991,3829,3006,4912,5597,8055,4658,5248,8424,5949,7329,6862,4779,6749,5887,5562,8673,8510,3314,3860,1577,693,5908,22,3602,1942,4312,7019,2518,3638,1105,5124,5984,8512,4000,8380,5727,335,1740,1223,2385,2405,2636,5568,8432,2038,8211,1182,3907,8859,2082,2004,8269,6420,4608,4465,2172,8028,3586,3632,8098,7686,2109,1553,4011,1887,3926,305,80,3291,287,3837,4103,8497,3010,1789,6451,3741,3934,5642,741,4441,5296,4148,7953,7279,325,347,8457,6163,1885,5392,6765,217,202,6969,7403,6988,4983,7907,7961,233,7595,7669,4674,6503,2124,6945,7147,957,8300,703,3351,6236,3089,5903,2354,2401,7426,1988,7782,2903,6172,7822,579,3267,6754,6004,4789,369,5550,3363,6349,4580,7094,5902,8256,403,3086,7242,3134,2963,1416,4125,3568,8660,2475,8518,390,6317,7711,487,6979,4618,4356,5554,4968,1124,5579,3921,2143,7325,2536,312,7229,8145,8923,2382,1603,5978,8469,7797,8567,7090,89,8327,1183,1283,3162,3858,1038,5861,4702,4841,2170,6767,6882,5704,4096,2695,7280,7723,5999,6312,7025,252,4521,2630,2767,8657,5717,2282,2275,5757,1865,3315,1927,4754,7624,8653,2993,7698,4427,870,1437,3577,8331,8821,6025,838,8723,4975,4146,5341,5227,1106,7559,842,7863,7544,2322,3439,7727,5156,4717,1523,4894,6835,8,8769,4347,3424,3078,8034,1948,5389,7969,4175,1121,249,8423,5500,1618,4703,1676,2942,1692,7700,1838,3048,7619,6960,8268,5372,3733,7125,3676,5338,8813,5490,4425,3133,2452,1446,8077,7415,4393,4013,1719,3182,8766,2715,7735,7585,2710,561,4579,4288,776,2817,8700,5242,3730,5600,6196,4585,6565,5763,8165,8019,1965,115,463,8043,1819,3217,8381,7332,3531,6932,7972,8402,8459,4898,4047,692,8073,2269,3207,6715,8836,4782,2328,7497,4592,4094,1490,5920,5164,4282,3132,1895,2875,7315,2421,2535,8255,2664,8002,8574,7663,7952,277,5289,4540,8467,8274,7167,5537,7121,2190,5089,3420,2113,1209,2176,7219,4528,4401,1324,1057,8228,7668,1925,4114,5377,2379,6721,885,1791,6910,8678,2896,8555,4806,1119,3557,1428,1937,4113,2614,2427,2154,5961,8149,6157,2060,5264,5036,348,5935,3743,1529,8449,4009,8371,5613,2225,1023,4386,6930,61,8569,8902,3550,1256,3522,950,5220,7793,3659,8752,4530,3909,1533,7364,6845,828,7819,1394,7423,1664,8090,5919,872,2423,3824,1267,5610,5374,6886,398,4220,7214,2217,5693,716,35,5355,7582,8516,8597,5085,4543,392,6977,7839,6222,1006,8039,3256,5411,4179,2131,7367,5157,8666,8284,121,7513,2197,5291,3011,2890,5638,5424,7200,4367,7404,7082,6782,4708,4937,2035,7162,3694,8895,3652,4144,6322,4335,4715,44,2210,3210,8914,8344,4133,7316,7830,4804,4091,1389,1644,7509,2891,6103,2250,8375,8630,2909,5510,7719,1257,4012,2383,7975,573,7406,7823,6042,1751,6614,6199,1631,4229,6950,4966,8832,1746,7815,817,3196,1723,899,5683,5567,1438,2965,1135,4300,2713,8496,7183,8312,2679,7962,1737,6318,749,1512,8739,7259,6508,2307,4429,6936,4253,1253,2163,6344,8262,5656,8759,6341,6730,2549,7411,5331,4132,540,7225,568,797,2146,1214,5663,7744,8533,2253,1522,1288,8448,5109,1747,1058,7560,8260,6446,5590,7569,4271,5217,8615,132,5628,140,2066,550,2625,2000,294,1622,6500,2748,253,1829,1493,5721,4409,218,7113,5352,5020,4165,1715,637,606,7646,8719,4041,4681,373,2078,5113,7382,2684,7193,5385,2969,2721,4284,7394,4917,7642,6504,782,6526,1019,3264,8711,5772,8860,4565,6183,5314,7309,4554,409,8507,8486,4648,2609,6654,1137,8760,5536,4574,8661,454,6367,557,4286,6513,6340,3098,4030,6370,2640,6742,5342,4696,4952,5497,8320,439,6358,1801,3769,4460,8446,1782,3038,6517,1418,2753,8536,6410,4497,7202,2425,2830,1176,6377,1462,456,8236,2960,1639,3342,1280,2218,5321,7978,5608,3820,653,5807,1658,1651,320,2654,3574,6381,2302,6510,422,7728,3063,2356,2945,6082,7525,7691,464,3739,8477,6734,7792,382,6431,6494,2017,8405,635,7929,5071,7856,1243,1436,4813,1080,5816,605,1191,4719,8826,8626,1012,55,4660,2049,7814,5084,8051,2714,1683,5363,7099,7430,4325,8720,1938,8132,7661,8114,3430,5765,5865,6978,3965,4248,4034,8192,5878,6385,1152,2781,2980,2472,892,3385,4118,8611,2316,5898,3547,6587,1426,7516,5884,788,1645,5390,2633,3506,2343,5645,4650,8712,5761,2099,2968,6303,7429,4810,991,986,2331,6650,6825,7829,747,6198,3623,6774,3523,8070,1860,6329,5822,7965,1886,1379,479,1478,1139,2594,799,8249,2241,6868,4737,7717,5827,6477,7,1954,4744,7273,679,8829,1167,7763,1376,1443,1672,7483,5288,5867,2437,822,5750,4770,8240,2481,8182,3233,3426,4481,1610,1044,2745,7666,1154,6252,5121,5981,3344,4746,2716,7115,5769,2809,2705,8079,2887,5623,6061,1563,3681,4215,3396,2545,2265,2096,6037,5601,2122,8061,7127,6443,6270,2604,2737,6863,8576,3238,8903,242,1090,5901,8253,3331,1662,3539,4652,48,1792,1575,4190,2005,6406,7604,5429,5802,2562,2199,1646,1940,2514,2037,6753,5053,1244,7964,6889,7499,8925,4089,7221,3583,8113,4676,6379,8074,397,3923,5572,2910,7536,1765,8247,4643,5585,826,1359,3199,7925,4821,8101,659,2573,8382,4635,8159,8188,3596,7647,4575,1085,3118,7478,5784,2836,525,6258,3802,1867,8360,2650,490,7022,157,4119,1060,5733,6826,6290,386,3661,7014,833,6493,2195,7627,5448,5162,6986,6141,8158,5204,8850,7418,3714,6087,4432,2389,1724,8737,4369,3156,3340,7677,4438,6992,6201,1453,2774,3597,265,7392,7286,4936,3177,1783,227,5820,8880,1,6830,7272,5412,2971,8873,7874,1398,3416,1966,5566,8141,2666,4990,7238,148,8468,7024,5206,6711,3009,7710,4675,5786,4464,4466,1203,7169,3436,5344,1455,3889,8622,3874,100,2948,8831,5128,1483,2231,1931,4102,6057,2626,7640,8655,7176,2517,8146,1875,677,6400,8686,3544,214,1693,4560,5528,3362,7160,6454,3993,3278,4562,2776,7848,5640,5246,706,5245,1429,5993,1812,6872,4524,6171,5714,7955,4447,2498,2283,3778,7018,2409,2876,1271,5145,330,7852,1796,4763,2763,806,6520,1939,6519,1633,4434,3877,1177,2768,8280,4074,2924,6150,1466,8252,1420,543,4056,6481,4098,1520,1763,681,5396,7714,3957,5501,8501,4107,7240,5766,1427,5487,7252,3418,4189,6588,5649,5471,563,5493,209,8352,3618,7455,7821,3016,6543,5522,3108,3598,8916,7436,3107,6394,4005,5073,3352,411,3955,5564,862,1486,3307,7442,374,518,2693,1800,4634,8928,6362,983,6026,1696,5232,1878,7740,984,4606,6854,1232,8086,1793,7806,3899,7596,7321,2479,4718,8535,6582,1399,4176,2780,7862,395,874,6594,2841,6672,63,1809,5654,1109,3643,4777,1673,3163,877,1160,6685,5214,2777,7337,2697,6660,4469,8782,2576,1569,5616,708,8374,2032,843,4075,2579,2128,6169,49,5370,5282,2743,2912,1507,8185,8781,6122,4572,2778,6817,2339,2574,6562,5796,5960,3677,8490,2340,2021,7211,1242,7359,3270,8823,5234,4832,6833,631,7203,8857,8482,1907,6724,349,7832,1471,8173,4669,1114,3823,5846,6106,8641,6123,466,6690,3496,1760,2295,1591,1345,1189,4186,2933,1098,1851,1404,1688,918,4935,1434,608,3804,3235,1178,1527,3938,2064,2694,2665,433,5775,3361,6525,959,1562,6648,5348,8500,5624,7425,7692,247,1337,56,1647,5625,714,5559,285,2008,1025,2447,1713,8045,4670,6,671,1387,5320,1704,1317,5137,3287,6933,5064,2622,1985,7301,4225,8245,3471,125,4376,3187,1874,7990,1827,5795,8103,7775,8033,766,5583,3268,4762,1625,8540,3395,3281,2426,8844,3325,8548,4267,760,628,2206,1547,4246,2673,3811,2557,7496,8160,4784,7771,1511,8874,8929,6251,1123,6207,475,5615,436,5052,7057,7281,6858,7257,7446,5670,4649,4693,6271,1319,3987,6285,90,1308,7781,2092,1741,8546,3894,5336,3830,4683,3131,3501,6725,6752,656,1832,4878,4420,8007,3092,329,3479,3149,6120,596,7866,4467,4081,6375,2806,6963,1820,7333,8068,7056,5976,3079,2187,3096,3335,2045,6284,5171,1397,2378,1534,5655,4245,5923,2597,5675,4972,2085,1950,8430,8000,3791,1802,279,7507,8390,2470,3729,6676,8896,6253,4723,5758,8642,1843,6175,6794,4233,2094,2731,8060,4079,4849,3594,2689,3856,1716,7993,3500,7600,2951,6820,2209,3012,6949,5099,3518,5012,6964,1181,2230,2503,3393,2577,3160,4934,7713,7649,4077,3087,5464,1668,7066,4431,2995,3626,3255,3435,3595,523,3399,8444,3658,3728,1813,6355,6265,4045,1254,4711,1150,3231,36,8125,8027,194,6023,4109,3607,718,4442,919,1918,6709,3099,8341,4906,1733,204,1237,7508,6138,8226,3649,6975,8906,904,785,4080,5192,4753,945,5792,8612,5055,3668,4550,153,1007,8023,3932,8504,3296,3688,1407,1086,2083,3466,174,8722,6738,7911,6249,811,7095,6656,137,8178,7984,8858,275,2125,8186,6534,8117,4836,4926,5267,7239,7302,3944,6311,7789,7400,593,8189,416,3611,6583,1803,4818,381,4531,7002,7503,5774,4304,2918,916,8049,2796,6697,726,8064,5333,3027,5166,1779,2682,3796,4477,7069,1270,3973,1632,6460,5570,3019,6125,6731,4942,3262,2258,7729,6091,3110,1210,1814,8526,3767,873,2970,3240,3454,6345,5165,975,1997,6364,7343,6652,4864,924,4413,5730,133,197,1304,7201,2062,1069,4268,7786,1917,5851,6266,2550,8386,2552,6998,8433,27,1968,6291,3822,266,3883,2381,8776,2063,3736,69,715,8412,6985,7636,7405,737,1073,2930,7079,951,1168,3062,4382,5647,211,6900,2801,5899,1053,2240,4594,7788,6514,1536,8167,7226,4798,160,3897,457,6532,8735,1016,6694,8157,8265,5,6459,6572,1460,5153,3091,4167,2306,7204,5130,6495,8321,7538,5148,8323,7622,4239,1246,8634,5868,57,8163,1230,5687,8753,7515,2522,7861,5422,2984,1326,1110,910,6221,7643,7648,1070,4061,8108,7733,3692,5476,8796,1655,5163,3323,6579,3764,6352,3097,4371,5013,7537,915,7747,7580,968,5364,5862,5270,1684,4874,2469,6778,1833,8142,6865,47,2159,2734,6330,5394,7000,5900,6015,6052,5434,3912,6063,190,4611,2708,7192,7587,5365,4799,588,4786,1247,590,2779,307,8582,2985,6195,5814,3309,1046,5975,496,5916,3460,689,6204,8032,2097,7945,212,5804,5280,6574,4772,5395,5921,6859,3699,4946,6461,4217,4904,220,4301,5431,2234,921,34,2173,8106,4039,3346,1541,8602,4534,2627,5803,7523,4120,2953,5330,4633,8302,4421,965,5284,232,4257,1717,8396,5034,2229,4927,5540,3364,8881,2502,8529,2539,8628,2496,4850,6604,3862,7566,6926,1467,4792,1994,4380,5739,1092,1641,7084,4695,2395,2621,7006,6542,5108,6225,4417,6151,2652,7308,499,6003,8018,293,4828,8200,4387,643,8143,923,6245,1516,7500,2101,1628,6463,5104,3103,6479,861,1331,7248,7981,2160,1409,2433,1421,704,4902,1441,4957,2507,6983,478,244,2885,7709,5512,503,3789,3414,5892,4287,7565,1762,3174,3850,82,7390,1236,2898,5444,4954,8524,8246,4845,8314,3718,2706,8239,7320,4018,5103,8743,5139,2681,5413,445,3045,3781,1974,5290,1666,2296,2986,6623,553,4733,6487,2255,6577,740,8573,1729,3683,6761,1146,350,3516,4072,8422,5349,4964,2345,1859,5030,8292,4006,5584,3184,702,5877,6947,1657,4511,2270,2998,3271,7999,1417,7371,3000,2902,4920,4152,5297,5800,5466,7378,7450,5356,3302,890,1298,8097,8474,5686,6607,5462,6622,548,3109,6139,270,5968,5457,3920,6615,1900,5595,2685,2645,4564,4748,4949,1583,3978,7026,2565,8168,1585,633,7702,4458,7111,5435,5666,3542,5945,5992,2543,4584,5943,1051,4059,3984,3713,2677,5783,1661,5210,537,5205,5810,1708,7346,5677,3332,3431,8658,8025,68,7940,5889,5931,139,3484,577,808,1435,8688,7174,5652,142,2127,8587,3369,1364,1883,3170,5438,41,3624,2844,7581,7298,7463,1032,2138,7256,4355,7977,2871,1920,2997,1327,4065,2393,4659,5014,2260,4236,1549,5427,2690,5387,723,8547,6973,4527,2839,7644,971,2482,4788,8708,2108,3224,1892,878,7784,6238,4890,1611,1259,6006,1107,2011,1021,5866,771,3200,2950,4048,6554,2086,3308,6160,4569,2784,5667,5581,8545,7269,1424,6683,4116,7153,3337,3655,3084,440,7303,8503,1674,5974,492,1678,2544,4145,2655,943,6433,961,7935,1166,5530,3827,3761,5720,165,375,8471,2120,442,498,1411,2827,81,6308,8662,1573,6250,5116,5008,2090,6824,2490,2696,6568,6921,4616,6268,6471,7529,8394,6316,858,4509,881,6784,1336,6049,6442,4316,3641,4315,7468,6113,4323,725,3745,5313,7591,7676,6943,2791,173,3622,6414,7060,8911,1504,3236,4655,7330,2396,3246,8286,6948,8556,1142,5716,1233,4602,222,4423,8795,2582,7116,2186,7512,1992,8912,4498,372,4181,2266,3180,2575,762,8301,7628,3128,6560,6112,5237,3442,3573,8775,5191,7460,4706,6861,4385,7313,6496,819,3666,2761,1375,6925,5332,5809,4680,3817,1015,3999,6008,1369,2375,1556,813,309,3636,1204,3407,5957,8035,973,1550,7543,2476,8866,5883,345,104,1026,7314,8229,8179,7738,8756,1315,1982,3017,8419,8289,4261,8190,6540,1075,1412,5617,2012,131,8683,3662,883,644,5091,5671,3457,1725,6566,3903,6274,7370,6728,3854,5470,1919,6618,1825,187,77,4207,8713,516,3185,5808,4921,7489,3859,4597,5143,377,1365,745,6384,6353,6696,1574,8099,5190,4767,2931,5669,4619,1705,3215,421,2564,988,1935,1732,1798,3360,8571,1690,2118,894,4470,1463,17,6994,2324,3381,6092,29,3428,5369,781,3437,5194,2829,1933,1217,5665,3453,4503,388,8088,954,3972,7573,7331,438,1261,6640,4273,4428,3155,3117,326,5353,5573,2783,6453,2946,4406,7886,8771,7966,7639,6213,1558,2243,8329,3018,4364,6162,1477,5715,3057,5226,3114,6644,3886,3644,8367,7040,6665,8838,5373,8154,1066,5706,2145,1056,2943,4127,7011,7300,6283,5022,7454,7824,7787,6013,6368,7283,8349,2772,3008,7492,8351,888,4076,4052,7134,4526,66,2093,2198,7887,7634,3797,5609,7598,1781,431,804,5079,7739,385,1990,4483,3410,8862,5592,6684,3776,6691,8502,6509,8407,8213,7857,7417,7109,8563,228,6315,7374,4210,2792,6866,3746,5598,5133,3770,709,1922,2759,2785,1340,3458,4677,3181,6205,733,5987,7558,7779,120,4800,1362,5713,5858,3818,1335,936,3321,6599,4962,6605,7610,2700,1226,7013,7556,3178,399,8784,3448,6671,3813,3226,5631,2268,91,1944,3487,6233,2556,7800,8632,610,6310,1241,1735,6018,2348,6065,680,2648,4504,6334,7606,2292,2631,4803,6445,1768,4340,2022,3566,6275,1095,272,5932,3716,5125,5298,1291,3486,7023,2669,4607,1758,5549,6984,5111,357,5934,226,8745,7398,7987,7831,5972,5621,2334,7707,1487,8499,3239,3617,2420,3808,913,3509,3474,4631,8094,6901,5240,8270,3447,6916,4797,1916,5893,3329,4137,569,1461,1333,1848,4403,3981,7306,65,8452,5988,4918,964,5529,3614,2303,7466,2719,2610,5589,5749,4678,3798,3417,3794,2906,3650,185,1329,8887,4755,2212,940,129,3625,622,6434,3348,780,32,8095,154,5063,566,2825,674,3540,7920,150,8005,574,4600,420,7323,2800,4672,3168,1068,3809,3283,1401,7212,413,5357,3773,2521,8684,1205,1285,248,8021,8017,6286,1532,6621,7092,871,2515,1745,2723,4875,7051,2992,3711,2434,4815,7785,4322,1464,7052,7841,3294,3590,1093,4390,7568,5986,327,2911,5691,1852,6242,1604,4251,2661,8685,1363,1495,1071,7015,3273,6682,2967,1910,722,1108,8291,3609,2861,362,8647,304,8451,7182,5316,735,1036,6821,1055,5142,8217,3538,6876,3388,240,2467,1078,5837,2489,4474,2667,130,1011,2333,5518,2486,6232,405,7362,2059,4051,292,4330,2922,7593,4577,7864,4283,2687,6651,1913,6890,667,6629,4847,3616,627,5996,1524,2974,1281,5777,231,3994,2952,935,1898,8053,2222,435,7187,2855,3520,3070,1866,5228,1981,7216,4395,1911,1188,8492,4512,8709,5542,315,3916,5850,5082,400,3320,7118,6899,4958,6417,8076,7285,5637,7545,5513,391,7197,7222,7488,453,2412,8437,5216,5948,2989,5325,851,7783,1355,8890,1330,3997,3647,4042,2079,4773,5521,981,4258,4226,7799,1228,1667,7413,7818,221,1354,8674,5147,2193,8703,4657,5406,7542,1282,2370,1227,1206,3147,4891,1494,85,2733,7982,531,4445,6450,530,5397,4147,4795,6118,1405,4943,649,4141,7237,1830,7372,8080,6254,1941,107,619,6124,2402,5183,2812,3792,5408,3911,6413,4870,7039,5818,8690,7074,4801,425,7271,8748,278,3272,4679,4055,5060,3974,4583,8623,2310,1390,493,8640,4389,7541,2851,5120,8127,6280,7123,1808,128,5681,5196,5849,2213,8532,3334,2332,5426,6130,7208,6178,308,4930,7244,8909,2460,7041,4328,8220,4244,3732,5806,3032,3927,5380,6293,198,7340,4410,2607,546,6392,5753,7267,8800,4289,7020,3852,6601,5829,4455,8770,2811,1958,696,3203,6764,8294,1262,906,8442,539,8109,4135,4279,6523,5158,86,4668,3022,6619,8687,5759,5688,7435,6634,5699,864,5420,4250,2168,7878,7623,6714,468,5577,8258,8318,3751,1406,8580,6261,2858,6056,6716,7548,3790,7431,7366,3251,3532,8541,1396,4156,6756,2698,4136,6012,5778,1560,182,929,3563,4241,2277,6689,2488,6412,6489,4661,4256,1356,7480,5051,7974,5182,4609,3159,7093,784,7148,541,3112,7597,930,7584,5755,7673,3482,5752,5110,6533,3493,4553,4520,552,2893,7349,2325,5180,8664,1864,7865,4790,2868,3784,2680,2657,8209,2966,3871,2973,410,106,1260,3481,8646,5940,6966,4501,5756,2112,7334,6736,1346,5159,7767,4476,370,5040,6164,8728,2884,2707,321,2533,1287,4895,8714,5770,5482,7053,118,6903,6240,6758,8644,5323,3933,2798,3152,2593,6473,3788,7297,8608,1877,8041,1784,4665,946,3169,4948,4546,5515,6744,4252,738,3851,1598,6075,3553,3630,7476,7930,20,508,7517,1452,2436,2091,3313,6653,4174,4123,4614,3004,7004,8865,6551,6788,2223,5399,186,2171,6548,6194,7528,3269,5622,3444,944,4478,5906,6524,1839,2793,6792,5970,4886,6842,4929,7860,2525,5869,952,8592,6993,3913,3494,2869,1402,4977,7080,6789,8065,1017,3805,7493,3450,6427,7465,3667,3230,4843,651,1896,67,4872,7470,996,4722,6403,642,5402,6255,1286,1234,7433,2816,5768,7146,3377,2641,8319,3284,5169,3537,603,1134,8801,3401,2338,2386,3055,3158,2915,5897,2878,1834,8072,4601,8096,2136,3316,686,816,2987,8038,3223,8665,3646,5855,3306,2787,6039,1702,6657,5401,3554,8824,4329,1229,853,1806,5041,6811,96,4095,6860,2999,2439,3639,2639,5308,5167,6632,4407,922,2449,6828,7520,1338,1627,7464,8542,8851,7989,5780,5971,7703,3928,4519,5787,5951,2281,1104,7043,2649,928,1447,2284,3164,2330,1083,5874,10,7393,2516,6779,7748,650,8473,5705,1584,2628,1961,585,8757,641,589,6680,4833,2756,3261,4588,7108,6688,5888,2458,7732,4297,3510,7626,3386,1005,5149,5997,840,7928,8485,4028,6723,164,2760,5458,1535,2191,2318,237,2834,2674,1344,8056,7754,6202,4158,3341,825,4835,4060,4492,2724,2741,7946,4078,763,6090,5327,6739,4542,2407,555,5538,6627,4513,3561,3873,5962,7380,8733,8600,2417,2450,6584,4443,4023,668,1489,2464,2600,5198,4541,171,753,2009,4169,4334,2019,8435,4307,3422,8147,126,7231,559,4880,905,2286,8620,3526,1967,1599,926,3421,178,3456,1185,8570,3821,3505,7678,2914,8254,4671,1381,4826,2527,4153,3560,4303,6592,18,5743,8006,5150,8562,889,1266,3402,7514,2461,1292,1445,3419,5494,8697,4155,1755,3219,4004,6079,3893,8741,969,4100,3793,3866,4829,1348,5576,4285,5430,291,8852,4071,3485,1476,3429,8764,5016,3953,4196,3990,8566,6229,1908,1956,5532,4684,8215,695,3673,6953,6852,8282,7641,3503,6436,7397,7399,1451,447,5947,8399,8513,8353,8531,1097,8428,4446,8058,6874,4108,316,5208,8398,1048,3144,5276,3535,6101,6989,2932,7410,8310,4274,8003,8436,8742,1024,7941,6668,3695,3285,6781,2392,2117,2955,7474,7266,7506,2152,1576,6326,8871,2279,7901,5633,8534,6371,3286,5002,3881,3411,6418,591,814,6573,7777,5467,6907,7312,8920,5475,8413,1141,7971,7275,3151,3543,4205,2925,7951,8650,5517,7140,7070,6898,6060,1342,8311,8908,1357,295,5678,6968,7762,1742,6538,8537,1764,8373,7046,4388,6505,376,1828,2854,6428,4185,1770,2647,2203,3565,1775,2580,6635,8807,4358,3173,1161,3937,6076,3,5265,8710,3528,6698,1568,898,5738,8410,3665,1841,6423,7452,2602,4227,1540,2204,4293,1162,676,660,1311,1469,3472,7304,4905,6035,3585,5201,4732,1943,4263,6576,7539,7980,1050,2036,728,6131,6499,3279,7042,620,4871,2435,5449,99,3645,6347,7128,7236,6649,6522,7736,8089,7142,152,6391,8898,1064,4822,2979,6745,4314,618,7083,1040,2510,1984,2400,4270,8388,2305,7241,3497,3576,4105,7262,3766,8279,8416,8636,14,4548,6278,6564,3376,1545,6729,1771,4433,2098,267,1310,2042,2588,2424,8155,2853,1300,3698,6051,448,6094,5694,53,2567,264,2024,8174,8879,8272,6426,3723,8731,4201,4247,558,8361,6902,7651,5465,2659,7690,6929,7265,5551,135,2014,6010,8633,8543,6908,3076,3627,5415,4311,7384,1492,1726,4739,6399,3074,28,2194,3378,5061,724,3389,7482,2528,2055,7776,7490,7277,6145,634,4529,452,6777,5271,6732,7324,7445,6210,11,2632,6485,5712,993,2883,8139,2603,2116,1014,6814,1587,6813,6909,8897,7037,7383,8872,414,314,3910,4603,5648,1593,1637,6710,1013,380,4641,3845,1976,3900,7718,2422,1213,947,2374,7867,792,4980,7847,2623,4859,4851,2671,8464,455,298,4216,8682,5215,5293,2052,3738,2403,6924,3986,6343,7765,2509,2905,3358,3514,3073,3592,7029,5831,4064,7181,2377,3905,3370,259,3819,615,6189,4687,6904,7063,2007,6393,1721,6606,7152,636,4392,7904,1179,5918,2391,3721,5958,7369,8151,6466,7178,3295,2799,5005,5574,3843,5186,7616,2592,3502,7575,2819,8907,2908,7871,5828,801,3064,4237,8816,7150,4339,5710,2274,1081,2863,8833,4255,2031,1653,4488,4941,8152,3443,6785,8425,4418,7274,4882,2027,2020,3991,1934,2365,8358,4644,6951,3148,7611,5223,2923,2162,5643,4157,5087,5088,4172,3356,2148,2133,1180,6097,3350,4586,721,8885,283,3140,5603,7891,7154,7838,4969,7448,4888,2754,4757,1432,4058,6475,4571,2842,1880,3067,7336,1074,7061,599,1709,7868,8214,3165,5754,3980,6641,6357,3130,684,8772,1822,6702,5963,3765,3146,1322,5502,4337,2406,389,4664,4741,4377,4235,6662,434,5794,4383,4024,8333,236,5065,2936,6701,4221,8675,6078,778,5847,1041,1817,1009,3023,8463,276,3290,5593,4885,3555,8610,5602,4830,6674,507,3007,7773,3221,4999,1901,1863,2276,5933,1776,8363,3705,6737,3562,7391,141,5511,6848,8886,621,8671,3669,7809,6325,6971,3171,3357,5235,3406,859,7218,7498,7697,3753,8434,2978,5896,3898,1250,5924,7552,8337,2886,6064,6867,5359,7034,1757,2976,4605,6911,4861,705,3380,8387,1347,6467,5255,8037,6659,3214,3060,5779,8487,6881,319,6359,911,5403,92,7583,1457,7675,6146,3106,1307,4398,2466,6796,8230,4994,1794,4276,4591,5418,352,7656,7408,527,4578,2211,6798,7657,5114,4452,7828,6958,5172,3785,1634,1858,8400,4290,7660,4416,7292,1510,4168,529,1221,8172,7954,1001,739,7519,1088,8875,6875,4087,39,3050,1468,358,7414,3975,4264,5773,8625,6134,183,1804,8618,5696,3799,3672,2634,8679,4701,6856,5498,847,8087,7055,4306,7389,2764,2523,5478,8624,4620,6376,2323,860,7199,8304,235,7295,234,5423,6440,5455,6011,5141,384,3664,4535,5218,5737,5384,1987,6214,5709,3461,3964,6260,990,8276,1797,2571,7983,2717,648,8092,1572,8511,7290,5200,8066,1456,5026,8133,6693,2319,6700,1061,7927,2512,4173,821,4775,4019,2686,1727,1623,3848,2471,1514,4884,3930,2355,5454,7899,7175,2534,1744,2261,3085,7908,467,6642,103,3336,3541,8084,251,6464,6153,1663,4296,366,2701,6972,4923,4924,5630,774,333,1871,3750,6114,7282,1870,1484,7101,2202,4805,752,5047,1403,2900,565,7903,3135,8307,5781,317,6342,5029,3512,1187,2028,8681,4612,1669,3954,3404,299,5742,2832,4673,8392,5152,4354,5106,2183,3372,6870,5292,2803,580,786,1391,3640,6726,1328,1835,2121,6884,4956,5569,6380,7554,7957,1350,8343,1687,1786,1557,7062,682,1947,7350,432,2314,4973,2848,6722,8111,6027,1899,3056,2929,3988,424,1115,852,1975,4069,5799,7897,4,4510,5791,5080,519,7100,7997,7161,7338,3702,3962,4997,6045,5864,2068,2376,2675,5520,7614,2015,8922,8196,8336,7967,3071,1805,2134,481,953,8774,6058,2144,8553,8462,3552,2034,1029,8063,2546,1430,2559,1028,426,216,1448,7149,7402,2208,538,7505,8267,5311,2670,6832,6766,7344,8568,8022,3572,1613,2440,3475,2961,4182,4916,1888,2431,7102,458,3186,7998,7578,755,2153,5726,6071,3469,501,7159,1698,8197,2561,4647,4570,6934,2300,2130,2033,311,337,5644,7699,4117,6074,5057,5857,931,7939,2663,7327,1957,4435,6795,5281,4766,3885,8520,8001,8334,2585,8283,5066,7376,3243,2442,720,7097,3757,6557,8222,3727,1996,3081,3066,2242,3391,2720,8460,5268,2429,93,7655,1695,7139,5682,2852,3359,8581,7749,3465,5547,1659,783,360,4305,2548,3619,7032,2736,3882,60,2446,4623,7764,4709,1169,2248,1377,8148,1670,8004,960,203,2201,4756,7577,4862,5679,1303,1849,742,5646,6019,6095,1076,3812,1548,3049,3102,3887,759,5006,3029,6351,2413,7902,4463,2315,2729,1614,506,1785,3686,8408,7328,8472,4976,6616,2662,3241,7263,1174,6501,6679,5885,2256,5488,3740,4557,3839,6593,6132,8696,8648,7098,6073,7759,2156,1258,8488,8075,4863,449,2862,5685,7230,6296,4001,4953,7377,6597,897,7625,3982,7725,4630,652,6387,7456,8525,1200,1145,2599,1366,7551,5238,7339,6717,942,5745,4582,8348,5561,3392,1846,3129,2151,598,361,3451,4809,2048,7532,5563,5797,3587,1567,7075,3710,379,5927,4332,609,614,4128,7743,3613,5472,15,8455,7205,3212,5928,4378,1284,4604,3003,6043,4750,5718,1537,5954,6188,4366,4029,6408,5969,3093,5151,7322,1043,6878,5068,4765,4084,3434,7662,992,5400,4292,2554,7033,1450,3948,3880,2326,5361,8804,1546,7511,7659,6432,4177,3427,5094,7592,2730,3936,5343,2495,7165,1231,7245,7996,640,3606,8812,4218,5236,4277,8116,2329,8523,5155,8656,4873,8554,6177,7760,4344,3197,8845,2775,1521,4769,2608,7842,2030,78,4040,6692,4206,4598,2526,8654,1255,4187,2288,6670,210,6324,3191,2704,3058,3172,4480,3682,7681,2578,8219,8328,4184,4126,1929,7138,2384,4625,1196,4646,3244,1699,8441,6747,5785,3815,7318,8528,4632,8110,2366,1682,7030,2188,75,4720,2228,7877,1140,8347,2957,4865,8453,1094,4848,116,6561,6831,8565,3125,3653,6780,2824,8854,7916,2920,6857,7685,146,2994,2147,5346,8847,3319,7416,7196,5303,6687,4909,1795,4986,4899,7695,1810,2361,6851,575,895,7715,6879,6430,1889,4721,1767,5801,4010,7103,7812,4590,1351,7671,1570,2757,5659,6292,2742,8458,3276,5075,1949,4622,297,2859,6877,6348,1962,8505,3120,7798,6808,1000,7276,3902,6458,8843,1305,556,1433,2071,4278,230,8042,8326,6571,207,8225,3061,4038,5405,1554,7909,6033,4008,7475,5261,122,6888,5854,1640,8376,5891,7601,1112,2397,5519,3800,7166,1638,23,6807,893,835,1559,5836,5161,1118,7158,6390,3952,8131,1130,5335,7326,8257,1824,1491,5904,2074,8409,8521,162,6805,2540,2683,6339,3136,932,3979,6227,2057,3917,4280,161,5825,750,1128,76,3600,5734,1235,6892,6107,1022,8238,465,855,401,2795,576,6148,5132,4068,1306,6837,547,4903,4031,2508,5485,8846,2940,707,3190,8758,1431,105,2596,1592,9,7943,3252,167,8251,6128,6320,8107,219,8590,1923,4639,5170,6847,1743,5925,2304,807,318,2364,7386,3305,3495,2493,2178,6200,127,3816,3985,3551,4327,7449,5842,5922,4349,3033,208,3145,7633,8917,8205,3511,1718,4705,6267,3054,1216,1850,7608,1290,7913,6563,5184,4194,1528,1601,697,3679,1186,4214,3218,3580,2013,1101,8271,1608,1220,5138,3126,3724,1750,6048,2725,5067,8278,5661,4991,5845,1190,6482,756,5309,246,1323,7638,3483,7890,7409,2541,5516,1600,5371,5274,4793,2084,2938,732,6707,4142,2937,2249,5305,3339,6161,3865,1509,3489,1847,8466,6068,8119,8104,5286,2297,7553,7549,7724,1225,4326,734,7379,7188,5664,7521,353,3620,6827,917,7317,1635,6059,875,8313,6613,3697,4758,4066,3476,4178,200,2123,699,5607,3849,1597,474,3242,3052,3301,712,5350,6553,4825,6017,6219,6404,770,2770,5107,3080,8305,151,4839,5676,3446,2445,404,6215,7352,6243,532,4596,2954,8287,2589,4545,437,2611,5838,8263,367,5946,7942,2866,7737,4844,3768,3752,155,8549,4070,6383,5731,2991,6940,3390,5735,2826,2860,3398,7617,484,4003,6748,5890,5606,328,5701,5249,5672,3333,3534,1378,4840,6462,7048,5038,3249,5744,4046,2107,7190,8704,8727,1862,7772,6158,1826,4219,4716,6066,5805,4505,8861,629,4573,1519,7050,257,8889,6883,8689,7603,2769,6549,3556,2947,13,2132,846,3515,1372,3312,5626,8362,170,59,339,6470,5117,2983,845,4857,8868,6007,2810,4368,3685,4940,7579,2003,6335,2702,3408,7755,4160,4808,6083,773,823,8036,522,2531,482,7888,600,5977,6498,4547,710,4232,7010,8820,2581,7910,2678,7801,6424,3394,8550,4338,4907,7963,3929,7136,3438,3946,673,2857,5856,5368,730,6703,3712,2738,4507,7882,2845,6913,7960,201,1386,6529,1605,3581,1766,7620,7805,8539,1671,8164,8799,3113,1239,5252,3709,646,5789,7758,6484,4154,2087,4931,8901,7588,188,8335,4736,5582,3690,6955,1143,8725,1979,985,980,5312,5684,415,1380,1198,6244,7486,787,8044,5222,7991,611,8629,4397,2644,7117,4499,7438,3591,2813,1513,7683,1065,6206,4688,5915,4685,7919,2595,2782,4381,7353,909,7708,6230,7896,6630,5322,8233,666,1799,8876,6305,5310,1517,5275,4275,1367,1158,2744,7645,30,6478,3914,3906,4576,3983,2047,3935,521,7741,594,4345,6539,3762,8811,2182,8918,3771,7571,6044,4043,6402,6197,6787,2615,1138,1960,4858,597,2368,6996,3384,4057,2357,6180,7731,2537,7186,4653,407,7518,238,7948,4667,6070,5173,5042,2388,504,1072,4459,5966,1589,949,8734,8631,6704,1681,2468,1906,3657,6636,3455,1122,4517,4971,4487,994,2205,324,3680,8527,5056,6970,2519,4816,6129,879,6869,8266,5090,6733,3888,6871,4161,4451,8332,6126,3780,6727,2224,6084,6793,1773,2485,241,3206,7354,6053,8385,802,2820,4749,6237,564,5863,2053,3832,2833,3035,4461,4394,5115,7144,5650,6166,3024,4998,3530,7089,7883,2762,1031,1629,6595,6555,8081,8465,2846,8828,5941,5979,5122,1738,6421,6137,4049,6818,793,7734,8572,2956,688,8491,5486,2818,2320,4468,4016,665,6775,7287,754,8227,7233,795,5668,4651,3571,7834,1439,5815,5459,7926,4759,8299,836,7215,5179,3001,4593,4295,7184,8031,613,4897,7017,4707,757,3139,7995,8718,7194,6246,5077,5069,2043,1904,5225,2016,8693,2749,7667,6333,8020,1959,534,6203,7912,5692,7016,8883,8676,70,8120,8787,8166,8888,2711,6981,8814,7712,8506,4372,5611,958,6154,3604,4321,1736,4731,514,2061,302,8481,7501,4112,4025,6263,7021,880,5620,4729,769,6336,38,1332,4981,2070,8899,7816,7112,1837,7131,8126,7956,71,1479,8736,6144,6047,24,1853,727,8046,3247,8837,5409,3260,3470,4348,6231,1936,3175,5703,7254,812,4122,8264,7440,1503,21,3575,5839,2613,8134,5991,95,6287,6021,1630,4621,4202,1312,1063,2821,8221,5174,7467,7126,2856,8406,6382,2076,2500,4944,7007,5019,7869,6110,6806,655,2727,7347,978,4067,3433,1082,5131,2758,8692,1544,2478,7420,4083,4500,6257,4359,1159,7607,8130,5049,4191,3467,8029,2804,586,505,6841,5558,719,5175,5043,8475,7462,4776,2039,4846,3216,7917,6474,6751,6332,3833,6800,7345,4638,8834,8578,3863,5764,1224,1414,3569,6695,3382,8426,2629,1091,6085,7893,4310,8100,2430,914,2264,6192,5083,2451,572,3188,6956,6626,8560,1649,1712,7172,7629,5070,3924,5790,5578,683,5853,2837,113,8538,3754,1626,5548,7599,393,3250,3094,1117,8878,4893,7687,8368,1030,7088,3355,3480,8439,4502,4947,8559,1277,884,7618,3875,2570,5187,4691,213,7130,5882,4195,4780,5445,8864,6708,4318,5098,8479,8695,3570,2337,7778,5604,6706,5189,5024,6086,4771,123,900,4817,2972,4032,2959,3330,1983,509,406,1515,58,6962,5634,4209,4007,5793,8456,3412,4342,2075,2313,6191,4449,4581,7358,4343,1530,3137,5531,2751,6769,4922,6507,7880,7895,2263,6853,2975,8203,4262,6675,8121,402,4842,6005,2981,1571,5009,3704,7757,6176,8170,4341,2454,4164,8900,5917,8639,8768,1279,3533,8643,2586,2349,6891,6923,4495,427,5135,2226,469,685,2455,912,970,1201,2505,3970,3425,5463,3651,1077,4910,4002,3193,6441,607,2029,6939,8261,7180,4995,8024,5326,3840,6127,6323,8350,1566,6147,3046,5746,2106,2463,8905,8102,8498,4491,4022,2462,8750,5767,4617,5441,1612,7072,5539,2373,3349,7694,2935,7833,7220,8635,1125,5185,7145,7471,8930,6590,2558,8059,262,5605,156,4690,2081,8613,2105,8877,3584,8558,1621,638,6961,2046,7395,1689,2494,955,3803,8483,1914,8169,6809,6873,7937,6099,5711,1777,5483,7726,2802,1067,5942,1274,7473,7012,6770,8519,3814,6982,1697,1823,5375,1089,4725,8617,3787,6669,7307,4551,3124,5723,2184,1565,3122,4456,601,891,8162,4228,6239,8346,8356,6750,2115,4856,8672,8431,5852,101,3737,1238,5580,3992,6486,7258,6455,3857,7533,4855,6211,4331,3041,7870,7958,5509,2547,5277,8202,7170,2236,3119,907,3468,7137,2901,7531,8663,5473,1444,6346,8839,2917,3293,8124,3950,5844,6937,7363,7291,1551,7879,7481,5382,4663,8224,2311,2415,5129,3026,3835,7432,6111,6558,8414,5830,4751,6547,4837,193,8140,225,7439,4896,4352,7135,1945,2865,4514,7658,8598,8919,1953,1423,3601,2944,8391,4814,5534,1756,5050,8744,7457,341,5698,8198,2789,1144,7898,7986,1893,5834,2491,2692,3959,6849,7261,4689,3861,1129,8740,195,8014,4697,3101,159,1816,3548,5911,4026,662,3593,4444,2254,1148,5447,4360,7693,284,8614,5514,7938,3519,3734,2001,7931,6637,3413,2072,6448,2336,1173,6743,3051,6545,6575,8384,7120,5952,3452,7889,3499,863,4384,8183,4437,2414,423,8093,2822,1475,6720,441,260,1555,526,419,8894,1485,5586,4400,2794,2185,3637,6664,6598,3077,8153,5506,3919,4636,6096,3082,8827,1999,2790,8438,6914,4734,1518,1042,2497,1881,2722,4515,87,356,2459,6677,2728,8509,746,5817,6100,7243,3949,2418,3707,8176,4124,2167,3115,1458,6173,5660,2894,6719,1175,7375,1008,3053,5160,6133,3870,7388,2438,6468,1845,4992,6763,8802,2740,512,630,8494,5126,5833,368,6288,2850,8825,6000,789,4988,5347,2441,4365,2353,2399,3127,6429,535,286,4831,1854,5260,956,4149,2362,72,3265,6117,6437,343,4516,8606,4402,803,4448,5546,6168,3167,4558,1701,999,5345,7299,948,4462,4211,2262,3405,1590,7794,254,1127,6552,6790,2513,2051,5451,1212,7234,2346,136,8187,3189,7567,2080,7168,7881,5760,5362,7885,8112,5450,8315,8011,5543,8493,2321,2646,8609,4764,4134,3195,5912,8785,7036,4640,4525,5985,4796,3220,2010,3578,5826,4587,8128,8250,3374,6476,3368,3648,3228,5725,6760,6281,2246,2864,2287,654,3971,4961,8840,4523,1502,7688,8773,3756,6570,6488,7827,6666,6121,8730,5001,1400,3445,334,4945,7524,1296,8040,3951,5956,7722,1111,6812,8863,1856,3166,6294,8325,1126,5076,8290,1157,544,7670,2180,6624,5213,6596,8924,7031,2390,6974,664,7605,966,4713,6631,7761,2598,7495,2088,1297,175,145,7701,3559,8694,6776,8330,7696,3037,8706,4166,2964,6880,4199,2237,7843,1884,3701,2773,5612,8586,2726,1156,3779,3838,6156,3599,3891,6067,7682,772,941,6301,7774,2524,4223,4726,3403,3715,4222,8869,6226,6331,7742,4426,7914,8803,6469,8637,7064,595,632,4710,258,6264,8417,2624,2443,6224,6407,7003,2584,6518,8285,6639,7107,3477,1607,711,7246,8515,8050,5140,1343,3047,4200,6569,418,8765,5112,6269,1980,3960,849,1368,1579,7689,6193,6757,3774,3706,6995,5618,166,1002,7859,6589,1869,3229,4522,1774,5657,4129,7044,7381,5964,473,5178,3194,5662,1615,764,8421,4230,1891,8842,5393,5907,5304,4559,7522,5262,176,5095,1116,8403,560,7944,5503,83,3828,2569,4363,5432,4532,6802,2653,340,675,3654,5011,4589,6919,8357,7171,4414,111,570,4411,3324,4761,8724,7185,8415,1506,4140,2566,6530,7590,7077,7250,119,2542,4422,4552,5880,1480,6490,1294,4745,4351,7594,1594,4913,1679,7224,3100,5287,5360,7807,3259,2788,8583,6140,1894,322,6946,1539,8180,6360,7251,7078,4974,5096,869,6373,5748,4985,3693,5690,4982,3353,3671,7335,2808,1752,1731,7342,8786,4932,549,815,1855,191,2135,7906,417,4180,1385,4967,8216,6531,1449,8359,6810,7752,4353,3545,4249,6080,987,1616,4082,7278,6272,4555,2732,5552,5032,5388,2504,5740,1921,3853,2215,8778,5003,8016,6920,3529,1543,5329,6072,1840,2676,8324,4088,856,7487,4159,8699,8298,5407,1165,364,6159,7071,181,4794,5894,3742,8867,6887,2587,1675,6182,5697,3588,8378,3065,7289,3025,5939,7790,8761,3432,8156,2555,500,3605,7151,868,4549,7058,1703,5453,8138,1155,8638,6713,177,8401,1020,2656,5524,8717,2285,4694,1686,1269,6465,8508,8248,1314,143,6135,5027,4727,7387,8129,837,215,1482,6262,7348,3375,8698,901,3015,4291,1199,8015,2797,4027,3610,6187,2044,5195,6365,6839,6638,2620,5910,4350,2904,8551,1951,3327,7586,1787,8651,2251]\n5635", "expected_output": "7", "task_finish_time": 1681356707641, "total_correct": 39, "total_testcases": 45, "runtime_percentile": null, "status_memory": "N/A", "memory_percentile": null, "pretty_lang": "Python3", "submission_id": "932840403", "status_msg": "Time Limit Exceeded", "state": "SUCCESS"}}
{"code": "\nclass Solution():\n\n    def beautifulPartitions(self, s: str, k: int, minLength: int) -> int:\n        \"\\n    You are given a string s that consists of the digits '1' to '9' and two integers k and minLength.\\n    A partition of s is called beautiful if:\\n    s is partitioned into k non-intersecting substrings.\\n    Each substring has a length of at least minLength.\\n    Each substring starts with a prime digit and ends with a non-prime digit. Prime digits are '2', '3', '5', and '7', and the rest of the digits are non-prime.\\n    Return the number of beautiful partitions of s. Since the answer may be very large, return it modulo 109 + 7.\\n    A substring is a contiguous sequence of characters within a string.\\n    \"\n        \"\\n    You are given a string s that consists of the digits '1' to '9' and two integers k and minLength.\\n    A partition of s is called beautiful if:\\n    s is partitioned into k non-intersecting substrings.\\n    Each substring has a length of at least minLength.\\n    Each substring starts with a prime digit and ends with a non-prime digit. Prime digits are '2', '3', '5', and '7', and the rest of the digits are non-prime.\\n    Return the number of beautiful partitions of s. Since the answer may be very large, return it modulo 109 + 7.\\n    A substring is a contiguous sequence of characters within a string.\\n    \"\n\n        def is_prime(n):\n            if (n < 2):\n                return False\n            for i in range(2, (int((n ** 0.5)) + 1)):\n                if ((n % i) == 0):\n                    return False\n            return True\n\n        def count_partitions(s, k, minLength, memo):\n            if (k == 0):\n                return 1\n            if (s == ''):\n                return 0\n            if ((s, k) in memo):\n                return memo[(s, k)]\n            count = 0\n            for i in range(minLength, (len(s) + 1)):\n                if (is_prime(int(s[:1])) and (not is_prime(int(s[(i - 1)])))):\n                    count += count_partitions(s[i:], (k - 1), minLength, memo)\n            memo[(s, k)] = (count % ((10 ** 9) + 7))\n            return memo[(s, k)]\n        return count_partitions(s, k, minLength, {})\n", "status": "Wrong Answer", "reward": false, "info": {"status_code": 11, "lang": "python3", "run_success": true, "status_runtime": "N/A", "memory": 0, "question_id": "2569", "elapsed_time": 11005, "compare_result": "01100011100100001000001000000101000000000000000000000000000000000000000000", "code_output": "4", "std_output": "", "last_testcase": "\"23542185131\"\n3\n2", "expected_output": "3", "task_finish_time": 1681356743787, "total_correct": 10, "total_testcases": 74, "runtime_percentile": null, "status_memory": "N/A", "memory_percentile": null, "pretty_lang": "Python3", "submission_id": "932840624", "input_formatted": "\"23542185131\", 3, 2", "input": "\"23542185131\"\n3\n2", "status_msg": "Wrong Answer", "state": "SUCCESS"}}
{"code": "\nclass Solution():\n\n    def splitMessage(self, message: str, limit: int) -> List[str]:\n        '\\n    You are given a string, message, and a positive integer, limit.\\n    You must split message into one or more parts based on limit. Each resulting part should have the suffix \"<a/b>\", where \"b\" is to be replaced with the total number of parts and \"a\" is to be replaced with the index of the part, starting from 1 and going up to b. Additionally, the length of each resulting part (including its suffix) should be equal to limit, except for the last part whose length can be at most limit.\\n    The resulting parts should be formed such that when their suffixes are removed and they are all concatenated in order, they should be equal to message. Also, the result should contain as few parts as possible.\\n    Return the parts message would be split into as an array of strings. If it is impossible to split message as required, return an empty array.\\n    '\n        from typing import List\n        if (limit <= 0):\n            return []\n        if (len(message) == 0):\n            return []\n        if (len(message) <= limit):\n            return [message]\n        parts = []\n        num_parts = (((len(message) + limit) - 1) // limit)\n        for i in range(num_parts):\n            start = (i * limit)\n            end = min((start + limit), len(message))\n            part = message[start:end]\n            suffix = f'<{(i + 1)}/{num_parts}>'\n            parts.append((part + suffix))\n        if (''.join(parts) == message):\n            return parts\n        else:\n            return []\n", "status": "Wrong Answer", "reward": false, "info": {"status_code": 11, "lang": "python3", "run_success": true, "status_runtime": "N/A", "memory": 14716000, "question_id": "2563", "elapsed_time": 66, "compare_result": "0000001010000000000000000000000000000000000000000000100000000000000000011111001000000000000100", "code_output": "[]", "std_output": "", "last_testcase": "\"this is really a very awesome message\"\n9", "expected_output": "[\"thi<1/14>\",\"s i<2/14>\",\"s r<3/14>\",\"eal<4/14>\",\"ly <5/14>\",\"a v<6/14>\",\"ery<7/14>\",\" aw<8/14>\",\"eso<9/14>\",\"me<10/14>\",\" m<11/14>\",\"es<12/14>\",\"sa<13/14>\",\"ge<14/14>\"]", "task_finish_time": 1681356761011, "total_correct": 10, "total_testcases": 94, "runtime_percentile": null, "status_memory": "N/A", "memory_percentile": null, "pretty_lang": "Python3", "submission_id": "932840775", "input_formatted": "\"this is really a very awesome message\", 9", "input": "\"this is really a very awesome message\"\n9", "status_msg": "Wrong Answer", "state": "SUCCESS"}}
{"code": "\nclass Solution():\n\n    def maxPalindromes(self, s: str, k: int) -> int:\n        '\\n    You are given a string s and a positive integer k.\\n    Select a set of non-overlapping substrings from the string s that satisfy the following conditions:\\n    The length of each substring is at least k.\\n    Each substring is a palindrome.\\n    Return the maximum number of substrings in an optimal selection.\\n    A substring is a contiguous sequence of characters within a string.\\n    '\n\n        def is_palindrome(substring):\n            return (substring == substring[::(- 1)])\n\n        def count_palindromes(s, start, end, k, memo):\n            if (start >= end):\n                return 0\n            if ((start, end) in memo):\n                return memo[(start, end)]\n            count = 0\n            for i in range(((start + k) - 1), end):\n                if is_palindrome(s[start:(i + 1)]):\n                    count = max(count, (1 + count_palindromes(s, (i + 1), end, k, memo)))\n            memo[(start, end)] = count\n            return count\n        memo = {}\n        return count_palindromes(s, 0, len(s), k, memo)\n", "status": "Wrong Answer", "reward": false, "info": {"status_code": 11, "lang": "python3", "run_success": true, "status_runtime": "N/A", "memory": 16276000, "question_id": "2559", "elapsed_time": 5251, "compare_result": "0101111100101000000000000000000000000011111111010100010", "code_output": "1", "std_output": "", "last_testcase": "\"abaccdbbd\"\n3", "expected_output": "2", "task_finish_time": 1681356793261, "total_correct": 19, "total_testcases": 55, "runtime_percentile": null, "status_memory": "N/A", "memory_percentile": null, "pretty_lang": "Python3", "submission_id": "932840936", "input_formatted": "\"abaccdbbd\", 3", "input": "\"abaccdbbd\"\n3", "status_msg": "Wrong Answer", "state": "SUCCESS"}}
