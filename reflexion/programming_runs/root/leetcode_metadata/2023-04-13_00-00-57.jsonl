{"code": "\nclass Solution():\n\n    def minReverseOperations(self, n: int, p: int, banned: List[int], k: int) -> List[int]:\n        \"\\n    You are given an integer n and an integer p in the range [0, n - 1]. Representing a 0-indexed array arr\\xa0of length n where all positions are set to 0's, except position p which is set to 1.\\n    You are also given an integer array banned containing some positions from the array. For the ith position in banned, arr[banned[i]] = 0, and banned[i] != p.\\n    You can perform multiple operations on arr. In an operation, you can choose a subarray with size k and reverse the subarray. However, the 1 in arr should never go to any of the positions in banned. In other words, after each operation arr[banned[i]] remains 0.\\n    Return an array ans where for each i from [0, n - 1], ans[i] is the minimum number of reverse operations needed to bring the 1 to position i in arr, or -1 if it is impossible.\\n    A subarray is a contiguous non-empty sequence of elements within an array.\\n    The values of ans[i] are independent for all i's.\\n    The reverse of an array is an array containing the values in reverse order.\\n    \"\n        from typing import List\n        arr = ([0] * n)\n        arr[p] = 1\n        for i in banned:\n            arr[i] = (- 1)\n\n        def reverse_subarray(subarr):\n            for i in range(len(subarr)):\n                if (subarr[i] == (- 1)):\n                    return False\n            subarr.reverse()\n            return True\n        ans = ([(- 1)] * n)\n        for i in range(n):\n            if (arr[i] == (- 1)):\n                continue\n            subarr = arr[max(0, ((i - k) + 1)):(i + 1)]\n            while (len(subarr) < k):\n                subarr.insert(0, 0)\n            while (len(subarr) > k):\n                subarr.pop(0)\n            count = 0\n            while (not reverse_subarray(subarr)):\n                count += 1\n                if (count > n):\n                    return ([(- 1)] * n)\n            ans[i] = count\n        return ans\n", "status": "Submission Timed-Out", "reward": false, "info": {"state": "STARTED"}}
